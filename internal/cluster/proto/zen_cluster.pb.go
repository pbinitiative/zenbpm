// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v6.30.1
// source: zen_cluster.proto

package proto

import (
	proto "github.com/pbinitiative/zenbpm/internal/cluster/command/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SubscribeJobRequest_Type int32

const (
	SubscribeJobRequest_TYPE_UNKNOWN         SubscribeJobRequest_Type = 0
	SubscribeJobRequest_TYPE_SUBSCRIBE       SubscribeJobRequest_Type = 1 // subscribe client to provided job_type
	SubscribeJobRequest_TYPE_UNSUBSCRIBE     SubscribeJobRequest_Type = 2 // unsubscribe client from provided job_type
	SubscribeJobRequest_TYPE_UNSUBSCRIBE_ALL SubscribeJobRequest_Type = 3 // client is no longer available and we should clean up
)

// Enum value maps for SubscribeJobRequest_Type.
var (
	SubscribeJobRequest_Type_name = map[int32]string{
		0: "TYPE_UNKNOWN",
		1: "TYPE_SUBSCRIBE",
		2: "TYPE_UNSUBSCRIBE",
		3: "TYPE_UNSUBSCRIBE_ALL",
	}
	SubscribeJobRequest_Type_value = map[string]int32{
		"TYPE_UNKNOWN":         0,
		"TYPE_SUBSCRIBE":       1,
		"TYPE_UNSUBSCRIBE":     2,
		"TYPE_UNSUBSCRIBE_ALL": 3,
	}
)

func (x SubscribeJobRequest_Type) Enum() *SubscribeJobRequest_Type {
	p := new(SubscribeJobRequest_Type)
	*p = x
	return p
}

func (x SubscribeJobRequest_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubscribeJobRequest_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_zen_cluster_proto_enumTypes[0].Descriptor()
}

func (SubscribeJobRequest_Type) Type() protoreflect.EnumType {
	return &file_zen_cluster_proto_enumTypes[0]
}

func (x SubscribeJobRequest_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubscribeJobRequest_Type.Descriptor instead.
func (SubscribeJobRequest_Type) EnumDescriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{57, 0}
}

// TODO: do we want to keep custom error struct or use the default error handling?
type ErrorResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          uint32                 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ErrorResult) Reset() {
	*x = ErrorResult{}
	mi := &file_zen_cluster_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorResult) ProtoMessage() {}

func (x *ErrorResult) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorResult.ProtoReflect.Descriptor instead.
func (*ErrorResult) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{0}
}

func (x *ErrorResult) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ErrorResult) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type NotifyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Address       string                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NotifyRequest) Reset() {
	*x = NotifyRequest{}
	mi := &file_zen_cluster_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotifyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyRequest) ProtoMessage() {}

func (x *NotifyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyRequest.ProtoReflect.Descriptor instead.
func (*NotifyRequest) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{1}
}

func (x *NotifyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NotifyRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type NotifyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *ErrorResult           `protobuf:"bytes,1,opt,name=error,proto3,oneof" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NotifyResponse) Reset() {
	*x = NotifyResponse{}
	mi := &file_zen_cluster_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotifyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyResponse) ProtoMessage() {}

func (x *NotifyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyResponse.ProtoReflect.Descriptor instead.
func (*NotifyResponse) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{2}
}

func (x *NotifyResponse) GetError() *ErrorResult {
	if x != nil {
		return x.Error
	}
	return nil
}

type JoinRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Address       string                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Voter         bool                   `protobuf:"varint,3,opt,name=voter,proto3" json:"voter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinRequest) Reset() {
	*x = JoinRequest{}
	mi := &file_zen_cluster_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinRequest) ProtoMessage() {}

func (x *JoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinRequest.ProtoReflect.Descriptor instead.
func (*JoinRequest) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{3}
}

func (x *JoinRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *JoinRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *JoinRequest) GetVoter() bool {
	if x != nil {
		return x.Voter
	}
	return false
}

type JoinResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *ErrorResult           `protobuf:"bytes,1,opt,name=error,proto3,oneof" json:"error,omitempty"`
	Leader        string                 `protobuf:"bytes,2,opt,name=leader,proto3" json:"leader,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinResponse) Reset() {
	*x = JoinResponse{}
	mi := &file_zen_cluster_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinResponse) ProtoMessage() {}

func (x *JoinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinResponse.ProtoReflect.Descriptor instead.
func (*JoinResponse) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{4}
}

func (x *JoinResponse) GetError() *ErrorResult {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *JoinResponse) GetLeader() string {
	if x != nil {
		return x.Leader
	}
	return ""
}

type AddPartitionNodeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Address       string                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Voter         bool                   `protobuf:"varint,3,opt,name=voter,proto3" json:"voter,omitempty"`
	Partition     uint32                 `protobuf:"varint,4,opt,name=partition,proto3" json:"partition,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddPartitionNodeRequest) Reset() {
	*x = AddPartitionNodeRequest{}
	mi := &file_zen_cluster_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddPartitionNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPartitionNodeRequest) ProtoMessage() {}

func (x *AddPartitionNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPartitionNodeRequest.ProtoReflect.Descriptor instead.
func (*AddPartitionNodeRequest) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{5}
}

func (x *AddPartitionNodeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AddPartitionNodeRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AddPartitionNodeRequest) GetVoter() bool {
	if x != nil {
		return x.Voter
	}
	return false
}

func (x *AddPartitionNodeRequest) GetPartition() uint32 {
	if x != nil {
		return x.Partition
	}
	return 0
}

type AddPartitionNodeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *ErrorResult           `protobuf:"bytes,1,opt,name=error,proto3,oneof" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddPartitionNodeResponse) Reset() {
	*x = AddPartitionNodeResponse{}
	mi := &file_zen_cluster_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddPartitionNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPartitionNodeResponse) ProtoMessage() {}

func (x *AddPartitionNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPartitionNodeResponse.ProtoReflect.Descriptor instead.
func (*AddPartitionNodeResponse) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{6}
}

func (x *AddPartitionNodeResponse) GetError() *ErrorResult {
	if x != nil {
		return x.Error
	}
	return nil
}

type ShutdownPartitionNodeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Partition     uint32                 `protobuf:"varint,2,opt,name=partition,proto3" json:"partition,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShutdownPartitionNodeRequest) Reset() {
	*x = ShutdownPartitionNodeRequest{}
	mi := &file_zen_cluster_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShutdownPartitionNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutdownPartitionNodeRequest) ProtoMessage() {}

func (x *ShutdownPartitionNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutdownPartitionNodeRequest.ProtoReflect.Descriptor instead.
func (*ShutdownPartitionNodeRequest) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{7}
}

func (x *ShutdownPartitionNodeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ShutdownPartitionNodeRequest) GetPartition() uint32 {
	if x != nil {
		return x.Partition
	}
	return 0
}

type ShutdownPartitionNodeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *ErrorResult           `protobuf:"bytes,1,opt,name=error,proto3,oneof" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShutdownPartitionNodeResponse) Reset() {
	*x = ShutdownPartitionNodeResponse{}
	mi := &file_zen_cluster_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShutdownPartitionNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutdownPartitionNodeResponse) ProtoMessage() {}

func (x *ShutdownPartitionNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutdownPartitionNodeResponse.ProtoReflect.Descriptor instead.
func (*ShutdownPartitionNodeResponse) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{8}
}

func (x *ShutdownPartitionNodeResponse) GetError() *ErrorResult {
	if x != nil {
		return x.Error
	}
	return nil
}

type PartitionNodeLeaderChangeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Partition     uint32                 `protobuf:"varint,2,opt,name=partition,proto3" json:"partition,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PartitionNodeLeaderChangeRequest) Reset() {
	*x = PartitionNodeLeaderChangeRequest{}
	mi := &file_zen_cluster_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartitionNodeLeaderChangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionNodeLeaderChangeRequest) ProtoMessage() {}

func (x *PartitionNodeLeaderChangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionNodeLeaderChangeRequest.ProtoReflect.Descriptor instead.
func (*PartitionNodeLeaderChangeRequest) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{9}
}

func (x *PartitionNodeLeaderChangeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PartitionNodeLeaderChangeRequest) GetPartition() uint32 {
	if x != nil {
		return x.Partition
	}
	return 0
}

type PartitionNodeLeaderChangeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *ErrorResult           `protobuf:"bytes,1,opt,name=error,proto3,oneof" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PartitionNodeLeaderChangeResponse) Reset() {
	*x = PartitionNodeLeaderChangeResponse{}
	mi := &file_zen_cluster_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartitionNodeLeaderChangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionNodeLeaderChangeResponse) ProtoMessage() {}

func (x *PartitionNodeLeaderChangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionNodeLeaderChangeResponse.ProtoReflect.Descriptor instead.
func (*PartitionNodeLeaderChangeResponse) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{10}
}

func (x *PartitionNodeLeaderChangeResponse) GetError() *ErrorResult {
	if x != nil {
		return x.Error
	}
	return nil
}

type RemovePartitionNodeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Partition     uint32                 `protobuf:"varint,2,opt,name=partition,proto3" json:"partition,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemovePartitionNodeRequest) Reset() {
	*x = RemovePartitionNodeRequest{}
	mi := &file_zen_cluster_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemovePartitionNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePartitionNodeRequest) ProtoMessage() {}

func (x *RemovePartitionNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePartitionNodeRequest.ProtoReflect.Descriptor instead.
func (*RemovePartitionNodeRequest) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{11}
}

func (x *RemovePartitionNodeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RemovePartitionNodeRequest) GetPartition() uint32 {
	if x != nil {
		return x.Partition
	}
	return 0
}

type RemovePartitionNodeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *ErrorResult           `protobuf:"bytes,1,opt,name=error,proto3,oneof" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemovePartitionNodeResponse) Reset() {
	*x = RemovePartitionNodeResponse{}
	mi := &file_zen_cluster_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemovePartitionNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePartitionNodeResponse) ProtoMessage() {}

func (x *RemovePartitionNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePartitionNodeResponse.ProtoReflect.Descriptor instead.
func (*RemovePartitionNodeResponse) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{12}
}

func (x *RemovePartitionNodeResponse) GetError() *ErrorResult {
	if x != nil {
		return x.Error
	}
	return nil
}

type ResumePartitionNodeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Partition     uint32                 `protobuf:"varint,2,opt,name=partition,proto3" json:"partition,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResumePartitionNodeRequest) Reset() {
	*x = ResumePartitionNodeRequest{}
	mi := &file_zen_cluster_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResumePartitionNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumePartitionNodeRequest) ProtoMessage() {}

func (x *ResumePartitionNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumePartitionNodeRequest.ProtoReflect.Descriptor instead.
func (*ResumePartitionNodeRequest) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{13}
}

func (x *ResumePartitionNodeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ResumePartitionNodeRequest) GetPartition() uint32 {
	if x != nil {
		return x.Partition
	}
	return 0
}

type ResumePartitionNodeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *ErrorResult           `protobuf:"bytes,1,opt,name=error,proto3,oneof" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResumePartitionNodeResponse) Reset() {
	*x = ResumePartitionNodeResponse{}
	mi := &file_zen_cluster_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResumePartitionNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumePartitionNodeResponse) ProtoMessage() {}

func (x *ResumePartitionNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumePartitionNodeResponse.ProtoReflect.Descriptor instead.
func (*ResumePartitionNodeResponse) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{14}
}

func (x *ResumePartitionNodeResponse) GetError() *ErrorResult {
	if x != nil {
		return x.Error
	}
	return nil
}

type EvaluateDecisionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BindingType   string                 `protobuf:"bytes,1,opt,name=bindingType,proto3" json:"bindingType,omitempty"`
	DecisionId    string                 `protobuf:"bytes,2,opt,name=decisionId,proto3" json:"decisionId,omitempty"`
	VersionTag    string                 `protobuf:"bytes,3,opt,name=versionTag,proto3" json:"versionTag,omitempty"`
	Variables     []byte                 `protobuf:"bytes,4,opt,name=variables,proto3" json:"variables,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EvaluateDecisionRequest) Reset() {
	*x = EvaluateDecisionRequest{}
	mi := &file_zen_cluster_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EvaluateDecisionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluateDecisionRequest) ProtoMessage() {}

func (x *EvaluateDecisionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluateDecisionRequest.ProtoReflect.Descriptor instead.
func (*EvaluateDecisionRequest) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{15}
}

func (x *EvaluateDecisionRequest) GetBindingType() string {
	if x != nil {
		return x.BindingType
	}
	return ""
}

func (x *EvaluateDecisionRequest) GetDecisionId() string {
	if x != nil {
		return x.DecisionId
	}
	return ""
}

func (x *EvaluateDecisionRequest) GetVersionTag() string {
	if x != nil {
		return x.VersionTag
	}
	return ""
}

func (x *EvaluateDecisionRequest) GetVariables() []byte {
	if x != nil {
		return x.Variables
	}
	return nil
}

type EvaluatedDRDResult struct {
	state              protoimpl.MessageState     `protogen:"open.v1"`
	Error              *ErrorResult               `protobuf:"bytes,1,opt,name=error,proto3,oneof" json:"error,omitempty"`
	EvaluatedDecisions []*EvaluatedDecisionResult `protobuf:"bytes,2,rep,name=evaluatedDecisions,proto3" json:"evaluatedDecisions,omitempty"`
	DecisionOutput     []byte                     `protobuf:"bytes,3,opt,name=DecisionOutput,proto3" json:"DecisionOutput,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *EvaluatedDRDResult) Reset() {
	*x = EvaluatedDRDResult{}
	mi := &file_zen_cluster_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EvaluatedDRDResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluatedDRDResult) ProtoMessage() {}

func (x *EvaluatedDRDResult) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluatedDRDResult.ProtoReflect.Descriptor instead.
func (*EvaluatedDRDResult) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{16}
}

func (x *EvaluatedDRDResult) GetError() *ErrorResult {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *EvaluatedDRDResult) GetEvaluatedDecisions() []*EvaluatedDecisionResult {
	if x != nil {
		return x.EvaluatedDecisions
	}
	return nil
}

func (x *EvaluatedDRDResult) GetDecisionOutput() []byte {
	if x != nil {
		return x.DecisionOutput
	}
	return nil
}

type EvaluatedDecisionResult struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	DecisionId                string                 `protobuf:"bytes,1,opt,name=decisionId,proto3" json:"decisionId,omitempty"`
	DecisionName              string                 `protobuf:"bytes,2,opt,name=decisionName,proto3" json:"decisionName,omitempty"`
	DecisionType              string                 `protobuf:"bytes,3,opt,name=decisionType,proto3" json:"decisionType,omitempty"`
	DecisionDefinitionVersion int64                  `protobuf:"varint,4,opt,name=decisionDefinitionVersion,proto3" json:"decisionDefinitionVersion,omitempty"`
	DecisionDefinitionKey     int64                  `protobuf:"varint,5,opt,name=decisionDefinitionKey,proto3" json:"decisionDefinitionKey,omitempty"`
	DecisionDefinitionId      string                 `protobuf:"bytes,6,opt,name=decisionDefinitionId,proto3" json:"decisionDefinitionId,omitempty"`
	MatchedRules              []*EvaluatedRule       `protobuf:"bytes,7,rep,name=matchedRules,proto3" json:"matchedRules,omitempty"`
	DecisionOutput            []byte                 `protobuf:"bytes,8,opt,name=decisionOutput,proto3" json:"decisionOutput,omitempty"`
	EvaluatedInputs           []*EvaluatedInput      `protobuf:"bytes,9,rep,name=evaluatedInputs,proto3" json:"evaluatedInputs,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *EvaluatedDecisionResult) Reset() {
	*x = EvaluatedDecisionResult{}
	mi := &file_zen_cluster_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EvaluatedDecisionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluatedDecisionResult) ProtoMessage() {}

func (x *EvaluatedDecisionResult) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluatedDecisionResult.ProtoReflect.Descriptor instead.
func (*EvaluatedDecisionResult) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{17}
}

func (x *EvaluatedDecisionResult) GetDecisionId() string {
	if x != nil {
		return x.DecisionId
	}
	return ""
}

func (x *EvaluatedDecisionResult) GetDecisionName() string {
	if x != nil {
		return x.DecisionName
	}
	return ""
}

func (x *EvaluatedDecisionResult) GetDecisionType() string {
	if x != nil {
		return x.DecisionType
	}
	return ""
}

func (x *EvaluatedDecisionResult) GetDecisionDefinitionVersion() int64 {
	if x != nil {
		return x.DecisionDefinitionVersion
	}
	return 0
}

func (x *EvaluatedDecisionResult) GetDecisionDefinitionKey() int64 {
	if x != nil {
		return x.DecisionDefinitionKey
	}
	return 0
}

func (x *EvaluatedDecisionResult) GetDecisionDefinitionId() string {
	if x != nil {
		return x.DecisionDefinitionId
	}
	return ""
}

func (x *EvaluatedDecisionResult) GetMatchedRules() []*EvaluatedRule {
	if x != nil {
		return x.MatchedRules
	}
	return nil
}

func (x *EvaluatedDecisionResult) GetDecisionOutput() []byte {
	if x != nil {
		return x.DecisionOutput
	}
	return nil
}

func (x *EvaluatedDecisionResult) GetEvaluatedInputs() []*EvaluatedInput {
	if x != nil {
		return x.EvaluatedInputs
	}
	return nil
}

type EvaluatedRule struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	RuleId           string                 `protobuf:"bytes,1,opt,name=ruleId,proto3" json:"ruleId,omitempty"`
	RuleIndex        int32                  `protobuf:"varint,2,opt,name=ruleIndex,proto3" json:"ruleIndex,omitempty"`
	EvaluatedOutputs []*EvaluatedOutput     `protobuf:"bytes,3,rep,name=evaluatedOutputs,proto3" json:"evaluatedOutputs,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *EvaluatedRule) Reset() {
	*x = EvaluatedRule{}
	mi := &file_zen_cluster_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EvaluatedRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluatedRule) ProtoMessage() {}

func (x *EvaluatedRule) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluatedRule.ProtoReflect.Descriptor instead.
func (*EvaluatedRule) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{18}
}

func (x *EvaluatedRule) GetRuleId() string {
	if x != nil {
		return x.RuleId
	}
	return ""
}

func (x *EvaluatedRule) GetRuleIndex() int32 {
	if x != nil {
		return x.RuleIndex
	}
	return 0
}

func (x *EvaluatedRule) GetEvaluatedOutputs() []*EvaluatedOutput {
	if x != nil {
		return x.EvaluatedOutputs
	}
	return nil
}

type EvaluatedOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OutputId      string                 `protobuf:"bytes,1,opt,name=outputId,proto3" json:"outputId,omitempty"`
	OutputName    string                 `protobuf:"bytes,2,opt,name=outputName,proto3" json:"outputName,omitempty"`
	OutputValue   []byte                 `protobuf:"bytes,3,opt,name=outputValue,proto3" json:"outputValue,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EvaluatedOutput) Reset() {
	*x = EvaluatedOutput{}
	mi := &file_zen_cluster_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EvaluatedOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluatedOutput) ProtoMessage() {}

func (x *EvaluatedOutput) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluatedOutput.ProtoReflect.Descriptor instead.
func (*EvaluatedOutput) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{19}
}

func (x *EvaluatedOutput) GetOutputId() string {
	if x != nil {
		return x.OutputId
	}
	return ""
}

func (x *EvaluatedOutput) GetOutputName() string {
	if x != nil {
		return x.OutputName
	}
	return ""
}

func (x *EvaluatedOutput) GetOutputValue() []byte {
	if x != nil {
		return x.OutputValue
	}
	return nil
}

type EvaluatedInput struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	InputId         string                 `protobuf:"bytes,1,opt,name=inputId,proto3" json:"inputId,omitempty"`
	InputName       string                 `protobuf:"bytes,2,opt,name=inputName,proto3" json:"inputName,omitempty"`
	InputExpression string                 `protobuf:"bytes,3,opt,name=inputExpression,proto3" json:"inputExpression,omitempty"`
	InputValue      []byte                 `protobuf:"bytes,4,opt,name=inputValue,proto3" json:"inputValue,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *EvaluatedInput) Reset() {
	*x = EvaluatedInput{}
	mi := &file_zen_cluster_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EvaluatedInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluatedInput) ProtoMessage() {}

func (x *EvaluatedInput) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluatedInput.ProtoReflect.Descriptor instead.
func (*EvaluatedInput) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{20}
}

func (x *EvaluatedInput) GetInputId() string {
	if x != nil {
		return x.InputId
	}
	return ""
}

func (x *EvaluatedInput) GetInputName() string {
	if x != nil {
		return x.InputName
	}
	return ""
}

func (x *EvaluatedInput) GetInputExpression() string {
	if x != nil {
		return x.InputExpression
	}
	return ""
}

func (x *EvaluatedInput) GetInputValue() []byte {
	if x != nil {
		return x.InputValue
	}
	return nil
}

type DecisionDefinition struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Key                  int64                  `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	Version              int32                  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	DecisionDefinitionId string                 `protobuf:"bytes,3,opt,name=decision_definition_id,json=decisionDefinitionId,proto3" json:"decision_definition_id,omitempty"`
	Definition           []byte                 `protobuf:"bytes,4,opt,name=definition,proto3" json:"definition,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *DecisionDefinition) Reset() {
	*x = DecisionDefinition{}
	mi := &file_zen_cluster_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecisionDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecisionDefinition) ProtoMessage() {}

func (x *DecisionDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecisionDefinition.ProtoReflect.Descriptor instead.
func (*DecisionDefinition) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{21}
}

func (x *DecisionDefinition) GetKey() int64 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *DecisionDefinition) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *DecisionDefinition) GetDecisionDefinitionId() string {
	if x != nil {
		return x.DecisionDefinitionId
	}
	return ""
}

func (x *DecisionDefinition) GetDefinition() []byte {
	if x != nil {
		return x.Definition
	}
	return nil
}

type Decision struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Key                   int64                  `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	Version               int32                  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	DecisionId            string                 `protobuf:"bytes,3,opt,name=decision_id,json=decisionId,proto3" json:"decision_id,omitempty"`
	VersionTag            string                 `protobuf:"bytes,4,opt,name=version_tag,json=versionTag,proto3" json:"version_tag,omitempty"`
	DecisionDefinitionId  string                 `protobuf:"bytes,5,opt,name=decision_definition_id,json=decisionDefinitionId,proto3" json:"decision_definition_id,omitempty"`
	DecisionDefinitionKey string                 `protobuf:"bytes,6,opt,name=decision_definition_key,json=decisionDefinitionKey,proto3" json:"decision_definition_key,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Decision) Reset() {
	*x = Decision{}
	mi := &file_zen_cluster_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Decision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Decision) ProtoMessage() {}

func (x *Decision) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Decision.ProtoReflect.Descriptor instead.
func (*Decision) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{22}
}

func (x *Decision) GetKey() int64 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *Decision) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Decision) GetDecisionId() string {
	if x != nil {
		return x.DecisionId
	}
	return ""
}

func (x *Decision) GetVersionTag() string {
	if x != nil {
		return x.VersionTag
	}
	return ""
}

func (x *Decision) GetDecisionDefinitionId() string {
	if x != nil {
		return x.DecisionDefinitionId
	}
	return ""
}

func (x *Decision) GetDecisionDefinitionKey() string {
	if x != nil {
		return x.DecisionDefinitionKey
	}
	return ""
}

type ProcessDefinition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           int64                  `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	Version       int32                  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	ProcessId     string                 `protobuf:"bytes,3,opt,name=process_id,json=processId,proto3" json:"process_id,omitempty"`
	Definition    []byte                 `protobuf:"bytes,4,opt,name=definition,proto3" json:"definition,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProcessDefinition) Reset() {
	*x = ProcessDefinition{}
	mi := &file_zen_cluster_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessDefinition) ProtoMessage() {}

func (x *ProcessDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessDefinition.ProtoReflect.Descriptor instead.
func (*ProcessDefinition) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{23}
}

func (x *ProcessDefinition) GetKey() int64 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *ProcessDefinition) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ProcessDefinition) GetProcessId() string {
	if x != nil {
		return x.ProcessId
	}
	return ""
}

func (x *ProcessDefinition) GetDefinition() []byte {
	if x != nil {
		return x.Definition
	}
	return nil
}

type ProcessInstance struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           int64                  `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	ProcessId     string                 `protobuf:"bytes,2,opt,name=process_id,json=processId,proto3" json:"process_id,omitempty"`
	Variables     []byte                 `protobuf:"bytes,3,opt,name=variables,proto3" json:"variables,omitempty"`
	State         int64                  `protobuf:"varint,4,opt,name=state,proto3" json:"state,omitempty"`
	CreatedAt     int64                  `protobuf:"varint,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	DefinitionKey int64                  `protobuf:"varint,6,opt,name=definition_key,json=definitionKey,proto3" json:"definition_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProcessInstance) Reset() {
	*x = ProcessInstance{}
	mi := &file_zen_cluster_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessInstance) ProtoMessage() {}

func (x *ProcessInstance) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessInstance.ProtoReflect.Descriptor instead.
func (*ProcessInstance) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{24}
}

func (x *ProcessInstance) GetKey() int64 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *ProcessInstance) GetProcessId() string {
	if x != nil {
		return x.ProcessId
	}
	return ""
}

func (x *ProcessInstance) GetVariables() []byte {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *ProcessInstance) GetState() int64 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *ProcessInstance) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ProcessInstance) GetDefinitionKey() int64 {
	if x != nil {
		return x.DefinitionKey
	}
	return 0
}

type Job struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Key                int64                  `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	ElementInstanceKey int64                  `protobuf:"varint,2,opt,name=element_instance_key,json=elementInstanceKey,proto3" json:"element_instance_key,omitempty"`
	ElementId          string                 `protobuf:"bytes,3,opt,name=element_id,json=elementId,proto3" json:"element_id,omitempty"`
	ProcessInstanceKey int64                  `protobuf:"varint,4,opt,name=process_instance_key,json=processInstanceKey,proto3" json:"process_instance_key,omitempty"`
	Type               string                 `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	State              int64                  `protobuf:"varint,6,opt,name=state,proto3" json:"state,omitempty"`
	CreatedAt          int64                  `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Variables          []byte                 `protobuf:"bytes,8,opt,name=variables,proto3" json:"variables,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Job) Reset() {
	*x = Job{}
	mi := &file_zen_cluster_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{25}
}

func (x *Job) GetKey() int64 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *Job) GetElementInstanceKey() int64 {
	if x != nil {
		return x.ElementInstanceKey
	}
	return 0
}

func (x *Job) GetElementId() string {
	if x != nil {
		return x.ElementId
	}
	return ""
}

func (x *Job) GetProcessInstanceKey() int64 {
	if x != nil {
		return x.ProcessInstanceKey
	}
	return 0
}

func (x *Job) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Job) GetState() int64 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *Job) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Job) GetVariables() []byte {
	if x != nil {
		return x.Variables
	}
	return nil
}

type FlowElement struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Key                int64                  `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	ElementId          string                 `protobuf:"bytes,2,opt,name=element_id,json=elementId,proto3" json:"element_id,omitempty"`
	ProcessInstanceKey int64                  `protobuf:"varint,3,opt,name=process_instance_key,json=processInstanceKey,proto3" json:"process_instance_key,omitempty"`
	CreatedAt          int64                  `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *FlowElement) Reset() {
	*x = FlowElement{}
	mi := &file_zen_cluster_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlowElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowElement) ProtoMessage() {}

func (x *FlowElement) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowElement.ProtoReflect.Descriptor instead.
func (*FlowElement) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{26}
}

func (x *FlowElement) GetKey() int64 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *FlowElement) GetElementId() string {
	if x != nil {
		return x.ElementId
	}
	return ""
}

func (x *FlowElement) GetProcessInstanceKey() int64 {
	if x != nil {
		return x.ProcessInstanceKey
	}
	return 0
}

func (x *FlowElement) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type Incident struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Key                int64                  `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	ElementInstanceKey int64                  `protobuf:"varint,2,opt,name=element_instance_key,json=elementInstanceKey,proto3" json:"element_instance_key,omitempty"`
	ElementId          string                 `protobuf:"bytes,3,opt,name=element_id,json=elementId,proto3" json:"element_id,omitempty"`
	ProcessInstanceKey int64                  `protobuf:"varint,4,opt,name=process_instance_key,json=processInstanceKey,proto3" json:"process_instance_key,omitempty"`
	Message            string                 `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	CreatedAt          int64                  `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ResolvedAt         *int64                 `protobuf:"varint,7,opt,name=resolved_at,json=resolvedAt,proto3,oneof" json:"resolved_at,omitempty"`
	ExecutionToken     int64                  `protobuf:"varint,8,opt,name=execution_token,json=executionToken,proto3" json:"execution_token,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Incident) Reset() {
	*x = Incident{}
	mi := &file_zen_cluster_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Incident) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Incident) ProtoMessage() {}

func (x *Incident) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Incident.ProtoReflect.Descriptor instead.
func (*Incident) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{27}
}

func (x *Incident) GetKey() int64 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *Incident) GetElementInstanceKey() int64 {
	if x != nil {
		return x.ElementInstanceKey
	}
	return 0
}

func (x *Incident) GetElementId() string {
	if x != nil {
		return x.ElementId
	}
	return ""
}

func (x *Incident) GetProcessInstanceKey() int64 {
	if x != nil {
		return x.ProcessInstanceKey
	}
	return 0
}

func (x *Incident) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Incident) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Incident) GetResolvedAt() int64 {
	if x != nil && x.ResolvedAt != nil {
		return *x.ResolvedAt
	}
	return 0
}

func (x *Incident) GetExecutionToken() int64 {
	if x != nil {
		return x.ExecutionToken
	}
	return 0
}

type DeployDecisionDefinitionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           int64                  `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	Data          []byte                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeployDecisionDefinitionRequest) Reset() {
	*x = DeployDecisionDefinitionRequest{}
	mi := &file_zen_cluster_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeployDecisionDefinitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployDecisionDefinitionRequest) ProtoMessage() {}

func (x *DeployDecisionDefinitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployDecisionDefinitionRequest.ProtoReflect.Descriptor instead.
func (*DeployDecisionDefinitionRequest) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{28}
}

func (x *DeployDecisionDefinitionRequest) GetKey() int64 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *DeployDecisionDefinitionRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeployDecisionDefinitionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *ErrorResult           `protobuf:"bytes,1,opt,name=error,proto3,oneof" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeployDecisionDefinitionResponse) Reset() {
	*x = DeployDecisionDefinitionResponse{}
	mi := &file_zen_cluster_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeployDecisionDefinitionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployDecisionDefinitionResponse) ProtoMessage() {}

func (x *DeployDecisionDefinitionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployDecisionDefinitionResponse.ProtoReflect.Descriptor instead.
func (*DeployDecisionDefinitionResponse) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{29}
}

func (x *DeployDecisionDefinitionResponse) GetError() *ErrorResult {
	if x != nil {
		return x.Error
	}
	return nil
}

type DeployProcessDefinitionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           int64                  `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	Data          []byte                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeployProcessDefinitionRequest) Reset() {
	*x = DeployProcessDefinitionRequest{}
	mi := &file_zen_cluster_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeployProcessDefinitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployProcessDefinitionRequest) ProtoMessage() {}

func (x *DeployProcessDefinitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployProcessDefinitionRequest.ProtoReflect.Descriptor instead.
func (*DeployProcessDefinitionRequest) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{30}
}

func (x *DeployProcessDefinitionRequest) GetKey() int64 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *DeployProcessDefinitionRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeployProcessDefinitionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *ErrorResult           `protobuf:"bytes,1,opt,name=error,proto3,oneof" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeployProcessDefinitionResponse) Reset() {
	*x = DeployProcessDefinitionResponse{}
	mi := &file_zen_cluster_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeployProcessDefinitionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployProcessDefinitionResponse) ProtoMessage() {}

func (x *DeployProcessDefinitionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployProcessDefinitionResponse.ProtoReflect.Descriptor instead.
func (*DeployProcessDefinitionResponse) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{31}
}

func (x *DeployProcessDefinitionResponse) GetError() *ErrorResult {
	if x != nil {
		return x.Error
	}
	return nil
}

type CompleteJobRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           int64                  `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	Variables     []byte                 `protobuf:"bytes,2,opt,name=variables,proto3" json:"variables,omitempty"` // []byte of json variables
	ClientId      string                 `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompleteJobRequest) Reset() {
	*x = CompleteJobRequest{}
	mi := &file_zen_cluster_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompleteJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteJobRequest) ProtoMessage() {}

func (x *CompleteJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteJobRequest.ProtoReflect.Descriptor instead.
func (*CompleteJobRequest) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{32}
}

func (x *CompleteJobRequest) GetKey() int64 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *CompleteJobRequest) GetVariables() []byte {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *CompleteJobRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

type CompleteJobResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *ErrorResult           `protobuf:"bytes,1,opt,name=error,proto3,oneof" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompleteJobResponse) Reset() {
	*x = CompleteJobResponse{}
	mi := &file_zen_cluster_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompleteJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteJobResponse) ProtoMessage() {}

func (x *CompleteJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteJobResponse.ProtoReflect.Descriptor instead.
func (*CompleteJobResponse) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{33}
}

func (x *CompleteJobResponse) GetError() *ErrorResult {
	if x != nil {
		return x.Error
	}
	return nil
}

type ActivateJobRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobType       string                 `protobuf:"bytes,1,opt,name=job_type,json=jobType,proto3" json:"job_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActivateJobRequest) Reset() {
	*x = ActivateJobRequest{}
	mi := &file_zen_cluster_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivateJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateJobRequest) ProtoMessage() {}

func (x *ActivateJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateJobRequest.ProtoReflect.Descriptor instead.
func (*ActivateJobRequest) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{34}
}

func (x *ActivateJobRequest) GetJobType() string {
	if x != nil {
		return x.JobType
	}
	return ""
}

type ActivateJobResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *ErrorResult           `protobuf:"bytes,1,opt,name=error,proto3,oneof" json:"error,omitempty"`
	Job           *InternalJob           `protobuf:"bytes,2,opt,name=job,proto3" json:"job,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActivateJobResponse) Reset() {
	*x = ActivateJobResponse{}
	mi := &file_zen_cluster_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivateJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateJobResponse) ProtoMessage() {}

func (x *ActivateJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateJobResponse.ProtoReflect.Descriptor instead.
func (*ActivateJobResponse) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{35}
}

func (x *ActivateJobResponse) GetError() *ErrorResult {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ActivateJobResponse) GetJob() *InternalJob {
	if x != nil {
		return x.Job
	}
	return nil
}

type InternalJob struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           int64                  `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	InstanceKey   int64                  `protobuf:"varint,2,opt,name=instance_key,json=instanceKey,proto3" json:"instance_key,omitempty"`
	Variables     []byte                 `protobuf:"bytes,3,opt,name=variables,proto3" json:"variables,omitempty"`
	Type          string                 `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	State         int64                  `protobuf:"varint,5,opt,name=state,proto3" json:"state,omitempty"`
	ElementId     string                 `protobuf:"bytes,6,opt,name=element_id,json=elementId,proto3" json:"element_id,omitempty"`
	CreatedAt     int64                  `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InternalJob) Reset() {
	*x = InternalJob{}
	mi := &file_zen_cluster_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InternalJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalJob) ProtoMessage() {}

func (x *InternalJob) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalJob.ProtoReflect.Descriptor instead.
func (*InternalJob) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{36}
}

func (x *InternalJob) GetKey() int64 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *InternalJob) GetInstanceKey() int64 {
	if x != nil {
		return x.InstanceKey
	}
	return 0
}

func (x *InternalJob) GetVariables() []byte {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *InternalJob) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *InternalJob) GetState() int64 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *InternalJob) GetElementId() string {
	if x != nil {
		return x.ElementId
	}
	return ""
}

func (x *InternalJob) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type PublishMessageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	InstanceKey   int64                  `protobuf:"varint,2,opt,name=instance_key,json=instanceKey,proto3" json:"instance_key,omitempty"`
	Variables     []byte                 `protobuf:"bytes,3,opt,name=variables,proto3" json:"variables,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishMessageRequest) Reset() {
	*x = PublishMessageRequest{}
	mi := &file_zen_cluster_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishMessageRequest) ProtoMessage() {}

func (x *PublishMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishMessageRequest.ProtoReflect.Descriptor instead.
func (*PublishMessageRequest) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{37}
}

func (x *PublishMessageRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PublishMessageRequest) GetInstanceKey() int64 {
	if x != nil {
		return x.InstanceKey
	}
	return 0
}

func (x *PublishMessageRequest) GetVariables() []byte {
	if x != nil {
		return x.Variables
	}
	return nil
}

type PublishMessageResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *ErrorResult           `protobuf:"bytes,1,opt,name=error,proto3,oneof" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishMessageResponse) Reset() {
	*x = PublishMessageResponse{}
	mi := &file_zen_cluster_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishMessageResponse) ProtoMessage() {}

func (x *PublishMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishMessageResponse.ProtoReflect.Descriptor instead.
func (*PublishMessageResponse) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{38}
}

func (x *PublishMessageResponse) GetError() *ErrorResult {
	if x != nil {
		return x.Error
	}
	return nil
}

type CreateInstanceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to StartBy:
	//
	//	*CreateInstanceRequest_DefinitionKey
	//	*CreateInstanceRequest_LatestProcessId
	StartBy       isCreateInstanceRequest_StartBy `protobuf_oneof:"start_by"`
	Variables     []byte                          `protobuf:"bytes,3,opt,name=variables,proto3" json:"variables,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateInstanceRequest) Reset() {
	*x = CreateInstanceRequest{}
	mi := &file_zen_cluster_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInstanceRequest) ProtoMessage() {}

func (x *CreateInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInstanceRequest.ProtoReflect.Descriptor instead.
func (*CreateInstanceRequest) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{39}
}

func (x *CreateInstanceRequest) GetStartBy() isCreateInstanceRequest_StartBy {
	if x != nil {
		return x.StartBy
	}
	return nil
}

func (x *CreateInstanceRequest) GetDefinitionKey() int64 {
	if x != nil {
		if x, ok := x.StartBy.(*CreateInstanceRequest_DefinitionKey); ok {
			return x.DefinitionKey
		}
	}
	return 0
}

func (x *CreateInstanceRequest) GetLatestProcessId() string {
	if x != nil {
		if x, ok := x.StartBy.(*CreateInstanceRequest_LatestProcessId); ok {
			return x.LatestProcessId
		}
	}
	return ""
}

func (x *CreateInstanceRequest) GetVariables() []byte {
	if x != nil {
		return x.Variables
	}
	return nil
}

type isCreateInstanceRequest_StartBy interface {
	isCreateInstanceRequest_StartBy()
}

type CreateInstanceRequest_DefinitionKey struct {
	DefinitionKey int64 `protobuf:"varint,1,opt,name=definition_key,json=definitionKey,proto3,oneof"`
}

type CreateInstanceRequest_LatestProcessId struct {
	LatestProcessId string `protobuf:"bytes,2,opt,name=latest_process_id,json=latestProcessId,proto3,oneof"`
}

func (*CreateInstanceRequest_DefinitionKey) isCreateInstanceRequest_StartBy() {}

func (*CreateInstanceRequest_LatestProcessId) isCreateInstanceRequest_StartBy() {}

type CreateInstanceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *ErrorResult           `protobuf:"bytes,1,opt,name=error,proto3,oneof" json:"error,omitempty"`
	Process       *ProcessInstance       `protobuf:"bytes,2,opt,name=process,proto3" json:"process,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateInstanceResponse) Reset() {
	*x = CreateInstanceResponse{}
	mi := &file_zen_cluster_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInstanceResponse) ProtoMessage() {}

func (x *CreateInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInstanceResponse.ProtoReflect.Descriptor instead.
func (*CreateInstanceResponse) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{40}
}

func (x *CreateInstanceResponse) GetError() *ErrorResult {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *CreateInstanceResponse) GetProcess() *ProcessInstance {
	if x != nil {
		return x.Process
	}
	return nil
}

type GetProcessInstancesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int32                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size          int32                  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Partitions    []uint32               `protobuf:"varint,3,rep,packed,name=partitions,proto3" json:"partitions,omitempty"`
	DefinitionKey int64                  `protobuf:"varint,4,opt,name=definition_key,json=definitionKey,proto3" json:"definition_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProcessInstancesRequest) Reset() {
	*x = GetProcessInstancesRequest{}
	mi := &file_zen_cluster_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProcessInstancesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProcessInstancesRequest) ProtoMessage() {}

func (x *GetProcessInstancesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProcessInstancesRequest.ProtoReflect.Descriptor instead.
func (*GetProcessInstancesRequest) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{41}
}

func (x *GetProcessInstancesRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetProcessInstancesRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GetProcessInstancesRequest) GetPartitions() []uint32 {
	if x != nil {
		return x.Partitions
	}
	return nil
}

func (x *GetProcessInstancesRequest) GetDefinitionKey() int64 {
	if x != nil {
		return x.DefinitionKey
	}
	return 0
}

type PartitionedProcessInstances struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PartitionId   uint32                 `protobuf:"varint,1,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	Instances     []*ProcessInstance     `protobuf:"bytes,2,rep,name=instances,proto3" json:"instances,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PartitionedProcessInstances) Reset() {
	*x = PartitionedProcessInstances{}
	mi := &file_zen_cluster_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartitionedProcessInstances) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionedProcessInstances) ProtoMessage() {}

func (x *PartitionedProcessInstances) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionedProcessInstances.ProtoReflect.Descriptor instead.
func (*PartitionedProcessInstances) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{42}
}

func (x *PartitionedProcessInstances) GetPartitionId() uint32 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

func (x *PartitionedProcessInstances) GetInstances() []*ProcessInstance {
	if x != nil {
		return x.Instances
	}
	return nil
}

type GetProcessInstancesResponse struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Error         *ErrorResult                   `protobuf:"bytes,1,opt,name=error,proto3,oneof" json:"error,omitempty"`
	Partitions    []*PartitionedProcessInstances `protobuf:"bytes,2,rep,name=partitions,proto3" json:"partitions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProcessInstancesResponse) Reset() {
	*x = GetProcessInstancesResponse{}
	mi := &file_zen_cluster_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProcessInstancesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProcessInstancesResponse) ProtoMessage() {}

func (x *GetProcessInstancesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProcessInstancesResponse.ProtoReflect.Descriptor instead.
func (*GetProcessInstancesResponse) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{43}
}

func (x *GetProcessInstancesResponse) GetError() *ErrorResult {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetProcessInstancesResponse) GetPartitions() []*PartitionedProcessInstances {
	if x != nil {
		return x.Partitions
	}
	return nil
}

type GetProcessInstanceRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ProcessInstanceKey int64                  `protobuf:"varint,1,opt,name=process_instance_key,json=processInstanceKey,proto3" json:"process_instance_key,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetProcessInstanceRequest) Reset() {
	*x = GetProcessInstanceRequest{}
	mi := &file_zen_cluster_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProcessInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProcessInstanceRequest) ProtoMessage() {}

func (x *GetProcessInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProcessInstanceRequest.ProtoReflect.Descriptor instead.
func (*GetProcessInstanceRequest) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{44}
}

func (x *GetProcessInstanceRequest) GetProcessInstanceKey() int64 {
	if x != nil {
		return x.ProcessInstanceKey
	}
	return 0
}

type GetProcessInstanceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *ErrorResult           `protobuf:"bytes,1,opt,name=error,proto3,oneof" json:"error,omitempty"`
	Processes     *ProcessInstance       `protobuf:"bytes,2,opt,name=processes,proto3" json:"processes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProcessInstanceResponse) Reset() {
	*x = GetProcessInstanceResponse{}
	mi := &file_zen_cluster_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProcessInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProcessInstanceResponse) ProtoMessage() {}

func (x *GetProcessInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProcessInstanceResponse.ProtoReflect.Descriptor instead.
func (*GetProcessInstanceResponse) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{45}
}

func (x *GetProcessInstanceResponse) GetError() *ErrorResult {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetProcessInstanceResponse) GetProcesses() *ProcessInstance {
	if x != nil {
		return x.Processes
	}
	return nil
}

type GetProcessInstanceJobsRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ProcessInstanceKey int64                  `protobuf:"varint,1,opt,name=process_instance_key,json=processInstanceKey,proto3" json:"process_instance_key,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetProcessInstanceJobsRequest) Reset() {
	*x = GetProcessInstanceJobsRequest{}
	mi := &file_zen_cluster_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProcessInstanceJobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProcessInstanceJobsRequest) ProtoMessage() {}

func (x *GetProcessInstanceJobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProcessInstanceJobsRequest.ProtoReflect.Descriptor instead.
func (*GetProcessInstanceJobsRequest) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{46}
}

func (x *GetProcessInstanceJobsRequest) GetProcessInstanceKey() int64 {
	if x != nil {
		return x.ProcessInstanceKey
	}
	return 0
}

type GetProcessInstanceJobsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *ErrorResult           `protobuf:"bytes,1,opt,name=error,proto3,oneof" json:"error,omitempty"`
	Jobs          []*Job                 `protobuf:"bytes,2,rep,name=jobs,proto3" json:"jobs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProcessInstanceJobsResponse) Reset() {
	*x = GetProcessInstanceJobsResponse{}
	mi := &file_zen_cluster_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProcessInstanceJobsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProcessInstanceJobsResponse) ProtoMessage() {}

func (x *GetProcessInstanceJobsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProcessInstanceJobsResponse.ProtoReflect.Descriptor instead.
func (*GetProcessInstanceJobsResponse) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{47}
}

func (x *GetProcessInstanceJobsResponse) GetError() *ErrorResult {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetProcessInstanceJobsResponse) GetJobs() []*Job {
	if x != nil {
		return x.Jobs
	}
	return nil
}

type GetFlowElementHistoryRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ProcessInstanceKey int64                  `protobuf:"varint,1,opt,name=process_instance_key,json=processInstanceKey,proto3" json:"process_instance_key,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetFlowElementHistoryRequest) Reset() {
	*x = GetFlowElementHistoryRequest{}
	mi := &file_zen_cluster_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFlowElementHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlowElementHistoryRequest) ProtoMessage() {}

func (x *GetFlowElementHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlowElementHistoryRequest.ProtoReflect.Descriptor instead.
func (*GetFlowElementHistoryRequest) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{48}
}

func (x *GetFlowElementHistoryRequest) GetProcessInstanceKey() int64 {
	if x != nil {
		return x.ProcessInstanceKey
	}
	return 0
}

type GetFlowElementHistoryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *ErrorResult           `protobuf:"bytes,1,opt,name=error,proto3,oneof" json:"error,omitempty"`
	Flow          []*FlowElement         `protobuf:"bytes,2,rep,name=flow,proto3" json:"flow,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFlowElementHistoryResponse) Reset() {
	*x = GetFlowElementHistoryResponse{}
	mi := &file_zen_cluster_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFlowElementHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlowElementHistoryResponse) ProtoMessage() {}

func (x *GetFlowElementHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlowElementHistoryResponse.ProtoReflect.Descriptor instead.
func (*GetFlowElementHistoryResponse) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{49}
}

func (x *GetFlowElementHistoryResponse) GetError() *ErrorResult {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetFlowElementHistoryResponse) GetFlow() []*FlowElement {
	if x != nil {
		return x.Flow
	}
	return nil
}

type GetIncidentsRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ProcessInstanceKey int64                  `protobuf:"varint,1,opt,name=process_instance_key,json=processInstanceKey,proto3" json:"process_instance_key,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetIncidentsRequest) Reset() {
	*x = GetIncidentsRequest{}
	mi := &file_zen_cluster_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetIncidentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIncidentsRequest) ProtoMessage() {}

func (x *GetIncidentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIncidentsRequest.ProtoReflect.Descriptor instead.
func (*GetIncidentsRequest) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{50}
}

func (x *GetIncidentsRequest) GetProcessInstanceKey() int64 {
	if x != nil {
		return x.ProcessInstanceKey
	}
	return 0
}

type GetIncidentsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *ErrorResult           `protobuf:"bytes,1,opt,name=error,proto3,oneof" json:"error,omitempty"`
	Incidents     []*Incident            `protobuf:"bytes,2,rep,name=incidents,proto3" json:"incidents,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetIncidentsResponse) Reset() {
	*x = GetIncidentsResponse{}
	mi := &file_zen_cluster_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetIncidentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIncidentsResponse) ProtoMessage() {}

func (x *GetIncidentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIncidentsResponse.ProtoReflect.Descriptor instead.
func (*GetIncidentsResponse) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{51}
}

func (x *GetIncidentsResponse) GetError() *ErrorResult {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetIncidentsResponse) GetIncidents() []*Incident {
	if x != nil {
		return x.Incidents
	}
	return nil
}

type GetJobsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int32                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size          int32                  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Partitions    []uint32               `protobuf:"varint,3,rep,packed,name=partitions,proto3" json:"partitions,omitempty"`
	JobType       *string                `protobuf:"bytes,4,opt,name=jobType,proto3,oneof" json:"jobType,omitempty"`
	State         *int64                 `protobuf:"varint,5,opt,name=state,proto3,oneof" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetJobsRequest) Reset() {
	*x = GetJobsRequest{}
	mi := &file_zen_cluster_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetJobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobsRequest) ProtoMessage() {}

func (x *GetJobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobsRequest.ProtoReflect.Descriptor instead.
func (*GetJobsRequest) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{52}
}

func (x *GetJobsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetJobsRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GetJobsRequest) GetPartitions() []uint32 {
	if x != nil {
		return x.Partitions
	}
	return nil
}

func (x *GetJobsRequest) GetJobType() string {
	if x != nil && x.JobType != nil {
		return *x.JobType
	}
	return ""
}

func (x *GetJobsRequest) GetState() int64 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

type PartitionedJobs struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PartitionId   uint32                 `protobuf:"varint,1,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	Jobs          []*Job                 `protobuf:"bytes,2,rep,name=jobs,proto3" json:"jobs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PartitionedJobs) Reset() {
	*x = PartitionedJobs{}
	mi := &file_zen_cluster_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartitionedJobs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionedJobs) ProtoMessage() {}

func (x *PartitionedJobs) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionedJobs.ProtoReflect.Descriptor instead.
func (*PartitionedJobs) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{53}
}

func (x *PartitionedJobs) GetPartitionId() uint32 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

func (x *PartitionedJobs) GetJobs() []*Job {
	if x != nil {
		return x.Jobs
	}
	return nil
}

type GetJobsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *ErrorResult           `protobuf:"bytes,1,opt,name=error,proto3,oneof" json:"error,omitempty"`
	Partitions    []*PartitionedJobs     `protobuf:"bytes,2,rep,name=partitions,proto3" json:"partitions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetJobsResponse) Reset() {
	*x = GetJobsResponse{}
	mi := &file_zen_cluster_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetJobsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobsResponse) ProtoMessage() {}

func (x *GetJobsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobsResponse.ProtoReflect.Descriptor instead.
func (*GetJobsResponse) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{54}
}

func (x *GetJobsResponse) GetError() *ErrorResult {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetJobsResponse) GetPartitions() []*PartitionedJobs {
	if x != nil {
		return x.Partitions
	}
	return nil
}

type ResolveIncidentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IncidentKey   int64                  `protobuf:"varint,1,opt,name=incident_key,json=incidentKey,proto3" json:"incident_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResolveIncidentRequest) Reset() {
	*x = ResolveIncidentRequest{}
	mi := &file_zen_cluster_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolveIncidentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveIncidentRequest) ProtoMessage() {}

func (x *ResolveIncidentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveIncidentRequest.ProtoReflect.Descriptor instead.
func (*ResolveIncidentRequest) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{55}
}

func (x *ResolveIncidentRequest) GetIncidentKey() int64 {
	if x != nil {
		return x.IncidentKey
	}
	return 0
}

type ResolveIncidentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *ErrorResult           `protobuf:"bytes,1,opt,name=error,proto3,oneof" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResolveIncidentResponse) Reset() {
	*x = ResolveIncidentResponse{}
	mi := &file_zen_cluster_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolveIncidentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveIncidentResponse) ProtoMessage() {}

func (x *ResolveIncidentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveIncidentResponse.ProtoReflect.Descriptor instead.
func (*ResolveIncidentResponse) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{56}
}

func (x *ResolveIncidentResponse) GetError() *ErrorResult {
	if x != nil {
		return x.Error
	}
	return nil
}

type SubscribeJobRequest struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	JobType       string                   `protobuf:"bytes,1,opt,name=job_type,json=jobType,proto3" json:"job_type,omitempty"`
	Type          SubscribeJobRequest_Type `protobuf:"varint,2,opt,name=type,proto3,enum=cluster.SubscribeJobRequest_Type" json:"type,omitempty"`
	ClientId      string                   `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeJobRequest) Reset() {
	*x = SubscribeJobRequest{}
	mi := &file_zen_cluster_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeJobRequest) ProtoMessage() {}

func (x *SubscribeJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeJobRequest.ProtoReflect.Descriptor instead.
func (*SubscribeJobRequest) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{57}
}

func (x *SubscribeJobRequest) GetJobType() string {
	if x != nil {
		return x.JobType
	}
	return ""
}

func (x *SubscribeJobRequest) GetType() SubscribeJobRequest_Type {
	if x != nil {
		return x.Type
	}
	return SubscribeJobRequest_TYPE_UNKNOWN
}

func (x *SubscribeJobRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

type SubscribeJobResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobType       string                 `protobuf:"bytes,1,opt,name=job_type,json=jobType,proto3" json:"job_type,omitempty"`
	ClientId      string                 `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Job           *InternalJob           `protobuf:"bytes,3,opt,name=job,proto3" json:"job,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeJobResponse) Reset() {
	*x = SubscribeJobResponse{}
	mi := &file_zen_cluster_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeJobResponse) ProtoMessage() {}

func (x *SubscribeJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeJobResponse.ProtoReflect.Descriptor instead.
func (*SubscribeJobResponse) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{58}
}

func (x *SubscribeJobResponse) GetJobType() string {
	if x != nil {
		return x.JobType
	}
	return ""
}

func (x *SubscribeJobResponse) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *SubscribeJobResponse) GetJob() *InternalJob {
	if x != nil {
		return x.Job
	}
	return nil
}

type ReassignJobRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           int64                  `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReassignJobRequest) Reset() {
	*x = ReassignJobRequest{}
	mi := &file_zen_cluster_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReassignJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReassignJobRequest) ProtoMessage() {}

func (x *ReassignJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReassignJobRequest.ProtoReflect.Descriptor instead.
func (*ReassignJobRequest) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{59}
}

func (x *ReassignJobRequest) GetKey() int64 {
	if x != nil {
		return x.Key
	}
	return 0
}

type ReassignJobResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *ErrorResult           `protobuf:"bytes,1,opt,name=error,proto3,oneof" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReassignJobResponse) Reset() {
	*x = ReassignJobResponse{}
	mi := &file_zen_cluster_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReassignJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReassignJobResponse) ProtoMessage() {}

func (x *ReassignJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReassignJobResponse.ProtoReflect.Descriptor instead.
func (*ReassignJobResponse) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{60}
}

func (x *ReassignJobResponse) GetError() *ErrorResult {
	if x != nil {
		return x.Error
	}
	return nil
}

// TODO: implement missing messages when needed by cluster communication
type PartitionRestoreRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PartitionRestoreRequest) Reset() {
	*x = PartitionRestoreRequest{}
	mi := &file_zen_cluster_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartitionRestoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionRestoreRequest) ProtoMessage() {}

func (x *PartitionRestoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionRestoreRequest.ProtoReflect.Descriptor instead.
func (*PartitionRestoreRequest) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{61}
}

type PartitionRestoreResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PartitionRestoreResponse) Reset() {
	*x = PartitionRestoreResponse{}
	mi := &file_zen_cluster_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartitionRestoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionRestoreResponse) ProtoMessage() {}

func (x *PartitionRestoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionRestoreResponse.ProtoReflect.Descriptor instead.
func (*PartitionRestoreResponse) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{62}
}

type PartitionBackupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PartitionBackupRequest) Reset() {
	*x = PartitionBackupRequest{}
	mi := &file_zen_cluster_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartitionBackupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionBackupRequest) ProtoMessage() {}

func (x *PartitionBackupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionBackupRequest.ProtoReflect.Descriptor instead.
func (*PartitionBackupRequest) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{63}
}

type PartitionBackupResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PartitionBackupResponse) Reset() {
	*x = PartitionBackupResponse{}
	mi := &file_zen_cluster_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartitionBackupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionBackupResponse) ProtoMessage() {}

func (x *PartitionBackupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionBackupResponse.ProtoReflect.Descriptor instead.
func (*PartitionBackupResponse) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{64}
}

type UnassignPartitionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnassignPartitionRequest) Reset() {
	*x = UnassignPartitionRequest{}
	mi := &file_zen_cluster_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnassignPartitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnassignPartitionRequest) ProtoMessage() {}

func (x *UnassignPartitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnassignPartitionRequest.ProtoReflect.Descriptor instead.
func (*UnassignPartitionRequest) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{65}
}

type UnassignPartitionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnassignPartitionResponse) Reset() {
	*x = UnassignPartitionResponse{}
	mi := &file_zen_cluster_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnassignPartitionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnassignPartitionResponse) ProtoMessage() {}

func (x *UnassignPartitionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnassignPartitionResponse.ProtoReflect.Descriptor instead.
func (*UnassignPartitionResponse) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{66}
}

type AssignPartitionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssignPartitionRequest) Reset() {
	*x = AssignPartitionRequest{}
	mi := &file_zen_cluster_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignPartitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignPartitionRequest) ProtoMessage() {}

func (x *AssignPartitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignPartitionRequest.ProtoReflect.Descriptor instead.
func (*AssignPartitionRequest) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{67}
}

type AssignPartitionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssignPartitionResponse) Reset() {
	*x = AssignPartitionResponse{}
	mi := &file_zen_cluster_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignPartitionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignPartitionResponse) ProtoMessage() {}

func (x *AssignPartitionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignPartitionResponse.ProtoReflect.Descriptor instead.
func (*AssignPartitionResponse) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{68}
}

type ConfigurationUpdateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigurationUpdateRequest) Reset() {
	*x = ConfigurationUpdateRequest{}
	mi := &file_zen_cluster_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigurationUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationUpdateRequest) ProtoMessage() {}

func (x *ConfigurationUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationUpdateRequest.ProtoReflect.Descriptor instead.
func (*ConfigurationUpdateRequest) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{69}
}

type ConfigurationUpdateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigurationUpdateResponse) Reset() {
	*x = ConfigurationUpdateResponse{}
	mi := &file_zen_cluster_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigurationUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationUpdateResponse) ProtoMessage() {}

func (x *ConfigurationUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationUpdateResponse.ProtoReflect.Descriptor instead.
func (*ConfigurationUpdateResponse) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{70}
}

type ClusterRestoreRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterRestoreRequest) Reset() {
	*x = ClusterRestoreRequest{}
	mi := &file_zen_cluster_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterRestoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterRestoreRequest) ProtoMessage() {}

func (x *ClusterRestoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterRestoreRequest.ProtoReflect.Descriptor instead.
func (*ClusterRestoreRequest) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{71}
}

type ClusterRestoreResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterRestoreResponse) Reset() {
	*x = ClusterRestoreResponse{}
	mi := &file_zen_cluster_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterRestoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterRestoreResponse) ProtoMessage() {}

func (x *ClusterRestoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterRestoreResponse.ProtoReflect.Descriptor instead.
func (*ClusterRestoreResponse) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{72}
}

type ClusterBackupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterBackupRequest) Reset() {
	*x = ClusterBackupRequest{}
	mi := &file_zen_cluster_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterBackupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterBackupRequest) ProtoMessage() {}

func (x *ClusterBackupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterBackupRequest.ProtoReflect.Descriptor instead.
func (*ClusterBackupRequest) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{73}
}

type ClusterBackupResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterBackupResponse) Reset() {
	*x = ClusterBackupResponse{}
	mi := &file_zen_cluster_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterBackupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterBackupResponse) ProtoMessage() {}

func (x *ClusterBackupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterBackupResponse.ProtoReflect.Descriptor instead.
func (*ClusterBackupResponse) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{74}
}

type NodeCommandResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Error *ErrorResult           `protobuf:"bytes,1,opt,name=error,proto3,oneof" json:"error,omitempty"`
	Type  proto.Command_Type     `protobuf:"varint,2,opt,name=type,proto3,enum=zencommand.Command_Type" json:"type,omitempty"`
	// Types that are valid to be assigned to Response:
	//
	//	*NodeCommandResponse_NodeChange
	//	*NodeCommandResponse_NodePartitionChange
	Response      isNodeCommandResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeCommandResponse) Reset() {
	*x = NodeCommandResponse{}
	mi := &file_zen_cluster_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeCommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeCommandResponse) ProtoMessage() {}

func (x *NodeCommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeCommandResponse.ProtoReflect.Descriptor instead.
func (*NodeCommandResponse) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{75}
}

func (x *NodeCommandResponse) GetError() *ErrorResult {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *NodeCommandResponse) GetType() proto.Command_Type {
	if x != nil {
		return x.Type
	}
	return proto.Command_Type(0)
}

func (x *NodeCommandResponse) GetResponse() isNodeCommandResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *NodeCommandResponse) GetNodeChange() *ClusterNodeChangeResponse {
	if x != nil {
		if x, ok := x.Response.(*NodeCommandResponse_NodeChange); ok {
			return x.NodeChange
		}
	}
	return nil
}

func (x *NodeCommandResponse) GetNodePartitionChange() *ClusterNodePartitionChangeResponse {
	if x != nil {
		if x, ok := x.Response.(*NodeCommandResponse_NodePartitionChange); ok {
			return x.NodePartitionChange
		}
	}
	return nil
}

type isNodeCommandResponse_Response interface {
	isNodeCommandResponse_Response()
}

type NodeCommandResponse_NodeChange struct {
	NodeChange *ClusterNodeChangeResponse `protobuf:"bytes,3,opt,name=node_change,json=nodeChange,proto3,oneof"`
}

type NodeCommandResponse_NodePartitionChange struct {
	NodePartitionChange *ClusterNodePartitionChangeResponse `protobuf:"bytes,4,opt,name=node_partition_change,json=nodePartitionChange,proto3,oneof"`
}

func (*NodeCommandResponse_NodeChange) isNodeCommandResponse_Response() {}

func (*NodeCommandResponse_NodePartitionChange) isNodeCommandResponse_Response() {}

type ClusterNodeChangeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterNodeChangeResponse) Reset() {
	*x = ClusterNodeChangeResponse{}
	mi := &file_zen_cluster_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterNodeChangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterNodeChangeResponse) ProtoMessage() {}

func (x *ClusterNodeChangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterNodeChangeResponse.ProtoReflect.Descriptor instead.
func (*ClusterNodeChangeResponse) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{76}
}

type ClusterNodePartitionChangeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterNodePartitionChangeResponse) Reset() {
	*x = ClusterNodePartitionChangeResponse{}
	mi := &file_zen_cluster_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterNodePartitionChangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterNodePartitionChangeResponse) ProtoMessage() {}

func (x *ClusterNodePartitionChangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zen_cluster_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterNodePartitionChangeResponse.ProtoReflect.Descriptor instead.
func (*ClusterNodePartitionChangeResponse) Descriptor() ([]byte, []int) {
	return file_zen_cluster_proto_rawDescGZIP(), []int{77}
}

var File_zen_cluster_proto protoreflect.FileDescriptor

var file_zen_cluster_proto_rawDesc = string([]byte{
	0x0a, 0x11, 0x7a, 0x65, 0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x1a, 0x10, 0x7a, 0x65,
	0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3b,
	0x0a, 0x0b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x39, 0x0a, 0x0d, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x4b, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x4d, 0x0a, 0x0b, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x6f, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x6f, 0x74,
	0x65, 0x72, 0x22, 0x61, 0x0a, 0x0c, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x77, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x6f,
	0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x55,
	0x0a, 0x18, 0x41, 0x64, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48,
	0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x4c, 0x0a, 0x1c, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77,
	0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x5a, 0x0a, 0x1d, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x50, 0x0a, 0x20, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65,
	0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x5e, 0x0a, 0x21, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f,
	0x64, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x4a, 0x0a, 0x1a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x58, 0x0a,
	0x1b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x4a, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x75, 0x6d,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x58, 0x0a, 0x1b, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x99, 0x01,
	0x0a, 0x17, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0xc9, 0x01, 0x0a, 0x12, 0x45, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x64, 0x44, 0x52, 0x44, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x2f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x50, 0x0a, 0x12, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65,
	0x64, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x12, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x44, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xd0, 0x03, 0x0a, 0x17, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x65, 0x64, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x64, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x64, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x15, 0x64, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x32, 0x0a,
	0x14, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x3a, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x41, 0x0a, 0x0f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x65, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x65, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x0f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x65, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x0d, 0x45, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x65, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x75,
	0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x44, 0x0a, 0x10, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x52, 0x10, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x64, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x22, 0x6f, 0x0a, 0x0f, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x0e, 0x45, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x96, 0x01, 0x0a,
	0x12, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x34, 0x0a, 0x16, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe6, 0x01, 0x0a, 0x08, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67,
	0x12, 0x34, 0x0a, 0x16, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x22, 0x7e,
	0x0a, 0x11, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbb,
	0x01, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x22, 0x81, 0x02, 0x0a,
	0x03, 0x4a, 0x6f, 0x62, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x22, 0x8f, 0x01, 0x0a, 0x0b, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0xb7, 0x02, 0x0a, 0x08, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x12, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x24, 0x0a,
	0x0b, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x41, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0x47, 0x0a, 0x1f,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5d, 0x0a, 0x20, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x44,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x46, 0x0a, 0x1e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5c, 0x0a, 0x1f,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x61, 0x0a, 0x12, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x50, 0x0a,
	0x13, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x2f, 0x0a, 0x12, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x78, 0x0a, 0x13, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xc8, 0x01, 0x0a, 0x0b, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4a, 0x6f, 0x62, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x6c, 0x0a, 0x15, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x22, 0x53, 0x0a, 0x16, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x98, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x27, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x62, 0x79, 0x22, 0x87, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x32, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x8b, 0x01,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x22, 0x78, 0x0a, 0x1b, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x36, 0x0a,
	0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x9e, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x4d, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x8f, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x51, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4a, 0x6f, 0x62,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x7d, 0x0a, 0x1e, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x04, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x50, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x46, 0x6c, 0x6f, 0x77, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x84, 0x01, 0x0a, 0x1d,
	0x47, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x47, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x82, 0x01, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x69, 0x6e, 0x63,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0xa8, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6a,
	0x6f, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07,
	0x6a, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6a, 0x6f, 0x62, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x56, 0x0a, 0x0f, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x04, 0x6a,
	0x6f, 0x62, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x64, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x3b, 0x0a, 0x16,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x6e,
	0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x22, 0x54, 0x0a, 0x17, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0xe2, 0x01, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x5c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10,
	0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49,
	0x42, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x5f, 0x41,
	0x4c, 0x4c, 0x10, 0x03, 0x22, 0x76, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6a, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x22, 0x26, 0x0a, 0x12,
	0x52, 0x65, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x22, 0x50, 0x0a, 0x13, 0x52, 0x65, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x19, 0x0a, 0x17, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x1a, 0x0a, 0x18, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x0a,
	0x16, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x19, 0x0a, 0x17, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1b,
	0x0a, 0x19, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x19, 0x0a, 0x17, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1c, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1d,
	0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x0a,
	0x15, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x18, 0x0a, 0x16, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x16, 0x0a, 0x14, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x17, 0x0a, 0x15, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xb4, 0x02, 0x0a, 0x13, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x01,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x7a, 0x65, 0x6e, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x61, 0x0a, 0x15, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x13, 0x6e,
	0x6f, 0x64, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x1b, 0x0a, 0x19, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x0a, 0x22, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x9b, 0x15, 0x0a, 0x0a,
	0x5a, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x16, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x14, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4a, 0x6f,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x10, 0x41, 0x64,
	0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x20,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x15, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x68,
	0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72, 0x0a, 0x19, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x29, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65,
	0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x60, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x60, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x12, 0x1d, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x23, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x0f, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a,
	0x0a, 0x11, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x55, 0x6e,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x0f, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x1f, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x57, 0x0a, 0x10, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x12, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x4e, 0x6f, 0x64,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x13, 0x2e, 0x7a, 0x65, 0x6e, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x1a, 0x1c, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x10, 0x45,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x65, 0x64, 0x44, 0x52, 0x44, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x6f,
	0x0a, 0x18, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x44, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x6c, 0x0a, 0x17, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a,
	0x0b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x12, 0x1b, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x48, 0x0a, 0x0b, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x12, 0x1b, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x23, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x47,
	0x65, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x17, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x22, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4a, 0x6f,
	0x62, 0x73, 0x12, 0x26, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4a,
	0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x25, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x49, 0x6e, 0x63,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x49, 0x6e,
	0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f,
	0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4a, 0x6f, 0x62, 0x12, 0x1c,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12,
	0x48, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x4a, 0x6f, 0x62, 0x12, 0x1b,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x62, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x2f, 0x7a, 0x65, 0x6e, 0x62, 0x70, 0x6d, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_zen_cluster_proto_rawDescOnce sync.Once
	file_zen_cluster_proto_rawDescData []byte
)

func file_zen_cluster_proto_rawDescGZIP() []byte {
	file_zen_cluster_proto_rawDescOnce.Do(func() {
		file_zen_cluster_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_zen_cluster_proto_rawDesc), len(file_zen_cluster_proto_rawDesc)))
	})
	return file_zen_cluster_proto_rawDescData
}

var file_zen_cluster_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_zen_cluster_proto_msgTypes = make([]protoimpl.MessageInfo, 78)
var file_zen_cluster_proto_goTypes = []any{
	(SubscribeJobRequest_Type)(0),              // 0: cluster.SubscribeJobRequest.Type
	(*ErrorResult)(nil),                        // 1: cluster.ErrorResult
	(*NotifyRequest)(nil),                      // 2: cluster.NotifyRequest
	(*NotifyResponse)(nil),                     // 3: cluster.NotifyResponse
	(*JoinRequest)(nil),                        // 4: cluster.JoinRequest
	(*JoinResponse)(nil),                       // 5: cluster.JoinResponse
	(*AddPartitionNodeRequest)(nil),            // 6: cluster.AddPartitionNodeRequest
	(*AddPartitionNodeResponse)(nil),           // 7: cluster.AddPartitionNodeResponse
	(*ShutdownPartitionNodeRequest)(nil),       // 8: cluster.ShutdownPartitionNodeRequest
	(*ShutdownPartitionNodeResponse)(nil),      // 9: cluster.ShutdownPartitionNodeResponse
	(*PartitionNodeLeaderChangeRequest)(nil),   // 10: cluster.PartitionNodeLeaderChangeRequest
	(*PartitionNodeLeaderChangeResponse)(nil),  // 11: cluster.PartitionNodeLeaderChangeResponse
	(*RemovePartitionNodeRequest)(nil),         // 12: cluster.RemovePartitionNodeRequest
	(*RemovePartitionNodeResponse)(nil),        // 13: cluster.RemovePartitionNodeResponse
	(*ResumePartitionNodeRequest)(nil),         // 14: cluster.ResumePartitionNodeRequest
	(*ResumePartitionNodeResponse)(nil),        // 15: cluster.ResumePartitionNodeResponse
	(*EvaluateDecisionRequest)(nil),            // 16: cluster.EvaluateDecisionRequest
	(*EvaluatedDRDResult)(nil),                 // 17: cluster.EvaluatedDRDResult
	(*EvaluatedDecisionResult)(nil),            // 18: cluster.EvaluatedDecisionResult
	(*EvaluatedRule)(nil),                      // 19: cluster.EvaluatedRule
	(*EvaluatedOutput)(nil),                    // 20: cluster.EvaluatedOutput
	(*EvaluatedInput)(nil),                     // 21: cluster.EvaluatedInput
	(*DecisionDefinition)(nil),                 // 22: cluster.DecisionDefinition
	(*Decision)(nil),                           // 23: cluster.Decision
	(*ProcessDefinition)(nil),                  // 24: cluster.ProcessDefinition
	(*ProcessInstance)(nil),                    // 25: cluster.ProcessInstance
	(*Job)(nil),                                // 26: cluster.Job
	(*FlowElement)(nil),                        // 27: cluster.FlowElement
	(*Incident)(nil),                           // 28: cluster.Incident
	(*DeployDecisionDefinitionRequest)(nil),    // 29: cluster.DeployDecisionDefinitionRequest
	(*DeployDecisionDefinitionResponse)(nil),   // 30: cluster.DeployDecisionDefinitionResponse
	(*DeployProcessDefinitionRequest)(nil),     // 31: cluster.DeployProcessDefinitionRequest
	(*DeployProcessDefinitionResponse)(nil),    // 32: cluster.DeployProcessDefinitionResponse
	(*CompleteJobRequest)(nil),                 // 33: cluster.CompleteJobRequest
	(*CompleteJobResponse)(nil),                // 34: cluster.CompleteJobResponse
	(*ActivateJobRequest)(nil),                 // 35: cluster.ActivateJobRequest
	(*ActivateJobResponse)(nil),                // 36: cluster.ActivateJobResponse
	(*InternalJob)(nil),                        // 37: cluster.InternalJob
	(*PublishMessageRequest)(nil),              // 38: cluster.PublishMessageRequest
	(*PublishMessageResponse)(nil),             // 39: cluster.PublishMessageResponse
	(*CreateInstanceRequest)(nil),              // 40: cluster.CreateInstanceRequest
	(*CreateInstanceResponse)(nil),             // 41: cluster.CreateInstanceResponse
	(*GetProcessInstancesRequest)(nil),         // 42: cluster.GetProcessInstancesRequest
	(*PartitionedProcessInstances)(nil),        // 43: cluster.PartitionedProcessInstances
	(*GetProcessInstancesResponse)(nil),        // 44: cluster.GetProcessInstancesResponse
	(*GetProcessInstanceRequest)(nil),          // 45: cluster.GetProcessInstanceRequest
	(*GetProcessInstanceResponse)(nil),         // 46: cluster.GetProcessInstanceResponse
	(*GetProcessInstanceJobsRequest)(nil),      // 47: cluster.GetProcessInstanceJobsRequest
	(*GetProcessInstanceJobsResponse)(nil),     // 48: cluster.GetProcessInstanceJobsResponse
	(*GetFlowElementHistoryRequest)(nil),       // 49: cluster.GetFlowElementHistoryRequest
	(*GetFlowElementHistoryResponse)(nil),      // 50: cluster.GetFlowElementHistoryResponse
	(*GetIncidentsRequest)(nil),                // 51: cluster.GetIncidentsRequest
	(*GetIncidentsResponse)(nil),               // 52: cluster.GetIncidentsResponse
	(*GetJobsRequest)(nil),                     // 53: cluster.GetJobsRequest
	(*PartitionedJobs)(nil),                    // 54: cluster.PartitionedJobs
	(*GetJobsResponse)(nil),                    // 55: cluster.GetJobsResponse
	(*ResolveIncidentRequest)(nil),             // 56: cluster.ResolveIncidentRequest
	(*ResolveIncidentResponse)(nil),            // 57: cluster.ResolveIncidentResponse
	(*SubscribeJobRequest)(nil),                // 58: cluster.SubscribeJobRequest
	(*SubscribeJobResponse)(nil),               // 59: cluster.SubscribeJobResponse
	(*ReassignJobRequest)(nil),                 // 60: cluster.ReassignJobRequest
	(*ReassignJobResponse)(nil),                // 61: cluster.ReassignJobResponse
	(*PartitionRestoreRequest)(nil),            // 62: cluster.PartitionRestoreRequest
	(*PartitionRestoreResponse)(nil),           // 63: cluster.PartitionRestoreResponse
	(*PartitionBackupRequest)(nil),             // 64: cluster.PartitionBackupRequest
	(*PartitionBackupResponse)(nil),            // 65: cluster.PartitionBackupResponse
	(*UnassignPartitionRequest)(nil),           // 66: cluster.UnassignPartitionRequest
	(*UnassignPartitionResponse)(nil),          // 67: cluster.UnassignPartitionResponse
	(*AssignPartitionRequest)(nil),             // 68: cluster.AssignPartitionRequest
	(*AssignPartitionResponse)(nil),            // 69: cluster.AssignPartitionResponse
	(*ConfigurationUpdateRequest)(nil),         // 70: cluster.ConfigurationUpdateRequest
	(*ConfigurationUpdateResponse)(nil),        // 71: cluster.ConfigurationUpdateResponse
	(*ClusterRestoreRequest)(nil),              // 72: cluster.ClusterRestoreRequest
	(*ClusterRestoreResponse)(nil),             // 73: cluster.ClusterRestoreResponse
	(*ClusterBackupRequest)(nil),               // 74: cluster.ClusterBackupRequest
	(*ClusterBackupResponse)(nil),              // 75: cluster.ClusterBackupResponse
	(*NodeCommandResponse)(nil),                // 76: cluster.NodeCommandResponse
	(*ClusterNodeChangeResponse)(nil),          // 77: cluster.ClusterNodeChangeResponse
	(*ClusterNodePartitionChangeResponse)(nil), // 78: cluster.ClusterNodePartitionChangeResponse
	(proto.Command_Type)(0),                    // 79: zencommand.Command.Type
	(*proto.Command)(nil),                      // 80: zencommand.Command
}
var file_zen_cluster_proto_depIdxs = []int32{
	1,  // 0: cluster.NotifyResponse.error:type_name -> cluster.ErrorResult
	1,  // 1: cluster.JoinResponse.error:type_name -> cluster.ErrorResult
	1,  // 2: cluster.AddPartitionNodeResponse.error:type_name -> cluster.ErrorResult
	1,  // 3: cluster.ShutdownPartitionNodeResponse.error:type_name -> cluster.ErrorResult
	1,  // 4: cluster.PartitionNodeLeaderChangeResponse.error:type_name -> cluster.ErrorResult
	1,  // 5: cluster.RemovePartitionNodeResponse.error:type_name -> cluster.ErrorResult
	1,  // 6: cluster.ResumePartitionNodeResponse.error:type_name -> cluster.ErrorResult
	1,  // 7: cluster.EvaluatedDRDResult.error:type_name -> cluster.ErrorResult
	18, // 8: cluster.EvaluatedDRDResult.evaluatedDecisions:type_name -> cluster.EvaluatedDecisionResult
	19, // 9: cluster.EvaluatedDecisionResult.matchedRules:type_name -> cluster.EvaluatedRule
	21, // 10: cluster.EvaluatedDecisionResult.evaluatedInputs:type_name -> cluster.EvaluatedInput
	20, // 11: cluster.EvaluatedRule.evaluatedOutputs:type_name -> cluster.EvaluatedOutput
	1,  // 12: cluster.DeployDecisionDefinitionResponse.error:type_name -> cluster.ErrorResult
	1,  // 13: cluster.DeployProcessDefinitionResponse.error:type_name -> cluster.ErrorResult
	1,  // 14: cluster.CompleteJobResponse.error:type_name -> cluster.ErrorResult
	1,  // 15: cluster.ActivateJobResponse.error:type_name -> cluster.ErrorResult
	37, // 16: cluster.ActivateJobResponse.job:type_name -> cluster.InternalJob
	1,  // 17: cluster.PublishMessageResponse.error:type_name -> cluster.ErrorResult
	1,  // 18: cluster.CreateInstanceResponse.error:type_name -> cluster.ErrorResult
	25, // 19: cluster.CreateInstanceResponse.process:type_name -> cluster.ProcessInstance
	25, // 20: cluster.PartitionedProcessInstances.instances:type_name -> cluster.ProcessInstance
	1,  // 21: cluster.GetProcessInstancesResponse.error:type_name -> cluster.ErrorResult
	43, // 22: cluster.GetProcessInstancesResponse.partitions:type_name -> cluster.PartitionedProcessInstances
	1,  // 23: cluster.GetProcessInstanceResponse.error:type_name -> cluster.ErrorResult
	25, // 24: cluster.GetProcessInstanceResponse.processes:type_name -> cluster.ProcessInstance
	1,  // 25: cluster.GetProcessInstanceJobsResponse.error:type_name -> cluster.ErrorResult
	26, // 26: cluster.GetProcessInstanceJobsResponse.jobs:type_name -> cluster.Job
	1,  // 27: cluster.GetFlowElementHistoryResponse.error:type_name -> cluster.ErrorResult
	27, // 28: cluster.GetFlowElementHistoryResponse.flow:type_name -> cluster.FlowElement
	1,  // 29: cluster.GetIncidentsResponse.error:type_name -> cluster.ErrorResult
	28, // 30: cluster.GetIncidentsResponse.incidents:type_name -> cluster.Incident
	26, // 31: cluster.PartitionedJobs.jobs:type_name -> cluster.Job
	1,  // 32: cluster.GetJobsResponse.error:type_name -> cluster.ErrorResult
	54, // 33: cluster.GetJobsResponse.partitions:type_name -> cluster.PartitionedJobs
	1,  // 34: cluster.ResolveIncidentResponse.error:type_name -> cluster.ErrorResult
	0,  // 35: cluster.SubscribeJobRequest.type:type_name -> cluster.SubscribeJobRequest.Type
	37, // 36: cluster.SubscribeJobResponse.job:type_name -> cluster.InternalJob
	1,  // 37: cluster.ReassignJobResponse.error:type_name -> cluster.ErrorResult
	1,  // 38: cluster.NodeCommandResponse.error:type_name -> cluster.ErrorResult
	79, // 39: cluster.NodeCommandResponse.type:type_name -> zencommand.Command.Type
	77, // 40: cluster.NodeCommandResponse.node_change:type_name -> cluster.ClusterNodeChangeResponse
	78, // 41: cluster.NodeCommandResponse.node_partition_change:type_name -> cluster.ClusterNodePartitionChangeResponse
	2,  // 42: cluster.ZenService.Notify:input_type -> cluster.NotifyRequest
	4,  // 43: cluster.ZenService.Join:input_type -> cluster.JoinRequest
	6,  // 44: cluster.ZenService.AddPartitionNode:input_type -> cluster.AddPartitionNodeRequest
	8,  // 45: cluster.ZenService.ShutdownPartitionNode:input_type -> cluster.ShutdownPartitionNodeRequest
	10, // 46: cluster.ZenService.PartitionNodeLeaderChange:input_type -> cluster.PartitionNodeLeaderChangeRequest
	12, // 47: cluster.ZenService.RemovePartitionNode:input_type -> cluster.RemovePartitionNodeRequest
	14, // 48: cluster.ZenService.ResumePartitionNode:input_type -> cluster.ResumePartitionNodeRequest
	74, // 49: cluster.ZenService.ClusterBackup:input_type -> cluster.ClusterBackupRequest
	72, // 50: cluster.ZenService.ClusterRestore:input_type -> cluster.ClusterRestoreRequest
	70, // 51: cluster.ZenService.ConfigurationUpdate:input_type -> cluster.ConfigurationUpdateRequest
	68, // 52: cluster.ZenService.AssignPartition:input_type -> cluster.AssignPartitionRequest
	66, // 53: cluster.ZenService.UnassignPartition:input_type -> cluster.UnassignPartitionRequest
	64, // 54: cluster.ZenService.PartitionBackup:input_type -> cluster.PartitionBackupRequest
	62, // 55: cluster.ZenService.PartitionRestore:input_type -> cluster.PartitionRestoreRequest
	80, // 56: cluster.ZenService.NodeCommand:input_type -> zencommand.Command
	16, // 57: cluster.ZenService.EvaluateDecision:input_type -> cluster.EvaluateDecisionRequest
	29, // 58: cluster.ZenService.DeployDecisionDefinition:input_type -> cluster.DeployDecisionDefinitionRequest
	31, // 59: cluster.ZenService.DeployProcessDefinition:input_type -> cluster.DeployProcessDefinitionRequest
	35, // 60: cluster.ZenService.ActivateJob:input_type -> cluster.ActivateJobRequest
	33, // 61: cluster.ZenService.CompleteJob:input_type -> cluster.CompleteJobRequest
	38, // 62: cluster.ZenService.PublishMessage:input_type -> cluster.PublishMessageRequest
	40, // 63: cluster.ZenService.CreateInstance:input_type -> cluster.CreateInstanceRequest
	42, // 64: cluster.ZenService.GetProcessInstances:input_type -> cluster.GetProcessInstancesRequest
	53, // 65: cluster.ZenService.GetJobs:input_type -> cluster.GetJobsRequest
	45, // 66: cluster.ZenService.GetProcessInstance:input_type -> cluster.GetProcessInstanceRequest
	47, // 67: cluster.ZenService.GetProcessInstanceJobs:input_type -> cluster.GetProcessInstanceJobsRequest
	49, // 68: cluster.ZenService.GetFlowElementHistory:input_type -> cluster.GetFlowElementHistoryRequest
	51, // 69: cluster.ZenService.GetIncidents:input_type -> cluster.GetIncidentsRequest
	56, // 70: cluster.ZenService.ResolveIncident:input_type -> cluster.ResolveIncidentRequest
	58, // 71: cluster.ZenService.SubscribeJob:input_type -> cluster.SubscribeJobRequest
	60, // 72: cluster.ZenService.ReassignJob:input_type -> cluster.ReassignJobRequest
	3,  // 73: cluster.ZenService.Notify:output_type -> cluster.NotifyResponse
	5,  // 74: cluster.ZenService.Join:output_type -> cluster.JoinResponse
	7,  // 75: cluster.ZenService.AddPartitionNode:output_type -> cluster.AddPartitionNodeResponse
	9,  // 76: cluster.ZenService.ShutdownPartitionNode:output_type -> cluster.ShutdownPartitionNodeResponse
	11, // 77: cluster.ZenService.PartitionNodeLeaderChange:output_type -> cluster.PartitionNodeLeaderChangeResponse
	13, // 78: cluster.ZenService.RemovePartitionNode:output_type -> cluster.RemovePartitionNodeResponse
	15, // 79: cluster.ZenService.ResumePartitionNode:output_type -> cluster.ResumePartitionNodeResponse
	75, // 80: cluster.ZenService.ClusterBackup:output_type -> cluster.ClusterBackupResponse
	73, // 81: cluster.ZenService.ClusterRestore:output_type -> cluster.ClusterRestoreResponse
	71, // 82: cluster.ZenService.ConfigurationUpdate:output_type -> cluster.ConfigurationUpdateResponse
	69, // 83: cluster.ZenService.AssignPartition:output_type -> cluster.AssignPartitionResponse
	67, // 84: cluster.ZenService.UnassignPartition:output_type -> cluster.UnassignPartitionResponse
	65, // 85: cluster.ZenService.PartitionBackup:output_type -> cluster.PartitionBackupResponse
	63, // 86: cluster.ZenService.PartitionRestore:output_type -> cluster.PartitionRestoreResponse
	76, // 87: cluster.ZenService.NodeCommand:output_type -> cluster.NodeCommandResponse
	17, // 88: cluster.ZenService.EvaluateDecision:output_type -> cluster.EvaluatedDRDResult
	30, // 89: cluster.ZenService.DeployDecisionDefinition:output_type -> cluster.DeployDecisionDefinitionResponse
	32, // 90: cluster.ZenService.DeployProcessDefinition:output_type -> cluster.DeployProcessDefinitionResponse
	36, // 91: cluster.ZenService.ActivateJob:output_type -> cluster.ActivateJobResponse
	34, // 92: cluster.ZenService.CompleteJob:output_type -> cluster.CompleteJobResponse
	39, // 93: cluster.ZenService.PublishMessage:output_type -> cluster.PublishMessageResponse
	41, // 94: cluster.ZenService.CreateInstance:output_type -> cluster.CreateInstanceResponse
	44, // 95: cluster.ZenService.GetProcessInstances:output_type -> cluster.GetProcessInstancesResponse
	55, // 96: cluster.ZenService.GetJobs:output_type -> cluster.GetJobsResponse
	46, // 97: cluster.ZenService.GetProcessInstance:output_type -> cluster.GetProcessInstanceResponse
	48, // 98: cluster.ZenService.GetProcessInstanceJobs:output_type -> cluster.GetProcessInstanceJobsResponse
	50, // 99: cluster.ZenService.GetFlowElementHistory:output_type -> cluster.GetFlowElementHistoryResponse
	52, // 100: cluster.ZenService.GetIncidents:output_type -> cluster.GetIncidentsResponse
	57, // 101: cluster.ZenService.ResolveIncident:output_type -> cluster.ResolveIncidentResponse
	59, // 102: cluster.ZenService.SubscribeJob:output_type -> cluster.SubscribeJobResponse
	61, // 103: cluster.ZenService.ReassignJob:output_type -> cluster.ReassignJobResponse
	73, // [73:104] is the sub-list for method output_type
	42, // [42:73] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_zen_cluster_proto_init() }
func file_zen_cluster_proto_init() {
	if File_zen_cluster_proto != nil {
		return
	}
	file_zen_cluster_proto_msgTypes[2].OneofWrappers = []any{}
	file_zen_cluster_proto_msgTypes[4].OneofWrappers = []any{}
	file_zen_cluster_proto_msgTypes[6].OneofWrappers = []any{}
	file_zen_cluster_proto_msgTypes[8].OneofWrappers = []any{}
	file_zen_cluster_proto_msgTypes[10].OneofWrappers = []any{}
	file_zen_cluster_proto_msgTypes[12].OneofWrappers = []any{}
	file_zen_cluster_proto_msgTypes[14].OneofWrappers = []any{}
	file_zen_cluster_proto_msgTypes[16].OneofWrappers = []any{}
	file_zen_cluster_proto_msgTypes[27].OneofWrappers = []any{}
	file_zen_cluster_proto_msgTypes[29].OneofWrappers = []any{}
	file_zen_cluster_proto_msgTypes[31].OneofWrappers = []any{}
	file_zen_cluster_proto_msgTypes[33].OneofWrappers = []any{}
	file_zen_cluster_proto_msgTypes[35].OneofWrappers = []any{}
	file_zen_cluster_proto_msgTypes[38].OneofWrappers = []any{}
	file_zen_cluster_proto_msgTypes[39].OneofWrappers = []any{
		(*CreateInstanceRequest_DefinitionKey)(nil),
		(*CreateInstanceRequest_LatestProcessId)(nil),
	}
	file_zen_cluster_proto_msgTypes[40].OneofWrappers = []any{}
	file_zen_cluster_proto_msgTypes[43].OneofWrappers = []any{}
	file_zen_cluster_proto_msgTypes[45].OneofWrappers = []any{}
	file_zen_cluster_proto_msgTypes[47].OneofWrappers = []any{}
	file_zen_cluster_proto_msgTypes[49].OneofWrappers = []any{}
	file_zen_cluster_proto_msgTypes[51].OneofWrappers = []any{}
	file_zen_cluster_proto_msgTypes[52].OneofWrappers = []any{}
	file_zen_cluster_proto_msgTypes[54].OneofWrappers = []any{}
	file_zen_cluster_proto_msgTypes[56].OneofWrappers = []any{}
	file_zen_cluster_proto_msgTypes[60].OneofWrappers = []any{}
	file_zen_cluster_proto_msgTypes[75].OneofWrappers = []any{
		(*NodeCommandResponse_NodeChange)(nil),
		(*NodeCommandResponse_NodePartitionChange)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_zen_cluster_proto_rawDesc), len(file_zen_cluster_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   78,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_zen_cluster_proto_goTypes,
		DependencyIndexes: file_zen_cluster_proto_depIdxs,
		EnumInfos:         file_zen_cluster_proto_enumTypes,
		MessageInfos:      file_zen_cluster_proto_msgTypes,
	}.Build()
	File_zen_cluster_proto = out.File
	file_zen_cluster_proto_goTypes = nil
	file_zen_cluster_proto_depIdxs = nil
}
