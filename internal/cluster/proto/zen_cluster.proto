syntax = "proto3";
package cluster;

import "command.proto";

option go_package = "github.com/pbinitiative/zenbpm/internal/cluster/proto";

// GRPC API exposed through private GRPC endpoint
service ZenService {
	// Notify notifies this node that a remote node is ready
	// for bootstrapping.
	rpc Notify(NotifyRequest) returns (NotifyResponse);
	// Join joins a remote node to the cluster.
	rpc Join(JoinRequest) returns (JoinResponse);

	rpc ClusterBackup(ClusterBackupRequest) returns (ClusterBackupResponse);
	rpc ClusterRestore(ClusterRestoreRequest) returns (ClusterRestoreResponse);
	rpc ConfigurationUpdate(ConfigurationUpdateRequest) returns (ConfigurationUpdateResponse);
	rpc AssignPartition(AssignPartitionRequest) returns (AssignPartitionResponse);
	rpc UnassignPartition(UnassignPartitionRequest) returns (UnassignPartitionResponse);
	rpc PartitionBackup(PartitionBackupRequest) returns (PartitionBackupResponse);
	rpc PartitionRestore(PartitionRestoreRequest) returns (PartitionRestoreResponse);

	rpc NodeCommand(command.Command) returns (NodeCommandResponse);
}

message ErrorResult {
	uint32 code = 1;
	string message = 2;
}

message NotifyRequest {
	string id = 1;
	string address = 2;
}

message NotifyResponse {
	optional ErrorResult error = 1;
}

message JoinRequest {
	string id = 1;
	string address = 2;
	bool voter = 3;
}

message JoinResponse {
	optional ErrorResult error = 1;
	string leader = 2;
}

message PartitionRestoreRequest{}
message PartitionRestoreResponse{}
message PartitionBackupRequest{}
message PartitionBackupResponse{}
message UnassignPartitionRequest{}
message UnassignPartitionResponse{}
message AssignPartitionRequest{}
message AssignPartitionResponse{}
message ConfigurationUpdateRequest{}
message ConfigurationUpdateResponse{}
message ClusterRestoreRequest{}
message ClusterRestoreResponse{}
message ClusterBackupRequest{}
message ClusterBackupResponse{}

message NodeCommandResponse {
	optional ErrorResult error = 1;
	command.Command.Type type = 2;
	oneof response {
		ClusterNodeChangeResponse node_change = 3;
		ClusterNodePartitionChangeResponse node_partition_change = 4;
	}
}

message ClusterNodeChangeResponse {}
message ClusterNodePartitionChangeResponse{}
