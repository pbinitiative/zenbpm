// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.1
// source: zen_cluster.proto

package proto

import (
	context "context"
	proto "github.com/pbinitiative/zenbpm/internal/cluster/command/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ZenService_Notify_FullMethodName                    = "/cluster.ZenService/Notify"
	ZenService_Join_FullMethodName                      = "/cluster.ZenService/Join"
	ZenService_AddPartitionNode_FullMethodName          = "/cluster.ZenService/AddPartitionNode"
	ZenService_ShutdownPartitionNode_FullMethodName     = "/cluster.ZenService/ShutdownPartitionNode"
	ZenService_PartitionNodeLeaderChange_FullMethodName = "/cluster.ZenService/PartitionNodeLeaderChange"
	ZenService_RemovePartitionNode_FullMethodName       = "/cluster.ZenService/RemovePartitionNode"
	ZenService_ResumePartitionNode_FullMethodName       = "/cluster.ZenService/ResumePartitionNode"
	ZenService_ClusterBackup_FullMethodName             = "/cluster.ZenService/ClusterBackup"
	ZenService_ClusterRestore_FullMethodName            = "/cluster.ZenService/ClusterRestore"
	ZenService_ConfigurationUpdate_FullMethodName       = "/cluster.ZenService/ConfigurationUpdate"
	ZenService_AssignPartition_FullMethodName           = "/cluster.ZenService/AssignPartition"
	ZenService_UnassignPartition_FullMethodName         = "/cluster.ZenService/UnassignPartition"
	ZenService_PartitionBackup_FullMethodName           = "/cluster.ZenService/PartitionBackup"
	ZenService_PartitionRestore_FullMethodName          = "/cluster.ZenService/PartitionRestore"
	ZenService_NodeCommand_FullMethodName               = "/cluster.ZenService/NodeCommand"
	ZenService_DeployDefinition_FullMethodName          = "/cluster.ZenService/DeployDefinition"
	ZenService_ActivateJob_FullMethodName               = "/cluster.ZenService/ActivateJob"
	ZenService_CompleteJob_FullMethodName               = "/cluster.ZenService/CompleteJob"
	ZenService_PublishMessage_FullMethodName            = "/cluster.ZenService/PublishMessage"
	ZenService_CreateInstance_FullMethodName            = "/cluster.ZenService/CreateInstance"
	ZenService_GetProcessInstances_FullMethodName       = "/cluster.ZenService/GetProcessInstances"
	ZenService_GetProcessInstance_FullMethodName        = "/cluster.ZenService/GetProcessInstance"
	ZenService_GetProcessInstanceJobs_FullMethodName    = "/cluster.ZenService/GetProcessInstanceJobs"
	ZenService_GetFlowElementHistory_FullMethodName     = "/cluster.ZenService/GetFlowElementHistory"
)

// ZenServiceClient is the client API for ZenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// GRPC API exposed through private GRPC endpoint
type ZenServiceClient interface {
	// Notify notifies this node that a remote node is ready
	// for bootstrapping.
	Notify(ctx context.Context, in *NotifyRequest, opts ...grpc.CallOption) (*NotifyResponse, error)
	// Join joins a remote node to the cluster.
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	// called by a partition leader when new node joins the cluster
	AddPartitionNode(ctx context.Context, in *AddPartitionNodeRequest, opts ...grpc.CallOption) (*AddPartitionNodeResponse, error)
	// called by a partition leader when node becomes unreachable
	ShutdownPartitionNode(ctx context.Context, in *ShutdownPartitionNodeRequest, opts ...grpc.CallOption) (*ShutdownPartitionNodeResponse, error)
	// called by a partition leader when he becomes a leader of partition cluster
	PartitionNodeLeaderChange(ctx context.Context, in *PartitionNodeLeaderChangeRequest, opts ...grpc.CallOption) (*PartitionNodeLeaderChangeResponse, error)
	// called by a partition leader when member node has to be reaped due to reap
	// settings
	RemovePartitionNode(ctx context.Context, in *RemovePartitionNodeRequest, opts ...grpc.CallOption) (*RemovePartitionNodeResponse, error)
	// called by a partition leader when member node becomes responsive after
	// being marked as shut down
	ResumePartitionNode(ctx context.Context, in *ResumePartitionNodeRequest, opts ...grpc.CallOption) (*ResumePartitionNodeResponse, error)
	ClusterBackup(ctx context.Context, in *ClusterBackupRequest, opts ...grpc.CallOption) (*ClusterBackupResponse, error)
	ClusterRestore(ctx context.Context, in *ClusterRestoreRequest, opts ...grpc.CallOption) (*ClusterRestoreResponse, error)
	ConfigurationUpdate(ctx context.Context, in *ConfigurationUpdateRequest, opts ...grpc.CallOption) (*ConfigurationUpdateResponse, error)
	AssignPartition(ctx context.Context, in *AssignPartitionRequest, opts ...grpc.CallOption) (*AssignPartitionResponse, error)
	UnassignPartition(ctx context.Context, in *UnassignPartitionRequest, opts ...grpc.CallOption) (*UnassignPartitionResponse, error)
	PartitionBackup(ctx context.Context, in *PartitionBackupRequest, opts ...grpc.CallOption) (*PartitionBackupResponse, error)
	PartitionRestore(ctx context.Context, in *PartitionRestoreRequest, opts ...grpc.CallOption) (*PartitionRestoreResponse, error)
	NodeCommand(ctx context.Context, in *proto.Command, opts ...grpc.CallOption) (*NodeCommandResponse, error)
	// Deploys definition into partitions that receiving node is leader of
	DeployDefinition(ctx context.Context, in *DeployDefinitionRequest, opts ...grpc.CallOption) (*DeployDefinitionResponse, error)
	ActivateJob(ctx context.Context, in *ActivateJobRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ActivateJobResponse], error)
	CompleteJob(ctx context.Context, in *CompleteJobRequest, opts ...grpc.CallOption) (*CompleteJobResponse, error)
	PublishMessage(ctx context.Context, in *PublishMessageRequest, opts ...grpc.CallOption) (*PublishMessageResponse, error)
	CreateInstance(ctx context.Context, in *CreateInstanceRequest, opts ...grpc.CallOption) (*CreateInstanceResponse, error)
	GetProcessInstances(ctx context.Context, in *GetProcessInstancesRequest, opts ...grpc.CallOption) (*GetProcessInstancesResponse, error)
	GetProcessInstance(ctx context.Context, in *GetProcessInstanceRequest, opts ...grpc.CallOption) (*GetProcessInstanceResponse, error)
	GetProcessInstanceJobs(ctx context.Context, in *GetProcessInstanceJobsRequest, opts ...grpc.CallOption) (*GetProcessInstanceJobsResponse, error)
	GetFlowElementHistory(ctx context.Context, in *GetFlowElementHistoryRequest, opts ...grpc.CallOption) (*GetFlowElementHistoryResponse, error)
}

type zenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewZenServiceClient(cc grpc.ClientConnInterface) ZenServiceClient {
	return &zenServiceClient{cc}
}

func (c *zenServiceClient) Notify(ctx context.Context, in *NotifyRequest, opts ...grpc.CallOption) (*NotifyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotifyResponse)
	err := c.cc.Invoke(ctx, ZenService_Notify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zenServiceClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinResponse)
	err := c.cc.Invoke(ctx, ZenService_Join_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zenServiceClient) AddPartitionNode(ctx context.Context, in *AddPartitionNodeRequest, opts ...grpc.CallOption) (*AddPartitionNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddPartitionNodeResponse)
	err := c.cc.Invoke(ctx, ZenService_AddPartitionNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zenServiceClient) ShutdownPartitionNode(ctx context.Context, in *ShutdownPartitionNodeRequest, opts ...grpc.CallOption) (*ShutdownPartitionNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShutdownPartitionNodeResponse)
	err := c.cc.Invoke(ctx, ZenService_ShutdownPartitionNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zenServiceClient) PartitionNodeLeaderChange(ctx context.Context, in *PartitionNodeLeaderChangeRequest, opts ...grpc.CallOption) (*PartitionNodeLeaderChangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PartitionNodeLeaderChangeResponse)
	err := c.cc.Invoke(ctx, ZenService_PartitionNodeLeaderChange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zenServiceClient) RemovePartitionNode(ctx context.Context, in *RemovePartitionNodeRequest, opts ...grpc.CallOption) (*RemovePartitionNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemovePartitionNodeResponse)
	err := c.cc.Invoke(ctx, ZenService_RemovePartitionNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zenServiceClient) ResumePartitionNode(ctx context.Context, in *ResumePartitionNodeRequest, opts ...grpc.CallOption) (*ResumePartitionNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResumePartitionNodeResponse)
	err := c.cc.Invoke(ctx, ZenService_ResumePartitionNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zenServiceClient) ClusterBackup(ctx context.Context, in *ClusterBackupRequest, opts ...grpc.CallOption) (*ClusterBackupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClusterBackupResponse)
	err := c.cc.Invoke(ctx, ZenService_ClusterBackup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zenServiceClient) ClusterRestore(ctx context.Context, in *ClusterRestoreRequest, opts ...grpc.CallOption) (*ClusterRestoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClusterRestoreResponse)
	err := c.cc.Invoke(ctx, ZenService_ClusterRestore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zenServiceClient) ConfigurationUpdate(ctx context.Context, in *ConfigurationUpdateRequest, opts ...grpc.CallOption) (*ConfigurationUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigurationUpdateResponse)
	err := c.cc.Invoke(ctx, ZenService_ConfigurationUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zenServiceClient) AssignPartition(ctx context.Context, in *AssignPartitionRequest, opts ...grpc.CallOption) (*AssignPartitionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignPartitionResponse)
	err := c.cc.Invoke(ctx, ZenService_AssignPartition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zenServiceClient) UnassignPartition(ctx context.Context, in *UnassignPartitionRequest, opts ...grpc.CallOption) (*UnassignPartitionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnassignPartitionResponse)
	err := c.cc.Invoke(ctx, ZenService_UnassignPartition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zenServiceClient) PartitionBackup(ctx context.Context, in *PartitionBackupRequest, opts ...grpc.CallOption) (*PartitionBackupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PartitionBackupResponse)
	err := c.cc.Invoke(ctx, ZenService_PartitionBackup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zenServiceClient) PartitionRestore(ctx context.Context, in *PartitionRestoreRequest, opts ...grpc.CallOption) (*PartitionRestoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PartitionRestoreResponse)
	err := c.cc.Invoke(ctx, ZenService_PartitionRestore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zenServiceClient) NodeCommand(ctx context.Context, in *proto.Command, opts ...grpc.CallOption) (*NodeCommandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NodeCommandResponse)
	err := c.cc.Invoke(ctx, ZenService_NodeCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zenServiceClient) DeployDefinition(ctx context.Context, in *DeployDefinitionRequest, opts ...grpc.CallOption) (*DeployDefinitionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeployDefinitionResponse)
	err := c.cc.Invoke(ctx, ZenService_DeployDefinition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zenServiceClient) ActivateJob(ctx context.Context, in *ActivateJobRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ActivateJobResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ZenService_ServiceDesc.Streams[0], ZenService_ActivateJob_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ActivateJobRequest, ActivateJobResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ZenService_ActivateJobClient = grpc.ServerStreamingClient[ActivateJobResponse]

func (c *zenServiceClient) CompleteJob(ctx context.Context, in *CompleteJobRequest, opts ...grpc.CallOption) (*CompleteJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompleteJobResponse)
	err := c.cc.Invoke(ctx, ZenService_CompleteJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zenServiceClient) PublishMessage(ctx context.Context, in *PublishMessageRequest, opts ...grpc.CallOption) (*PublishMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishMessageResponse)
	err := c.cc.Invoke(ctx, ZenService_PublishMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zenServiceClient) CreateInstance(ctx context.Context, in *CreateInstanceRequest, opts ...grpc.CallOption) (*CreateInstanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateInstanceResponse)
	err := c.cc.Invoke(ctx, ZenService_CreateInstance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zenServiceClient) GetProcessInstances(ctx context.Context, in *GetProcessInstancesRequest, opts ...grpc.CallOption) (*GetProcessInstancesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProcessInstancesResponse)
	err := c.cc.Invoke(ctx, ZenService_GetProcessInstances_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zenServiceClient) GetProcessInstance(ctx context.Context, in *GetProcessInstanceRequest, opts ...grpc.CallOption) (*GetProcessInstanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProcessInstanceResponse)
	err := c.cc.Invoke(ctx, ZenService_GetProcessInstance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zenServiceClient) GetProcessInstanceJobs(ctx context.Context, in *GetProcessInstanceJobsRequest, opts ...grpc.CallOption) (*GetProcessInstanceJobsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProcessInstanceJobsResponse)
	err := c.cc.Invoke(ctx, ZenService_GetProcessInstanceJobs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zenServiceClient) GetFlowElementHistory(ctx context.Context, in *GetFlowElementHistoryRequest, opts ...grpc.CallOption) (*GetFlowElementHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFlowElementHistoryResponse)
	err := c.cc.Invoke(ctx, ZenService_GetFlowElementHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZenServiceServer is the server API for ZenService service.
// All implementations must embed UnimplementedZenServiceServer
// for forward compatibility.
//
// GRPC API exposed through private GRPC endpoint
type ZenServiceServer interface {
	// Notify notifies this node that a remote node is ready
	// for bootstrapping.
	Notify(context.Context, *NotifyRequest) (*NotifyResponse, error)
	// Join joins a remote node to the cluster.
	Join(context.Context, *JoinRequest) (*JoinResponse, error)
	// called by a partition leader when new node joins the cluster
	AddPartitionNode(context.Context, *AddPartitionNodeRequest) (*AddPartitionNodeResponse, error)
	// called by a partition leader when node becomes unreachable
	ShutdownPartitionNode(context.Context, *ShutdownPartitionNodeRequest) (*ShutdownPartitionNodeResponse, error)
	// called by a partition leader when he becomes a leader of partition cluster
	PartitionNodeLeaderChange(context.Context, *PartitionNodeLeaderChangeRequest) (*PartitionNodeLeaderChangeResponse, error)
	// called by a partition leader when member node has to be reaped due to reap
	// settings
	RemovePartitionNode(context.Context, *RemovePartitionNodeRequest) (*RemovePartitionNodeResponse, error)
	// called by a partition leader when member node becomes responsive after
	// being marked as shut down
	ResumePartitionNode(context.Context, *ResumePartitionNodeRequest) (*ResumePartitionNodeResponse, error)
	ClusterBackup(context.Context, *ClusterBackupRequest) (*ClusterBackupResponse, error)
	ClusterRestore(context.Context, *ClusterRestoreRequest) (*ClusterRestoreResponse, error)
	ConfigurationUpdate(context.Context, *ConfigurationUpdateRequest) (*ConfigurationUpdateResponse, error)
	AssignPartition(context.Context, *AssignPartitionRequest) (*AssignPartitionResponse, error)
	UnassignPartition(context.Context, *UnassignPartitionRequest) (*UnassignPartitionResponse, error)
	PartitionBackup(context.Context, *PartitionBackupRequest) (*PartitionBackupResponse, error)
	PartitionRestore(context.Context, *PartitionRestoreRequest) (*PartitionRestoreResponse, error)
	NodeCommand(context.Context, *proto.Command) (*NodeCommandResponse, error)
	// Deploys definition into partitions that receiving node is leader of
	DeployDefinition(context.Context, *DeployDefinitionRequest) (*DeployDefinitionResponse, error)
	ActivateJob(*ActivateJobRequest, grpc.ServerStreamingServer[ActivateJobResponse]) error
	CompleteJob(context.Context, *CompleteJobRequest) (*CompleteJobResponse, error)
	PublishMessage(context.Context, *PublishMessageRequest) (*PublishMessageResponse, error)
	CreateInstance(context.Context, *CreateInstanceRequest) (*CreateInstanceResponse, error)
	GetProcessInstances(context.Context, *GetProcessInstancesRequest) (*GetProcessInstancesResponse, error)
	GetProcessInstance(context.Context, *GetProcessInstanceRequest) (*GetProcessInstanceResponse, error)
	GetProcessInstanceJobs(context.Context, *GetProcessInstanceJobsRequest) (*GetProcessInstanceJobsResponse, error)
	GetFlowElementHistory(context.Context, *GetFlowElementHistoryRequest) (*GetFlowElementHistoryResponse, error)
	mustEmbedUnimplementedZenServiceServer()
}

// UnimplementedZenServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedZenServiceServer struct{}

func (UnimplementedZenServiceServer) Notify(context.Context, *NotifyRequest) (*NotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notify not implemented")
}
func (UnimplementedZenServiceServer) Join(context.Context, *JoinRequest) (*JoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedZenServiceServer) AddPartitionNode(context.Context, *AddPartitionNodeRequest) (*AddPartitionNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPartitionNode not implemented")
}
func (UnimplementedZenServiceServer) ShutdownPartitionNode(context.Context, *ShutdownPartitionNodeRequest) (*ShutdownPartitionNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShutdownPartitionNode not implemented")
}
func (UnimplementedZenServiceServer) PartitionNodeLeaderChange(context.Context, *PartitionNodeLeaderChangeRequest) (*PartitionNodeLeaderChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartitionNodeLeaderChange not implemented")
}
func (UnimplementedZenServiceServer) RemovePartitionNode(context.Context, *RemovePartitionNodeRequest) (*RemovePartitionNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePartitionNode not implemented")
}
func (UnimplementedZenServiceServer) ResumePartitionNode(context.Context, *ResumePartitionNodeRequest) (*ResumePartitionNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumePartitionNode not implemented")
}
func (UnimplementedZenServiceServer) ClusterBackup(context.Context, *ClusterBackupRequest) (*ClusterBackupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClusterBackup not implemented")
}
func (UnimplementedZenServiceServer) ClusterRestore(context.Context, *ClusterRestoreRequest) (*ClusterRestoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClusterRestore not implemented")
}
func (UnimplementedZenServiceServer) ConfigurationUpdate(context.Context, *ConfigurationUpdateRequest) (*ConfigurationUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigurationUpdate not implemented")
}
func (UnimplementedZenServiceServer) AssignPartition(context.Context, *AssignPartitionRequest) (*AssignPartitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignPartition not implemented")
}
func (UnimplementedZenServiceServer) UnassignPartition(context.Context, *UnassignPartitionRequest) (*UnassignPartitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnassignPartition not implemented")
}
func (UnimplementedZenServiceServer) PartitionBackup(context.Context, *PartitionBackupRequest) (*PartitionBackupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartitionBackup not implemented")
}
func (UnimplementedZenServiceServer) PartitionRestore(context.Context, *PartitionRestoreRequest) (*PartitionRestoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartitionRestore not implemented")
}
func (UnimplementedZenServiceServer) NodeCommand(context.Context, *proto.Command) (*NodeCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeCommand not implemented")
}
func (UnimplementedZenServiceServer) DeployDefinition(context.Context, *DeployDefinitionRequest) (*DeployDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployDefinition not implemented")
}
func (UnimplementedZenServiceServer) ActivateJob(*ActivateJobRequest, grpc.ServerStreamingServer[ActivateJobResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ActivateJob not implemented")
}
func (UnimplementedZenServiceServer) CompleteJob(context.Context, *CompleteJobRequest) (*CompleteJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteJob not implemented")
}
func (UnimplementedZenServiceServer) PublishMessage(context.Context, *PublishMessageRequest) (*PublishMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishMessage not implemented")
}
func (UnimplementedZenServiceServer) CreateInstance(context.Context, *CreateInstanceRequest) (*CreateInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInstance not implemented")
}
func (UnimplementedZenServiceServer) GetProcessInstances(context.Context, *GetProcessInstancesRequest) (*GetProcessInstancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcessInstances not implemented")
}
func (UnimplementedZenServiceServer) GetProcessInstance(context.Context, *GetProcessInstanceRequest) (*GetProcessInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcessInstance not implemented")
}
func (UnimplementedZenServiceServer) GetProcessInstanceJobs(context.Context, *GetProcessInstanceJobsRequest) (*GetProcessInstanceJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcessInstanceJobs not implemented")
}
func (UnimplementedZenServiceServer) GetFlowElementHistory(context.Context, *GetFlowElementHistoryRequest) (*GetFlowElementHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlowElementHistory not implemented")
}
func (UnimplementedZenServiceServer) mustEmbedUnimplementedZenServiceServer() {}
func (UnimplementedZenServiceServer) testEmbeddedByValue()                    {}

// UnsafeZenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZenServiceServer will
// result in compilation errors.
type UnsafeZenServiceServer interface {
	mustEmbedUnimplementedZenServiceServer()
}

func RegisterZenServiceServer(s grpc.ServiceRegistrar, srv ZenServiceServer) {
	// If the following call pancis, it indicates UnimplementedZenServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ZenService_ServiceDesc, srv)
}

func _ZenService_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZenServiceServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZenService_Notify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZenServiceServer).Notify(ctx, req.(*NotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZenService_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZenServiceServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZenService_Join_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZenServiceServer).Join(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZenService_AddPartitionNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPartitionNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZenServiceServer).AddPartitionNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZenService_AddPartitionNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZenServiceServer).AddPartitionNode(ctx, req.(*AddPartitionNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZenService_ShutdownPartitionNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownPartitionNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZenServiceServer).ShutdownPartitionNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZenService_ShutdownPartitionNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZenServiceServer).ShutdownPartitionNode(ctx, req.(*ShutdownPartitionNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZenService_PartitionNodeLeaderChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartitionNodeLeaderChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZenServiceServer).PartitionNodeLeaderChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZenService_PartitionNodeLeaderChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZenServiceServer).PartitionNodeLeaderChange(ctx, req.(*PartitionNodeLeaderChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZenService_RemovePartitionNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePartitionNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZenServiceServer).RemovePartitionNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZenService_RemovePartitionNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZenServiceServer).RemovePartitionNode(ctx, req.(*RemovePartitionNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZenService_ResumePartitionNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumePartitionNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZenServiceServer).ResumePartitionNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZenService_ResumePartitionNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZenServiceServer).ResumePartitionNode(ctx, req.(*ResumePartitionNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZenService_ClusterBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZenServiceServer).ClusterBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZenService_ClusterBackup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZenServiceServer).ClusterBackup(ctx, req.(*ClusterBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZenService_ClusterRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterRestoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZenServiceServer).ClusterRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZenService_ClusterRestore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZenServiceServer).ClusterRestore(ctx, req.(*ClusterRestoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZenService_ConfigurationUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigurationUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZenServiceServer).ConfigurationUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZenService_ConfigurationUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZenServiceServer).ConfigurationUpdate(ctx, req.(*ConfigurationUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZenService_AssignPartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignPartitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZenServiceServer).AssignPartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZenService_AssignPartition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZenServiceServer).AssignPartition(ctx, req.(*AssignPartitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZenService_UnassignPartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnassignPartitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZenServiceServer).UnassignPartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZenService_UnassignPartition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZenServiceServer).UnassignPartition(ctx, req.(*UnassignPartitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZenService_PartitionBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartitionBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZenServiceServer).PartitionBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZenService_PartitionBackup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZenServiceServer).PartitionBackup(ctx, req.(*PartitionBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZenService_PartitionRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartitionRestoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZenServiceServer).PartitionRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZenService_PartitionRestore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZenServiceServer).PartitionRestore(ctx, req.(*PartitionRestoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZenService_NodeCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZenServiceServer).NodeCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZenService_NodeCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZenServiceServer).NodeCommand(ctx, req.(*proto.Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZenService_DeployDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZenServiceServer).DeployDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZenService_DeployDefinition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZenServiceServer).DeployDefinition(ctx, req.(*DeployDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZenService_ActivateJob_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ActivateJobRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ZenServiceServer).ActivateJob(m, &grpc.GenericServerStream[ActivateJobRequest, ActivateJobResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ZenService_ActivateJobServer = grpc.ServerStreamingServer[ActivateJobResponse]

func _ZenService_CompleteJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZenServiceServer).CompleteJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZenService_CompleteJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZenServiceServer).CompleteJob(ctx, req.(*CompleteJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZenService_PublishMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZenServiceServer).PublishMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZenService_PublishMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZenServiceServer).PublishMessage(ctx, req.(*PublishMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZenService_CreateInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZenServiceServer).CreateInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZenService_CreateInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZenServiceServer).CreateInstance(ctx, req.(*CreateInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZenService_GetProcessInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProcessInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZenServiceServer).GetProcessInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZenService_GetProcessInstances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZenServiceServer).GetProcessInstances(ctx, req.(*GetProcessInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZenService_GetProcessInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProcessInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZenServiceServer).GetProcessInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZenService_GetProcessInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZenServiceServer).GetProcessInstance(ctx, req.(*GetProcessInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZenService_GetProcessInstanceJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProcessInstanceJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZenServiceServer).GetProcessInstanceJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZenService_GetProcessInstanceJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZenServiceServer).GetProcessInstanceJobs(ctx, req.(*GetProcessInstanceJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZenService_GetFlowElementHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlowElementHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZenServiceServer).GetFlowElementHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZenService_GetFlowElementHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZenServiceServer).GetFlowElementHistory(ctx, req.(*GetFlowElementHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ZenService_ServiceDesc is the grpc.ServiceDesc for ZenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ZenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cluster.ZenService",
	HandlerType: (*ZenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Notify",
			Handler:    _ZenService_Notify_Handler,
		},
		{
			MethodName: "Join",
			Handler:    _ZenService_Join_Handler,
		},
		{
			MethodName: "AddPartitionNode",
			Handler:    _ZenService_AddPartitionNode_Handler,
		},
		{
			MethodName: "ShutdownPartitionNode",
			Handler:    _ZenService_ShutdownPartitionNode_Handler,
		},
		{
			MethodName: "PartitionNodeLeaderChange",
			Handler:    _ZenService_PartitionNodeLeaderChange_Handler,
		},
		{
			MethodName: "RemovePartitionNode",
			Handler:    _ZenService_RemovePartitionNode_Handler,
		},
		{
			MethodName: "ResumePartitionNode",
			Handler:    _ZenService_ResumePartitionNode_Handler,
		},
		{
			MethodName: "ClusterBackup",
			Handler:    _ZenService_ClusterBackup_Handler,
		},
		{
			MethodName: "ClusterRestore",
			Handler:    _ZenService_ClusterRestore_Handler,
		},
		{
			MethodName: "ConfigurationUpdate",
			Handler:    _ZenService_ConfigurationUpdate_Handler,
		},
		{
			MethodName: "AssignPartition",
			Handler:    _ZenService_AssignPartition_Handler,
		},
		{
			MethodName: "UnassignPartition",
			Handler:    _ZenService_UnassignPartition_Handler,
		},
		{
			MethodName: "PartitionBackup",
			Handler:    _ZenService_PartitionBackup_Handler,
		},
		{
			MethodName: "PartitionRestore",
			Handler:    _ZenService_PartitionRestore_Handler,
		},
		{
			MethodName: "NodeCommand",
			Handler:    _ZenService_NodeCommand_Handler,
		},
		{
			MethodName: "DeployDefinition",
			Handler:    _ZenService_DeployDefinition_Handler,
		},
		{
			MethodName: "CompleteJob",
			Handler:    _ZenService_CompleteJob_Handler,
		},
		{
			MethodName: "PublishMessage",
			Handler:    _ZenService_PublishMessage_Handler,
		},
		{
			MethodName: "CreateInstance",
			Handler:    _ZenService_CreateInstance_Handler,
		},
		{
			MethodName: "GetProcessInstances",
			Handler:    _ZenService_GetProcessInstances_Handler,
		},
		{
			MethodName: "GetProcessInstance",
			Handler:    _ZenService_GetProcessInstance_Handler,
		},
		{
			MethodName: "GetProcessInstanceJobs",
			Handler:    _ZenService_GetProcessInstanceJobs_Handler,
		},
		{
			MethodName: "GetFlowElementHistory",
			Handler:    _ZenService_GetFlowElementHistory_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ActivateJob",
			Handler:       _ZenService_ActivateJob_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "zen_cluster.proto",
}
