// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v6.30.1
// source: zenbpm.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ActivateJobsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Job type, matching the task definition in the BPMN process
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Name of the worker activating the jobs, used mostly for logging
	Worker string `protobuf:"bytes,2,opt,name=worker,proto3" json:"worker,omitempty"`
	// Jobs returned after this call will not be activated by another call until the
	// timeout has been reached. Time out is in milliseconds.
	Timeout int64 `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// Maximum jobs to activate
	MaxJobsToActivate int32 `protobuf:"varint,4,opt,name=maxJobsToActivate,proto3" json:"maxJobsToActivate,omitempty"`
	// List of specific variables to retrieve with the job. If empty, all variables
	// visible at the time of activation in the job's scope will be included
	FetchVariable []string `protobuf:"bytes,5,rep,name=fetchVariable,proto3" json:"fetchVariable,omitempty"`
	// Request will be completed when at least one job is activated or request timeouts:
	// - 0: Use default timeout
	// - positive: Wait up to specified milliseconds
	// - negative: Return immediately without waiting
	RequestTimeout int64 `protobuf:"varint,6,opt,name=requestTimeout,proto3" json:"requestTimeout,omitempty"`
	// List of tenant IDs to activate jobs for
	TenantIds []string `protobuf:"bytes,7,rep,name=tenantIds,proto3" json:"tenantIds,omitempty"`
	// Correlation ID, application specific
	CorrelationId string `protobuf:"bytes,8,opt,name=correlationId,proto3" json:"correlationId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActivateJobsRequest) Reset() {
	*x = ActivateJobsRequest{}
	mi := &file_zenbpm_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivateJobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateJobsRequest) ProtoMessage() {}

func (x *ActivateJobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenbpm_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateJobsRequest.ProtoReflect.Descriptor instead.
func (*ActivateJobsRequest) Descriptor() ([]byte, []int) {
	return file_zenbpm_proto_rawDescGZIP(), []int{0}
}

func (x *ActivateJobsRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ActivateJobsRequest) GetWorker() string {
	if x != nil {
		return x.Worker
	}
	return ""
}

func (x *ActivateJobsRequest) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *ActivateJobsRequest) GetMaxJobsToActivate() int32 {
	if x != nil {
		return x.MaxJobsToActivate
	}
	return 0
}

func (x *ActivateJobsRequest) GetFetchVariable() []string {
	if x != nil {
		return x.FetchVariable
	}
	return nil
}

func (x *ActivateJobsRequest) GetRequestTimeout() int64 {
	if x != nil {
		return x.RequestTimeout
	}
	return 0
}

func (x *ActivateJobsRequest) GetTenantIds() []string {
	if x != nil {
		return x.TenantIds
	}
	return nil
}

func (x *ActivateJobsRequest) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

type ActivateJobsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Jobs          []*ActivatedJob        `protobuf:"bytes,1,rep,name=jobs,proto3" json:"jobs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActivateJobsResponse) Reset() {
	*x = ActivateJobsResponse{}
	mi := &file_zenbpm_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivateJobsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateJobsResponse) ProtoMessage() {}

func (x *ActivateJobsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenbpm_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateJobsResponse.ProtoReflect.Descriptor instead.
func (*ActivateJobsResponse) Descriptor() ([]byte, []int) {
	return file_zenbpm_proto_rawDescGZIP(), []int{1}
}

func (x *ActivateJobsResponse) GetJobs() []*ActivatedJob {
	if x != nil {
		return x.Jobs
	}
	return nil
}

type ActivatedJob struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique job identifier
	Key int64 `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	// Task type (should match activation request)
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Instance key of job's process
	ProcessInstanceKey int64 `protobuf:"varint,3,opt,name=processInstanceKey,proto3" json:"processInstanceKey,omitempty"`
	// BPMN process ID of job's process
	BpmnProcessId string `protobuf:"bytes,4,opt,name=bpmnProcessId,proto3" json:"bpmnProcessId,omitempty"`
	// Process definition version number
	ProcessDefinitionVersion int32 `protobuf:"varint,5,opt,name=processDefinitionVersion,proto3" json:"processDefinitionVersion,omitempty"`
	// Key of the job process definition
	ProcessDefinitionKey int64 `protobuf:"varint,6,opt,name=processDefinitionKey,proto3" json:"processDefinitionKey,omitempty"`
	// Element ID of associated task
	ElementId string `protobuf:"bytes,7,opt,name=elementId,proto3" json:"elementId,omitempty"`
	// Key identifying the associated task, unique within the scope of the
	// process instance
	ElementInstanceKey int64 `protobuf:"varint,8,opt,name=elementInstanceKey,proto3" json:"elementInstanceKey,omitempty"`
	// Custom headers defined during modelling. JSON document.
	CustomHeaders string `protobuf:"bytes,9,opt,name=customHeaders,proto3" json:"customHeaders,omitempty"`
	// Name of the worker which activated this job
	Worker string `protobuf:"bytes,10,opt,name=worker,proto3" json:"worker,omitempty"`
	// Retries left for this job. Should always be positive.
	Retries int32 `protobuf:"varint,11,opt,name=retries,proto3" json:"retries,omitempty"`
	// When the job can be activated again, as a UNIX epoch timestamp
	Deadline int64 `protobuf:"varint,12,opt,name=deadline,proto3" json:"deadline,omitempty"`
	// All variables visible in the task scope. JSON document.
	Variables string `protobuf:"bytes,13,opt,name=variables,proto3" json:"variables,omitempty"`
	// ID of the tenant that owns the job
	TenantId      string `protobuf:"bytes,14,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActivatedJob) Reset() {
	*x = ActivatedJob{}
	mi := &file_zenbpm_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivatedJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivatedJob) ProtoMessage() {}

func (x *ActivatedJob) ProtoReflect() protoreflect.Message {
	mi := &file_zenbpm_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivatedJob.ProtoReflect.Descriptor instead.
func (*ActivatedJob) Descriptor() ([]byte, []int) {
	return file_zenbpm_proto_rawDescGZIP(), []int{2}
}

func (x *ActivatedJob) GetKey() int64 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *ActivatedJob) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ActivatedJob) GetProcessInstanceKey() int64 {
	if x != nil {
		return x.ProcessInstanceKey
	}
	return 0
}

func (x *ActivatedJob) GetBpmnProcessId() string {
	if x != nil {
		return x.BpmnProcessId
	}
	return ""
}

func (x *ActivatedJob) GetProcessDefinitionVersion() int32 {
	if x != nil {
		return x.ProcessDefinitionVersion
	}
	return 0
}

func (x *ActivatedJob) GetProcessDefinitionKey() int64 {
	if x != nil {
		return x.ProcessDefinitionKey
	}
	return 0
}

func (x *ActivatedJob) GetElementId() string {
	if x != nil {
		return x.ElementId
	}
	return ""
}

func (x *ActivatedJob) GetElementInstanceKey() int64 {
	if x != nil {
		return x.ElementInstanceKey
	}
	return 0
}

func (x *ActivatedJob) GetCustomHeaders() string {
	if x != nil {
		return x.CustomHeaders
	}
	return ""
}

func (x *ActivatedJob) GetWorker() string {
	if x != nil {
		return x.Worker
	}
	return ""
}

func (x *ActivatedJob) GetRetries() int32 {
	if x != nil {
		return x.Retries
	}
	return 0
}

func (x *ActivatedJob) GetDeadline() int64 {
	if x != nil {
		return x.Deadline
	}
	return 0
}

func (x *ActivatedJob) GetVariables() string {
	if x != nil {
		return x.Variables
	}
	return ""
}

func (x *ActivatedJob) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type CompleteJobRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Job identifier, from ActivateJobsResponse
	JobKey int64 `protobuf:"varint,1,opt,name=jobKey,proto3" json:"jobKey,omitempty"`
	// All variables visible in current task scope. JSON document.
	Variables string `protobuf:"bytes,2,opt,name=variables,proto3" json:"variables,omitempty"`
	// Result of the completed job, determined by the worker.
	Result *JobResult `protobuf:"bytes,3,opt,name=result,proto3,oneof" json:"result,omitempty"`
	// correlation ID, application specific
	CorrelationId string `protobuf:"bytes,4,opt,name=correlationId,proto3" json:"correlationId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompleteJobRequest) Reset() {
	*x = CompleteJobRequest{}
	mi := &file_zenbpm_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompleteJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteJobRequest) ProtoMessage() {}

func (x *CompleteJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenbpm_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteJobRequest.ProtoReflect.Descriptor instead.
func (*CompleteJobRequest) Descriptor() ([]byte, []int) {
	return file_zenbpm_proto_rawDescGZIP(), []int{3}
}

func (x *CompleteJobRequest) GetJobKey() int64 {
	if x != nil {
		return x.JobKey
	}
	return 0
}

func (x *CompleteJobRequest) GetVariables() string {
	if x != nil {
		return x.Variables
	}
	return ""
}

func (x *CompleteJobRequest) GetResult() *JobResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *CompleteJobRequest) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

type JobResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Indicates task rejection status.
	// When true, rejects completion and keeps task active
	// Defaults to false.
	Denied *bool `protobuf:"varint,1,opt,name=denied,proto3,oneof" json:"denied,omitempty"`
	// Updated task attributes:
	// - `assignee` (clear with empty string)
	// - `dueDate` (clear with empty string)
	// - `followUpDate` (clear with empty string)
	// - `candidateGroups` (clear with empty list)
	// - `candidateUsers` (clear with empty list)
	// - `priority` (0-100, defaults to 50)
	// Omitted attributes remains unchanged
	Corrections *JobResultCorrections `protobuf:"bytes,2,opt,name=corrections,proto3,oneof" json:"corrections,omitempty"`
	// Reason of task denial
	DeniedReason  *string `protobuf:"bytes,3,opt,name=deniedReason,proto3,oneof" json:"deniedReason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobResult) Reset() {
	*x = JobResult{}
	mi := &file_zenbpm_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobResult) ProtoMessage() {}

func (x *JobResult) ProtoReflect() protoreflect.Message {
	mi := &file_zenbpm_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobResult.ProtoReflect.Descriptor instead.
func (*JobResult) Descriptor() ([]byte, []int) {
	return file_zenbpm_proto_rawDescGZIP(), []int{4}
}

func (x *JobResult) GetDenied() bool {
	if x != nil && x.Denied != nil {
		return *x.Denied
	}
	return false
}

func (x *JobResult) GetCorrections() *JobResultCorrections {
	if x != nil {
		return x.Corrections
	}
	return nil
}

func (x *JobResult) GetDeniedReason() string {
	if x != nil && x.DeniedReason != nil {
		return *x.DeniedReason
	}
	return ""
}

type JobResultCorrections struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Task assignee
	Assignee *string `protobuf:"bytes,1,opt,name=assignee,proto3,oneof" json:"assignee,omitempty"`
	// Task due date
	DueDate *string `protobuf:"bytes,2,opt,name=dueDate,proto3,oneof" json:"dueDate,omitempty"`
	// Task follow-up date
	FollowUpDate *string `protobuf:"bytes,3,opt,name=followUpDate,proto3,oneof" json:"followUpDate,omitempty"`
	// Task eligible users
	CandidateUsers *StringList `protobuf:"bytes,4,opt,name=candidateUsers,proto3,oneof" json:"candidateUsers,omitempty"`
	// Task eligible groups
	CandidateGroups *StringList `protobuf:"bytes,5,opt,name=candidateGroups,proto3,oneof" json:"candidateGroups,omitempty"`
	// Task priority
	Priority      *int32 `protobuf:"varint,6,opt,name=priority,proto3,oneof" json:"priority,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobResultCorrections) Reset() {
	*x = JobResultCorrections{}
	mi := &file_zenbpm_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobResultCorrections) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobResultCorrections) ProtoMessage() {}

func (x *JobResultCorrections) ProtoReflect() protoreflect.Message {
	mi := &file_zenbpm_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobResultCorrections.ProtoReflect.Descriptor instead.
func (*JobResultCorrections) Descriptor() ([]byte, []int) {
	return file_zenbpm_proto_rawDescGZIP(), []int{5}
}

func (x *JobResultCorrections) GetAssignee() string {
	if x != nil && x.Assignee != nil {
		return *x.Assignee
	}
	return ""
}

func (x *JobResultCorrections) GetDueDate() string {
	if x != nil && x.DueDate != nil {
		return *x.DueDate
	}
	return ""
}

func (x *JobResultCorrections) GetFollowUpDate() string {
	if x != nil && x.FollowUpDate != nil {
		return *x.FollowUpDate
	}
	return ""
}

func (x *JobResultCorrections) GetCandidateUsers() *StringList {
	if x != nil {
		return x.CandidateUsers
	}
	return nil
}

func (x *JobResultCorrections) GetCandidateGroups() *StringList {
	if x != nil {
		return x.CandidateGroups
	}
	return nil
}

func (x *JobResultCorrections) GetPriority() int32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

type StringList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []string               `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StringList) Reset() {
	*x = StringList{}
	mi := &file_zenbpm_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringList) ProtoMessage() {}

func (x *StringList) ProtoReflect() protoreflect.Message {
	mi := &file_zenbpm_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringList.ProtoReflect.Descriptor instead.
func (*StringList) Descriptor() ([]byte, []int) {
	return file_zenbpm_proto_rawDescGZIP(), []int{6}
}

func (x *StringList) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type CompleteJobResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompleteJobResponse) Reset() {
	*x = CompleteJobResponse{}
	mi := &file_zenbpm_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompleteJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteJobResponse) ProtoMessage() {}

func (x *CompleteJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenbpm_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteJobResponse.ProtoReflect.Descriptor instead.
func (*CompleteJobResponse) Descriptor() ([]byte, []int) {
	return file_zenbpm_proto_rawDescGZIP(), []int{7}
}

type FailJobRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Job identifier, from ActivateJobsResponse
	JobKey int64 `protobuf:"varint,1,opt,name=jobKey,proto3" json:"jobKey,omitempty"`
	// Retries the job should have left.
	Retries int32 `protobuf:"varint,2,opt,name=retries,proto3" json:"retries,omitempty"`
	// Message with description why the job failed
	ErrorMessage string `protobuf:"bytes,3,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
	// Backoff timeout for the next retry. In milliseconds.
	RetryBackOff int64 `protobuf:"varint,4,opt,name=retryBackOff,proto3" json:"retryBackOff,omitempty"`
	// All variables visible in current task scope. JSON document.
	Variables string `protobuf:"bytes,5,opt,name=variables,proto3" json:"variables,omitempty"`
	// correlation ID, application specific
	CorrelationId string `protobuf:"bytes,6,opt,name=correlationId,proto3" json:"correlationId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FailJobRequest) Reset() {
	*x = FailJobRequest{}
	mi := &file_zenbpm_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FailJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailJobRequest) ProtoMessage() {}

func (x *FailJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenbpm_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailJobRequest.ProtoReflect.Descriptor instead.
func (*FailJobRequest) Descriptor() ([]byte, []int) {
	return file_zenbpm_proto_rawDescGZIP(), []int{8}
}

func (x *FailJobRequest) GetJobKey() int64 {
	if x != nil {
		return x.JobKey
	}
	return 0
}

func (x *FailJobRequest) GetRetries() int32 {
	if x != nil {
		return x.Retries
	}
	return 0
}

func (x *FailJobRequest) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *FailJobRequest) GetRetryBackOff() int64 {
	if x != nil {
		return x.RetryBackOff
	}
	return 0
}

func (x *FailJobRequest) GetVariables() string {
	if x != nil {
		return x.Variables
	}
	return ""
}

func (x *FailJobRequest) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

type FailJobResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FailJobResponse) Reset() {
	*x = FailJobResponse{}
	mi := &file_zenbpm_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FailJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailJobResponse) ProtoMessage() {}

func (x *FailJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenbpm_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailJobResponse.ProtoReflect.Descriptor instead.
func (*FailJobResponse) Descriptor() ([]byte, []int) {
	return file_zenbpm_proto_rawDescGZIP(), []int{9}
}

var File_zenbpm_proto protoreflect.FileDescriptor

var file_zenbpm_proto_rawDesc = string([]byte{
	0x0a, 0x0c, 0x7a, 0x65, 0x6e, 0x62, 0x70, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x7a, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x22, 0x9b, 0x02, 0x0a, 0x13, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x4a, 0x6f, 0x62, 0x73, 0x54,
	0x6f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x6d, 0x61, 0x78, 0x4a, 0x6f, 0x62, 0x73, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x65, 0x74, 0x63, 0x68, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x65, 0x74, 0x63, 0x68,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x14, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04,
	0x6a, 0x6f, 0x62, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x4a, 0x6f, 0x62,
	0x52, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x22, 0xf6, 0x03, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x64, 0x4a, 0x6f, 0x62, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a,
	0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a,
	0x0d, 0x62, 0x70, 0x6d, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x70, 0x6d, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x32, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65,
	0x79, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x61,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x65, 0x61,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0xab, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x4b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6a, 0x6f, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x7a,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48,
	0x00, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0d,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xc2, 0x01,
	0x0a, 0x09, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x64,
	0x65, 0x6e, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x64,
	0x65, 0x6e, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0b, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x7a, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x01, 0x52, 0x0b, 0x63,
	0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a,
	0x0c, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0c, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64, 0x65, 0x6e, 0x69, 0x65,
	0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x22, 0x82, 0x03, 0x0a, 0x14, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07,
	0x64, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x07, 0x64, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x66,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x70, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x0c, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x70, 0x44, 0x61, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x7a,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x48, 0x03, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x7a, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x48, 0x04, 0x52, 0x0f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x64, 0x75, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x70, 0x44,
	0x61, 0x74, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x24, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x15, 0x0a,
	0x13, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xce, 0x01, 0x0a, 0x0e, 0x46, 0x61, 0x69, 0x6c, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x4b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6a, 0x6f, 0x62, 0x4b, 0x65, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x4f, 0x66, 0x66, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x4f, 0x66,
	0x66, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12,
	0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x11, 0x0a, 0x0f, 0x46, 0x61, 0x69, 0x6c, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xdf, 0x01, 0x0a, 0x06, 0x5a, 0x65, 0x6e,
	0x42, 0x70, 0x6d, 0x12, 0x4d, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4a,
	0x6f, 0x62, 0x73, 0x12, 0x1b, 0x2e, 0x7a, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x7a, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x48, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f,
	0x62, 0x12, 0x1a, 0x2e, 0x7a, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x7a, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x07,
	0x46, 0x61, 0x69, 0x6c, 0x4a, 0x6f, 0x62, 0x12, 0x16, 0x2e, 0x7a, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x2e, 0x46, 0x61, 0x69, 0x6c, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x7a, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xe0, 0x01, 0x0a, 0x07, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x4d, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x1b, 0x2e, 0x7a, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x7a, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x48, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x4a, 0x6f, 0x62, 0x12, 0x1a, 0x2e, 0x7a, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1b, 0x2e, 0x7a, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x3c, 0x0a, 0x07, 0x46, 0x61, 0x69, 0x6c, 0x4a, 0x6f, 0x62, 0x12, 0x16, 0x2e, 0x7a, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x17, 0x2e, 0x7a, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x61, 0x69, 0x6c,
	0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x34, 0x5a,
	0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x62, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x69, 0x76, 0x65, 0x2f, 0x7a, 0x65, 0x6e, 0x62, 0x70, 0x6d, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_zenbpm_proto_rawDescOnce sync.Once
	file_zenbpm_proto_rawDescData []byte
)

func file_zenbpm_proto_rawDescGZIP() []byte {
	file_zenbpm_proto_rawDescOnce.Do(func() {
		file_zenbpm_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_zenbpm_proto_rawDesc), len(file_zenbpm_proto_rawDesc)))
	})
	return file_zenbpm_proto_rawDescData
}

var file_zenbpm_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_zenbpm_proto_goTypes = []any{
	(*ActivateJobsRequest)(nil),  // 0: zenapi.ActivateJobsRequest
	(*ActivateJobsResponse)(nil), // 1: zenapi.ActivateJobsResponse
	(*ActivatedJob)(nil),         // 2: zenapi.ActivatedJob
	(*CompleteJobRequest)(nil),   // 3: zenapi.CompleteJobRequest
	(*JobResult)(nil),            // 4: zenapi.JobResult
	(*JobResultCorrections)(nil), // 5: zenapi.JobResultCorrections
	(*StringList)(nil),           // 6: zenapi.StringList
	(*CompleteJobResponse)(nil),  // 7: zenapi.CompleteJobResponse
	(*FailJobRequest)(nil),       // 8: zenapi.FailJobRequest
	(*FailJobResponse)(nil),      // 9: zenapi.FailJobResponse
}
var file_zenbpm_proto_depIdxs = []int32{
	2,  // 0: zenapi.ActivateJobsResponse.jobs:type_name -> zenapi.ActivatedJob
	4,  // 1: zenapi.CompleteJobRequest.result:type_name -> zenapi.JobResult
	5,  // 2: zenapi.JobResult.corrections:type_name -> zenapi.JobResultCorrections
	6,  // 3: zenapi.JobResultCorrections.candidateUsers:type_name -> zenapi.StringList
	6,  // 4: zenapi.JobResultCorrections.candidateGroups:type_name -> zenapi.StringList
	0,  // 5: zenapi.ZenBpm.ActivateJobs:input_type -> zenapi.ActivateJobsRequest
	3,  // 6: zenapi.ZenBpm.CompleteJob:input_type -> zenapi.CompleteJobRequest
	8,  // 7: zenapi.ZenBpm.FailJob:input_type -> zenapi.FailJobRequest
	0,  // 8: zenapi.Gateway.ActivateJobs:input_type -> zenapi.ActivateJobsRequest
	3,  // 9: zenapi.Gateway.CompleteJob:input_type -> zenapi.CompleteJobRequest
	8,  // 10: zenapi.Gateway.FailJob:input_type -> zenapi.FailJobRequest
	1,  // 11: zenapi.ZenBpm.ActivateJobs:output_type -> zenapi.ActivateJobsResponse
	7,  // 12: zenapi.ZenBpm.CompleteJob:output_type -> zenapi.CompleteJobResponse
	9,  // 13: zenapi.ZenBpm.FailJob:output_type -> zenapi.FailJobResponse
	1,  // 14: zenapi.Gateway.ActivateJobs:output_type -> zenapi.ActivateJobsResponse
	7,  // 15: zenapi.Gateway.CompleteJob:output_type -> zenapi.CompleteJobResponse
	9,  // 16: zenapi.Gateway.FailJob:output_type -> zenapi.FailJobResponse
	11, // [11:17] is the sub-list for method output_type
	5,  // [5:11] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_zenbpm_proto_init() }
func file_zenbpm_proto_init() {
	if File_zenbpm_proto != nil {
		return
	}
	file_zenbpm_proto_msgTypes[3].OneofWrappers = []any{}
	file_zenbpm_proto_msgTypes[4].OneofWrappers = []any{}
	file_zenbpm_proto_msgTypes[5].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_zenbpm_proto_rawDesc), len(file_zenbpm_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_zenbpm_proto_goTypes,
		DependencyIndexes: file_zenbpm_proto_depIdxs,
		MessageInfos:      file_zenbpm_proto_msgTypes,
	}.Build()
	File_zenbpm_proto = out.File
	file_zenbpm_proto_goTypes = nil
	file_zenbpm_proto_depIdxs = nil
}
