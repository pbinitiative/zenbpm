// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.1
// source: zenbpm.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ZenBpm_ActivateJobs_FullMethodName = "/grpc.ZenBpm/ActivateJobs"
	ZenBpm_CompleteJob_FullMethodName  = "/grpc.ZenBpm/CompleteJob"
	ZenBpm_FailJob_FullMethodName      = "/grpc.ZenBpm/FailJob"
)

// ZenBpmClient is the client API for ZenBpm service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZenBpmClient interface {
	// Activate requested maximum of jobs
	//
	// Errors:
	// INVALID_ARGUMENT:
	// - type is blank (empty string, null)
	// - worker is blank (empty string, null)
	// - timeout less than 1
	// - maxJobsToActivate is less than 1
	ActivateJobs(ctx context.Context, in *ActivateJobsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ActivateJobsResponse], error)
	// Completes a job with the given variables, which allows completing the associated service task.
	//
	// Errors:
	// NOT_FOUND:
	// - no job exists with the given job key. Note that since jobs are removed once completed,
	// it could be that this job did exist at some point.
	//
	// FAILED_PRECONDITION:
	// - the job was marked as failed. In that case, the related incident must be resolved before
	// the job can be activated again and completed.
	CompleteJob(ctx context.Context, in *CompleteJobRequest, opts ...grpc.CallOption) (*CompleteJobResponse, error)
	// Marks the job as failed; if the retries argument is positive, then the job will be immediately
	// activatable again, and a worker could try again to process it. If it is zero or negative however,
	// an incident will be raised, tagged with the given errorMessage, and the job will not be
	// activatable until the incident is resolved.
	//
	// Errors:
	// NOT_FOUND:
	// - no job was found with the given key
	//
	// FAILED_PRECONDITION:
	// - the job was not activated
	// - the job is already in a failed state, i.e. ran out of retries
	FailJob(ctx context.Context, in *FailJobRequest, opts ...grpc.CallOption) (*FailJobResponse, error)
}

type zenBpmClient struct {
	cc grpc.ClientConnInterface
}

func NewZenBpmClient(cc grpc.ClientConnInterface) ZenBpmClient {
	return &zenBpmClient{cc}
}

func (c *zenBpmClient) ActivateJobs(ctx context.Context, in *ActivateJobsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ActivateJobsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ZenBpm_ServiceDesc.Streams[0], ZenBpm_ActivateJobs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ActivateJobsRequest, ActivateJobsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ZenBpm_ActivateJobsClient = grpc.ServerStreamingClient[ActivateJobsResponse]

func (c *zenBpmClient) CompleteJob(ctx context.Context, in *CompleteJobRequest, opts ...grpc.CallOption) (*CompleteJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompleteJobResponse)
	err := c.cc.Invoke(ctx, ZenBpm_CompleteJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zenBpmClient) FailJob(ctx context.Context, in *FailJobRequest, opts ...grpc.CallOption) (*FailJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FailJobResponse)
	err := c.cc.Invoke(ctx, ZenBpm_FailJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZenBpmServer is the server API for ZenBpm service.
// All implementations must embed UnimplementedZenBpmServer
// for forward compatibility.
type ZenBpmServer interface {
	// Activate requested maximum of jobs
	//
	// Errors:
	// INVALID_ARGUMENT:
	// - type is blank (empty string, null)
	// - worker is blank (empty string, null)
	// - timeout less than 1
	// - maxJobsToActivate is less than 1
	ActivateJobs(*ActivateJobsRequest, grpc.ServerStreamingServer[ActivateJobsResponse]) error
	// Completes a job with the given variables, which allows completing the associated service task.
	//
	// Errors:
	// NOT_FOUND:
	// - no job exists with the given job key. Note that since jobs are removed once completed,
	// it could be that this job did exist at some point.
	//
	// FAILED_PRECONDITION:
	// - the job was marked as failed. In that case, the related incident must be resolved before
	// the job can be activated again and completed.
	CompleteJob(context.Context, *CompleteJobRequest) (*CompleteJobResponse, error)
	// Marks the job as failed; if the retries argument is positive, then the job will be immediately
	// activatable again, and a worker could try again to process it. If it is zero or negative however,
	// an incident will be raised, tagged with the given errorMessage, and the job will not be
	// activatable until the incident is resolved.
	//
	// Errors:
	// NOT_FOUND:
	// - no job was found with the given key
	//
	// FAILED_PRECONDITION:
	// - the job was not activated
	// - the job is already in a failed state, i.e. ran out of retries
	FailJob(context.Context, *FailJobRequest) (*FailJobResponse, error)
	mustEmbedUnimplementedZenBpmServer()
}

// UnimplementedZenBpmServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedZenBpmServer struct{}

func (UnimplementedZenBpmServer) ActivateJobs(*ActivateJobsRequest, grpc.ServerStreamingServer[ActivateJobsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ActivateJobs not implemented")
}
func (UnimplementedZenBpmServer) CompleteJob(context.Context, *CompleteJobRequest) (*CompleteJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteJob not implemented")
}
func (UnimplementedZenBpmServer) FailJob(context.Context, *FailJobRequest) (*FailJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FailJob not implemented")
}
func (UnimplementedZenBpmServer) mustEmbedUnimplementedZenBpmServer() {}
func (UnimplementedZenBpmServer) testEmbeddedByValue()                {}

// UnsafeZenBpmServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZenBpmServer will
// result in compilation errors.
type UnsafeZenBpmServer interface {
	mustEmbedUnimplementedZenBpmServer()
}

func RegisterZenBpmServer(s grpc.ServiceRegistrar, srv ZenBpmServer) {
	// If the following call pancis, it indicates UnimplementedZenBpmServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ZenBpm_ServiceDesc, srv)
}

func _ZenBpm_ActivateJobs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ActivateJobsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ZenBpmServer).ActivateJobs(m, &grpc.GenericServerStream[ActivateJobsRequest, ActivateJobsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ZenBpm_ActivateJobsServer = grpc.ServerStreamingServer[ActivateJobsResponse]

func _ZenBpm_CompleteJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZenBpmServer).CompleteJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZenBpm_CompleteJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZenBpmServer).CompleteJob(ctx, req.(*CompleteJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZenBpm_FailJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FailJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZenBpmServer).FailJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZenBpm_FailJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZenBpmServer).FailJob(ctx, req.(*FailJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ZenBpm_ServiceDesc is the grpc.ServiceDesc for ZenBpm service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ZenBpm_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.ZenBpm",
	HandlerType: (*ZenBpmServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CompleteJob",
			Handler:    _ZenBpm_CompleteJob_Handler,
		},
		{
			MethodName: "FailJob",
			Handler:    _ZenBpm_FailJob_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ActivateJobs",
			Handler:       _ZenBpm_ActivateJobs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "zenbpm.proto",
}

const (
	Gateway_ActivateJobs_FullMethodName = "/grpc.Gateway/ActivateJobs"
	Gateway_CompleteJob_FullMethodName  = "/grpc.Gateway/CompleteJob"
	Gateway_FailJob_FullMethodName      = "/grpc.Gateway/FailJob"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Zeebe compatibility service
type GatewayClient interface {
	ActivateJobs(ctx context.Context, in *ActivateJobsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ActivateJobsResponse], error)
	CompleteJob(ctx context.Context, in *CompleteJobRequest, opts ...grpc.CallOption) (*CompleteJobResponse, error)
	FailJob(ctx context.Context, in *FailJobRequest, opts ...grpc.CallOption) (*FailJobResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) ActivateJobs(ctx context.Context, in *ActivateJobsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ActivateJobsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Gateway_ServiceDesc.Streams[0], Gateway_ActivateJobs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ActivateJobsRequest, ActivateJobsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Gateway_ActivateJobsClient = grpc.ServerStreamingClient[ActivateJobsResponse]

func (c *gatewayClient) CompleteJob(ctx context.Context, in *CompleteJobRequest, opts ...grpc.CallOption) (*CompleteJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompleteJobResponse)
	err := c.cc.Invoke(ctx, Gateway_CompleteJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) FailJob(ctx context.Context, in *FailJobRequest, opts ...grpc.CallOption) (*FailJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FailJobResponse)
	err := c.cc.Invoke(ctx, Gateway_FailJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility.
//
// Zeebe compatibility service
type GatewayServer interface {
	ActivateJobs(*ActivateJobsRequest, grpc.ServerStreamingServer[ActivateJobsResponse]) error
	CompleteJob(context.Context, *CompleteJobRequest) (*CompleteJobResponse, error)
	FailJob(context.Context, *FailJobRequest) (*FailJobResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGatewayServer struct{}

func (UnimplementedGatewayServer) ActivateJobs(*ActivateJobsRequest, grpc.ServerStreamingServer[ActivateJobsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ActivateJobs not implemented")
}
func (UnimplementedGatewayServer) CompleteJob(context.Context, *CompleteJobRequest) (*CompleteJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteJob not implemented")
}
func (UnimplementedGatewayServer) FailJob(context.Context, *FailJobRequest) (*FailJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FailJob not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}
func (UnimplementedGatewayServer) testEmbeddedByValue()                 {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	// If the following call pancis, it indicates UnimplementedGatewayServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_ActivateJobs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ActivateJobsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GatewayServer).ActivateJobs(m, &grpc.GenericServerStream[ActivateJobsRequest, ActivateJobsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Gateway_ActivateJobsServer = grpc.ServerStreamingServer[ActivateJobsResponse]

func _Gateway_CompleteJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CompleteJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_CompleteJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CompleteJob(ctx, req.(*CompleteJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_FailJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FailJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).FailJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_FailJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).FailJob(ctx, req.(*FailJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CompleteJob",
			Handler:    _Gateway_CompleteJob_Handler,
		},
		{
			MethodName: "FailJob",
			Handler:    _Gateway_FailJob_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ActivateJobs",
			Handler:       _Gateway_ActivateJobs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "zenbpm.proto",
}
