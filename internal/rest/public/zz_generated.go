// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// Defines values for ProcessInstanceState.
const (
	Active     ProcessInstanceState = "active"
	Completed  ProcessInstanceState = "completed"
	Terminated ProcessInstanceState = "terminated"
)

// Activity defines model for Activity.
type Activity struct {
	BpmnElementType      *string    `json:"bpmnElementType,omitempty"`
	CreatedAt            *time.Time `json:"createdAt,omitempty"`
	ElementId            *string    `json:"elementId,omitempty"`
	Key                  *string    `json:"key,omitempty"`
	ProcessDefinitionKey *string    `json:"processDefinitionKey,omitempty"`
	ProcessInstanceKey   *string    `json:"processInstanceKey,omitempty"`
	State                *string    `json:"state,omitempty"`
}

// ActivityPage defines model for ActivityPage.
type ActivityPage struct {
	// Embedded fields due to inline allOf schema
	Items *[]Activity `json:"items,omitempty"`
	// Embedded struct due to allOf(#/components/schemas/PageMetadata)
	PageMetadata `yaml:",inline"`
}

// Error defines model for Error.
type Error struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

// FlowElementHistory defines model for FlowElementHistory.
type FlowElementHistory struct {
	CreatedAt          *time.Time `json:"createdAt,omitempty"`
	ElementId          *string    `json:"elementId,omitempty"`
	Key                *string    `json:"key,omitempty"`
	ProcessInstanceKey *string    `json:"processInstanceKey,omitempty"`
}

// FlowElementHistoryPage defines model for FlowElementHistoryPage.
type FlowElementHistoryPage struct {
	// Embedded fields due to inline allOf schema
	Items *[]FlowElementHistory `json:"items,omitempty"`
	// Embedded struct due to allOf(#/components/schemas/PageMetadata)
	PageMetadata `yaml:",inline"`
}

// Incident defines model for Incident.
type Incident struct {
	CreatedAt          time.Time  `json:"createdAt"`
	ElementId          string     `json:"elementId"`
	ElementInstanceKey string     `json:"elementInstanceKey"`
	ExecutionToken     string     `json:"executionToken"`
	Key                string     `json:"key"`
	Message            string     `json:"message"`
	ProcessInstanceKey string     `json:"processInstanceKey"`
	ResolvedAt         *time.Time `json:"resolvedAt,omitempty"`
}

// IncidentPage defines model for IncidentPage.
type IncidentPage struct {
	// Embedded fields due to inline allOf schema
	Items []Incident `json:"items"`
	// Embedded struct due to allOf(#/components/schemas/PageMetadata)
	PageMetadata `yaml:",inline"`
}

// Job defines model for Job.
type Job struct {
	CreatedAt          time.Time              `json:"createdAt"`
	ElementId          string                 `json:"elementId"`
	Key                string                 `json:"key"`
	ProcessInstanceKey string                 `json:"processInstanceKey"`
	State              string                 `json:"state"`
	Type               string                 `json:"type"`
	Variables          map[string]interface{} `json:"variables"`
}

// JobPage defines model for JobPage.
type JobPage struct {
	// Embedded fields due to inline allOf schema
	Items []Job `json:"items"`
	// Embedded struct due to allOf(#/components/schemas/PageMetadata)
	PageMetadata `yaml:",inline"`
}

// PageMetadata defines model for PageMetadata.
type PageMetadata struct {
	Count  int `json:"count"`
	Offset int `json:"offset"`
	Size   int `json:"size"`
}

// PartitionProcessInstances defines model for PartitionProcessInstances.
type PartitionProcessInstances struct {
	Items     []ProcessInstance `json:"items"`
	Partition int               `json:"partition"`
}

// PartitionedPageMetadata defines model for PartitionedPageMetadata.
type PartitionedPageMetadata struct {
	// Count number of items returned
	Count int `json:"count"`
	Page  int `json:"page"`
	Size  int `json:"size"`
}

// ProcessDefinitionDetail defines model for ProcessDefinitionDetail.
type ProcessDefinitionDetail struct {
	// Embedded struct due to allOf(#/components/schemas/ProcessDefinitionSimple)
	ProcessDefinitionSimple `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	BpmnData *string `json:"bpmnData,omitempty"`
}

// ProcessDefinitionSimple defines model for ProcessDefinitionSimple.
type ProcessDefinitionSimple struct {
	BpmnProcessId string `json:"bpmnProcessId"`
	Key           string `json:"key"`
	Version       int    `json:"version"`
}

// ProcessDefinitionsPage defines model for ProcessDefinitionsPage.
type ProcessDefinitionsPage struct {
	// Embedded fields due to inline allOf schema
	Items []ProcessDefinitionSimple `json:"items"`
	// Embedded struct due to allOf(#/components/schemas/PageMetadata)
	PageMetadata `yaml:",inline"`
}

// ProcessInstance defines model for ProcessInstance.
type ProcessInstance struct {
	CreatedAt            time.Time              `json:"createdAt"`
	Key                  string                 `json:"key"`
	ProcessDefinitionKey string                 `json:"processDefinitionKey"`
	State                ProcessInstanceState   `json:"state"`
	Variables            map[string]interface{} `json:"variables"`
}

// ProcessInstanceState defines model for ProcessInstance.State.
type ProcessInstanceState string

// ProcessInstancePage defines model for ProcessInstancePage.
type ProcessInstancePage struct {
	// Embedded fields due to inline allOf schema
	Partitions []PartitionProcessInstances `json:"partitions"`
	// Embedded struct due to allOf(#/components/schemas/PartitionedPageMetadata)
	PartitionedPageMetadata `yaml:",inline"`
}

// CompleteJobJSONBody defines parameters for CompleteJob.
type CompleteJobJSONBody struct {
	JobKey    string                  `json:"jobKey"`
	Variables *map[string]interface{} `json:"variables,omitempty"`
}

// PublishMessageJSONBody defines parameters for PublishMessage.
type PublishMessageJSONBody struct {
	MessageName        string                  `json:"messageName"`
	ProcessInstanceKey string                  `json:"processInstanceKey"`
	Variables          *map[string]interface{} `json:"variables,omitempty"`
}

// GetProcessInstancesParams defines parameters for GetProcessInstances.
type GetProcessInstancesParams struct {
	ProcessDefinitionKey string `form:"processDefinitionKey" json:"processDefinitionKey"`
	Page                 *int32 `form:"page,omitempty" json:"page,omitempty"`
	Size                 *int32 `form:"size,omitempty" json:"size,omitempty"`
}

// CreateProcessInstanceJSONBody defines parameters for CreateProcessInstance.
type CreateProcessInstanceJSONBody struct {
	ProcessDefinitionKey string                  `json:"processDefinitionKey"`
	Variables            *map[string]interface{} `json:"variables,omitempty"`
}

// CompleteJobJSONRequestBody defines body for CompleteJob for application/json ContentType.
type CompleteJobJSONRequestBody CompleteJobJSONBody

// PublishMessageJSONRequestBody defines body for PublishMessage for application/json ContentType.
type PublishMessageJSONRequestBody PublishMessageJSONBody

// CreateProcessInstanceJSONRequestBody defines body for CreateProcessInstance for application/json ContentType.
type CreateProcessInstanceJSONRequestBody CreateProcessInstanceJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Resolve an incident
	// (POST /incident/{incidentKey}/resolve)
	ResolveIncident(w http.ResponseWriter, r *http.Request, incidentKey string)
	// Complete a job
	// (POST /jobs)
	CompleteJob(w http.ResponseWriter, r *http.Request)
	// Activate jobs
	// (POST /jobs/{jobType}/activate)
	ActivateJobs(w http.ResponseWriter, r *http.Request, jobType string)
	// Publish a message
	// (POST /messages)
	PublishMessage(w http.ResponseWriter, r *http.Request)
	// Get list of process definitions
	// (GET /process-definitions)
	GetProcessDefinitions(w http.ResponseWriter, r *http.Request)
	// Deploy a new process definition
	// (POST /process-definitions)
	CreateProcessDefinition(w http.ResponseWriter, r *http.Request)
	// Get process definition
	// (GET /process-definitions/{processDefinitionKey})
	GetProcessDefinition(w http.ResponseWriter, r *http.Request, processDefinitionKey string)
	// Get list of running process instances
	// (GET /process-instances)
	GetProcessInstances(w http.ResponseWriter, r *http.Request, params GetProcessInstancesParams)
	// Create a new process instance
	// (POST /process-instances)
	CreateProcessInstance(w http.ResponseWriter, r *http.Request)
	// Get state of a process instance selected by processInstanceId
	// (GET /process-instances/{processInstanceKey})
	GetProcessInstance(w http.ResponseWriter, r *http.Request, processInstanceKey string)
	// Get list of activities for a process instance
	// (GET /process-instances/{processInstanceKey}/activities)
	GetActivities(w http.ResponseWriter, r *http.Request, processInstanceKey string)
	// Get list of visited flow elements for a process instance
	// (GET /process-instances/{processInstanceKey}/history)
	GetHistory(w http.ResponseWriter, r *http.Request, processInstanceKey string)
	// Get list of incidents for a process instance
	// (GET /process-instances/{processInstanceKey}/incidents)
	GetIncidents(w http.ResponseWriter, r *http.Request, processInstanceKey string)
	// Get list of jobs for a process instance
	// (GET /process-instances/{processInstanceKey}/jobs)
	GetJobs(w http.ResponseWriter, r *http.Request, processInstanceKey string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Resolve an incident
// (POST /incident/{incidentKey}/resolve)
func (_ Unimplemented) ResolveIncident(w http.ResponseWriter, r *http.Request, incidentKey string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Complete a job
// (POST /jobs)
func (_ Unimplemented) CompleteJob(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Activate jobs
// (POST /jobs/{jobType}/activate)
func (_ Unimplemented) ActivateJobs(w http.ResponseWriter, r *http.Request, jobType string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Publish a message
// (POST /messages)
func (_ Unimplemented) PublishMessage(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get list of process definitions
// (GET /process-definitions)
func (_ Unimplemented) GetProcessDefinitions(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Deploy a new process definition
// (POST /process-definitions)
func (_ Unimplemented) CreateProcessDefinition(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get process definition
// (GET /process-definitions/{processDefinitionKey})
func (_ Unimplemented) GetProcessDefinition(w http.ResponseWriter, r *http.Request, processDefinitionKey string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get list of running process instances
// (GET /process-instances)
func (_ Unimplemented) GetProcessInstances(w http.ResponseWriter, r *http.Request, params GetProcessInstancesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new process instance
// (POST /process-instances)
func (_ Unimplemented) CreateProcessInstance(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get state of a process instance selected by processInstanceId
// (GET /process-instances/{processInstanceKey})
func (_ Unimplemented) GetProcessInstance(w http.ResponseWriter, r *http.Request, processInstanceKey string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get list of activities for a process instance
// (GET /process-instances/{processInstanceKey}/activities)
func (_ Unimplemented) GetActivities(w http.ResponseWriter, r *http.Request, processInstanceKey string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get list of visited flow elements for a process instance
// (GET /process-instances/{processInstanceKey}/history)
func (_ Unimplemented) GetHistory(w http.ResponseWriter, r *http.Request, processInstanceKey string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get list of incidents for a process instance
// (GET /process-instances/{processInstanceKey}/incidents)
func (_ Unimplemented) GetIncidents(w http.ResponseWriter, r *http.Request, processInstanceKey string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get list of jobs for a process instance
// (GET /process-instances/{processInstanceKey}/jobs)
func (_ Unimplemented) GetJobs(w http.ResponseWriter, r *http.Request, processInstanceKey string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ResolveIncident operation middleware
func (siw *ServerInterfaceWrapper) ResolveIncident(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "incidentKey" -------------
	var incidentKey string

	err = runtime.BindStyledParameterWithOptions("simple", "incidentKey", chi.URLParam(r, "incidentKey"), &incidentKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "incidentKey", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ResolveIncident(w, r, incidentKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CompleteJob operation middleware
func (siw *ServerInterfaceWrapper) CompleteJob(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CompleteJob(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ActivateJobs operation middleware
func (siw *ServerInterfaceWrapper) ActivateJobs(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "jobType" -------------
	var jobType string

	err = runtime.BindStyledParameterWithOptions("simple", "jobType", chi.URLParam(r, "jobType"), &jobType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "jobType", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ActivateJobs(w, r, jobType)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// PublishMessage operation middleware
func (siw *ServerInterfaceWrapper) PublishMessage(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PublishMessage(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProcessDefinitions operation middleware
func (siw *ServerInterfaceWrapper) GetProcessDefinitions(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProcessDefinitions(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateProcessDefinition operation middleware
func (siw *ServerInterfaceWrapper) CreateProcessDefinition(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProcessDefinition(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProcessDefinition operation middleware
func (siw *ServerInterfaceWrapper) GetProcessDefinition(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "processDefinitionKey" -------------
	var processDefinitionKey string

	err = runtime.BindStyledParameterWithOptions("simple", "processDefinitionKey", chi.URLParam(r, "processDefinitionKey"), &processDefinitionKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "processDefinitionKey", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProcessDefinition(w, r, processDefinitionKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProcessInstances operation middleware
func (siw *ServerInterfaceWrapper) GetProcessInstances(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProcessInstancesParams

	// ------------- Required query parameter "processDefinitionKey" -------------

	if paramValue := r.URL.Query().Get("processDefinitionKey"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "processDefinitionKey"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "processDefinitionKey", r.URL.Query(), &params.ProcessDefinitionKey)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "processDefinitionKey", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", r.URL.Query(), &params.Size)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "size", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProcessInstances(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateProcessInstance operation middleware
func (siw *ServerInterfaceWrapper) CreateProcessInstance(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProcessInstance(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProcessInstance operation middleware
func (siw *ServerInterfaceWrapper) GetProcessInstance(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "processInstanceKey" -------------
	var processInstanceKey string

	err = runtime.BindStyledParameterWithOptions("simple", "processInstanceKey", chi.URLParam(r, "processInstanceKey"), &processInstanceKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "processInstanceKey", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProcessInstance(w, r, processInstanceKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetActivities operation middleware
func (siw *ServerInterfaceWrapper) GetActivities(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "processInstanceKey" -------------
	var processInstanceKey string

	err = runtime.BindStyledParameterWithOptions("simple", "processInstanceKey", chi.URLParam(r, "processInstanceKey"), &processInstanceKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "processInstanceKey", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetActivities(w, r, processInstanceKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetHistory operation middleware
func (siw *ServerInterfaceWrapper) GetHistory(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "processInstanceKey" -------------
	var processInstanceKey string

	err = runtime.BindStyledParameterWithOptions("simple", "processInstanceKey", chi.URLParam(r, "processInstanceKey"), &processInstanceKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "processInstanceKey", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHistory(w, r, processInstanceKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetIncidents operation middleware
func (siw *ServerInterfaceWrapper) GetIncidents(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "processInstanceKey" -------------
	var processInstanceKey string

	err = runtime.BindStyledParameterWithOptions("simple", "processInstanceKey", chi.URLParam(r, "processInstanceKey"), &processInstanceKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "processInstanceKey", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetIncidents(w, r, processInstanceKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetJobs operation middleware
func (siw *ServerInterfaceWrapper) GetJobs(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "processInstanceKey" -------------
	var processInstanceKey string

	err = runtime.BindStyledParameterWithOptions("simple", "processInstanceKey", chi.URLParam(r, "processInstanceKey"), &processInstanceKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "processInstanceKey", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetJobs(w, r, processInstanceKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/incident/{incidentKey}/resolve", wrapper.ResolveIncident)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/jobs", wrapper.CompleteJob)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/jobs/{jobType}/activate", wrapper.ActivateJobs)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/messages", wrapper.PublishMessage)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/process-definitions", wrapper.GetProcessDefinitions)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/process-definitions", wrapper.CreateProcessDefinition)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/process-definitions/{processDefinitionKey}", wrapper.GetProcessDefinition)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/process-instances", wrapper.GetProcessInstances)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/process-instances", wrapper.CreateProcessInstance)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/process-instances/{processInstanceKey}", wrapper.GetProcessInstance)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/process-instances/{processInstanceKey}/activities", wrapper.GetActivities)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/process-instances/{processInstanceKey}/history", wrapper.GetHistory)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/process-instances/{processInstanceKey}/incidents", wrapper.GetIncidents)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/process-instances/{processInstanceKey}/jobs", wrapper.GetJobs)
	})

	return r
}

type ResolveIncidentRequestObject struct {
	IncidentKey string `json:"incidentKey"`
}

type ResolveIncidentResponseObject interface {
	VisitResolveIncidentResponse(w http.ResponseWriter) error
}

type ResolveIncident201Response struct {
}

func (response ResolveIncident201Response) VisitResolveIncidentResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type ResolveIncident400JSONResponse Error

func (response ResolveIncident400JSONResponse) VisitResolveIncidentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ResolveIncident502JSONResponse Error

func (response ResolveIncident502JSONResponse) VisitResolveIncidentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(502)

	return json.NewEncoder(w).Encode(response)
}

type CompleteJobRequestObject struct {
	Body *CompleteJobJSONRequestBody
}

type CompleteJobResponseObject interface {
	VisitCompleteJobResponse(w http.ResponseWriter) error
}

type CompleteJob201Response struct {
}

func (response CompleteJob201Response) VisitCompleteJobResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type CompleteJob400JSONResponse Error

func (response CompleteJob400JSONResponse) VisitCompleteJobResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CompleteJob502JSONResponse Error

func (response CompleteJob502JSONResponse) VisitCompleteJobResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(502)

	return json.NewEncoder(w).Encode(response)
}

type ActivateJobsRequestObject struct {
	JobType string `json:"jobType"`
}

type ActivateJobsResponseObject interface {
	VisitActivateJobsResponse(w http.ResponseWriter) error
}

type ActivateJobs200JSONResponse []Job

func (response ActivateJobs200JSONResponse) VisitActivateJobsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PublishMessageRequestObject struct {
	Body *PublishMessageJSONRequestBody
}

type PublishMessageResponseObject interface {
	VisitPublishMessageResponse(w http.ResponseWriter) error
}

type PublishMessage201Response struct {
}

func (response PublishMessage201Response) VisitPublishMessageResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type PublishMessage400JSONResponse Error

func (response PublishMessage400JSONResponse) VisitPublishMessageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PublishMessage502JSONResponse Error

func (response PublishMessage502JSONResponse) VisitPublishMessageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(502)

	return json.NewEncoder(w).Encode(response)
}

type GetProcessDefinitionsRequestObject struct {
}

type GetProcessDefinitionsResponseObject interface {
	VisitGetProcessDefinitionsResponse(w http.ResponseWriter) error
}

type GetProcessDefinitions200JSONResponse ProcessDefinitionsPage

func (response GetProcessDefinitions200JSONResponse) VisitGetProcessDefinitionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateProcessDefinitionRequestObject struct {
	Body io.Reader
}

type CreateProcessDefinitionResponseObject interface {
	VisitCreateProcessDefinitionResponse(w http.ResponseWriter) error
}

type CreateProcessDefinition200JSONResponse struct {
	ProcessDefinitionKey string `json:"processDefinitionKey"`
}

func (response CreateProcessDefinition200JSONResponse) VisitCreateProcessDefinitionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateProcessDefinition502JSONResponse Error

func (response CreateProcessDefinition502JSONResponse) VisitCreateProcessDefinitionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(502)

	return json.NewEncoder(w).Encode(response)
}

type GetProcessDefinitionRequestObject struct {
	ProcessDefinitionKey string `json:"processDefinitionKey"`
}

type GetProcessDefinitionResponseObject interface {
	VisitGetProcessDefinitionResponse(w http.ResponseWriter) error
}

type GetProcessDefinition200JSONResponse ProcessDefinitionDetail

func (response GetProcessDefinition200JSONResponse) VisitGetProcessDefinitionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProcessDefinition400JSONResponse Error

func (response GetProcessDefinition400JSONResponse) VisitGetProcessDefinitionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetProcessDefinition500JSONResponse Error

func (response GetProcessDefinition500JSONResponse) VisitGetProcessDefinitionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetProcessInstancesRequestObject struct {
	Params GetProcessInstancesParams
}

type GetProcessInstancesResponseObject interface {
	VisitGetProcessInstancesResponse(w http.ResponseWriter) error
}

type GetProcessInstances200JSONResponse ProcessInstancePage

func (response GetProcessInstances200JSONResponse) VisitGetProcessInstancesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProcessInstances400JSONResponse Error

func (response GetProcessInstances400JSONResponse) VisitGetProcessInstancesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetProcessInstances500JSONResponse Error

func (response GetProcessInstances500JSONResponse) VisitGetProcessInstancesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetProcessInstances502JSONResponse Error

func (response GetProcessInstances502JSONResponse) VisitGetProcessInstancesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(502)

	return json.NewEncoder(w).Encode(response)
}

type CreateProcessInstanceRequestObject struct {
	Body *CreateProcessInstanceJSONRequestBody
}

type CreateProcessInstanceResponseObject interface {
	VisitCreateProcessInstanceResponse(w http.ResponseWriter) error
}

type CreateProcessInstance200JSONResponse ProcessInstance

func (response CreateProcessInstance200JSONResponse) VisitCreateProcessInstanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateProcessInstance400JSONResponse Error

func (response CreateProcessInstance400JSONResponse) VisitCreateProcessInstanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateProcessInstance500JSONResponse Error

func (response CreateProcessInstance500JSONResponse) VisitCreateProcessInstanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateProcessInstance502JSONResponse Error

func (response CreateProcessInstance502JSONResponse) VisitCreateProcessInstanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(502)

	return json.NewEncoder(w).Encode(response)
}

type GetProcessInstanceRequestObject struct {
	ProcessInstanceKey string `json:"processInstanceKey"`
}

type GetProcessInstanceResponseObject interface {
	VisitGetProcessInstanceResponse(w http.ResponseWriter) error
}

type GetProcessInstance200JSONResponse ProcessInstance

func (response GetProcessInstance200JSONResponse) VisitGetProcessInstanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProcessInstance400JSONResponse Error

func (response GetProcessInstance400JSONResponse) VisitGetProcessInstanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetProcessInstance500JSONResponse Error

func (response GetProcessInstance500JSONResponse) VisitGetProcessInstanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetProcessInstance502JSONResponse Error

func (response GetProcessInstance502JSONResponse) VisitGetProcessInstanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(502)

	return json.NewEncoder(w).Encode(response)
}

type GetActivitiesRequestObject struct {
	ProcessInstanceKey string `json:"processInstanceKey"`
}

type GetActivitiesResponseObject interface {
	VisitGetActivitiesResponse(w http.ResponseWriter) error
}

type GetActivities200JSONResponse ActivityPage

func (response GetActivities200JSONResponse) VisitGetActivitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetActivities400JSONResponse Error

func (response GetActivities400JSONResponse) VisitGetActivitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetActivities500JSONResponse Error

func (response GetActivities500JSONResponse) VisitGetActivitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetActivities502JSONResponse Error

func (response GetActivities502JSONResponse) VisitGetActivitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(502)

	return json.NewEncoder(w).Encode(response)
}

type GetHistoryRequestObject struct {
	ProcessInstanceKey string `json:"processInstanceKey"`
}

type GetHistoryResponseObject interface {
	VisitGetHistoryResponse(w http.ResponseWriter) error
}

type GetHistory200JSONResponse FlowElementHistoryPage

func (response GetHistory200JSONResponse) VisitGetHistoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetHistory400JSONResponse Error

func (response GetHistory400JSONResponse) VisitGetHistoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetHistory500JSONResponse Error

func (response GetHistory500JSONResponse) VisitGetHistoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetHistory502JSONResponse Error

func (response GetHistory502JSONResponse) VisitGetHistoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(502)

	return json.NewEncoder(w).Encode(response)
}

type GetIncidentsRequestObject struct {
	ProcessInstanceKey string `json:"processInstanceKey"`
}

type GetIncidentsResponseObject interface {
	VisitGetIncidentsResponse(w http.ResponseWriter) error
}

type GetIncidents200JSONResponse IncidentPage

func (response GetIncidents200JSONResponse) VisitGetIncidentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetIncidents400JSONResponse Error

func (response GetIncidents400JSONResponse) VisitGetIncidentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetIncidents500JSONResponse Error

func (response GetIncidents500JSONResponse) VisitGetIncidentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetJobsRequestObject struct {
	ProcessInstanceKey string `json:"processInstanceKey"`
}

type GetJobsResponseObject interface {
	VisitGetJobsResponse(w http.ResponseWriter) error
}

type GetJobs200JSONResponse JobPage

func (response GetJobs200JSONResponse) VisitGetJobsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetJobs400JSONResponse Error

func (response GetJobs400JSONResponse) VisitGetJobsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetJobs500JSONResponse Error

func (response GetJobs500JSONResponse) VisitGetJobsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetJobs502JSONResponse Error

func (response GetJobs502JSONResponse) VisitGetJobsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(502)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Resolve an incident
	// (POST /incident/{incidentKey}/resolve)
	ResolveIncident(ctx context.Context, request ResolveIncidentRequestObject) (ResolveIncidentResponseObject, error)
	// Complete a job
	// (POST /jobs)
	CompleteJob(ctx context.Context, request CompleteJobRequestObject) (CompleteJobResponseObject, error)
	// Activate jobs
	// (POST /jobs/{jobType}/activate)
	ActivateJobs(ctx context.Context, request ActivateJobsRequestObject) (ActivateJobsResponseObject, error)
	// Publish a message
	// (POST /messages)
	PublishMessage(ctx context.Context, request PublishMessageRequestObject) (PublishMessageResponseObject, error)
	// Get list of process definitions
	// (GET /process-definitions)
	GetProcessDefinitions(ctx context.Context, request GetProcessDefinitionsRequestObject) (GetProcessDefinitionsResponseObject, error)
	// Deploy a new process definition
	// (POST /process-definitions)
	CreateProcessDefinition(ctx context.Context, request CreateProcessDefinitionRequestObject) (CreateProcessDefinitionResponseObject, error)
	// Get process definition
	// (GET /process-definitions/{processDefinitionKey})
	GetProcessDefinition(ctx context.Context, request GetProcessDefinitionRequestObject) (GetProcessDefinitionResponseObject, error)
	// Get list of running process instances
	// (GET /process-instances)
	GetProcessInstances(ctx context.Context, request GetProcessInstancesRequestObject) (GetProcessInstancesResponseObject, error)
	// Create a new process instance
	// (POST /process-instances)
	CreateProcessInstance(ctx context.Context, request CreateProcessInstanceRequestObject) (CreateProcessInstanceResponseObject, error)
	// Get state of a process instance selected by processInstanceId
	// (GET /process-instances/{processInstanceKey})
	GetProcessInstance(ctx context.Context, request GetProcessInstanceRequestObject) (GetProcessInstanceResponseObject, error)
	// Get list of activities for a process instance
	// (GET /process-instances/{processInstanceKey}/activities)
	GetActivities(ctx context.Context, request GetActivitiesRequestObject) (GetActivitiesResponseObject, error)
	// Get list of visited flow elements for a process instance
	// (GET /process-instances/{processInstanceKey}/history)
	GetHistory(ctx context.Context, request GetHistoryRequestObject) (GetHistoryResponseObject, error)
	// Get list of incidents for a process instance
	// (GET /process-instances/{processInstanceKey}/incidents)
	GetIncidents(ctx context.Context, request GetIncidentsRequestObject) (GetIncidentsResponseObject, error)
	// Get list of jobs for a process instance
	// (GET /process-instances/{processInstanceKey}/jobs)
	GetJobs(ctx context.Context, request GetJobsRequestObject) (GetJobsResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ResolveIncident operation middleware
func (sh *strictHandler) ResolveIncident(w http.ResponseWriter, r *http.Request, incidentKey string) {
	var request ResolveIncidentRequestObject

	request.IncidentKey = incidentKey

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ResolveIncident(ctx, request.(ResolveIncidentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ResolveIncident")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ResolveIncidentResponseObject); ok {
		if err := validResponse.VisitResolveIncidentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CompleteJob operation middleware
func (sh *strictHandler) CompleteJob(w http.ResponseWriter, r *http.Request) {
	var request CompleteJobRequestObject

	var body CompleteJobJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CompleteJob(ctx, request.(CompleteJobRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CompleteJob")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CompleteJobResponseObject); ok {
		if err := validResponse.VisitCompleteJobResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ActivateJobs operation middleware
func (sh *strictHandler) ActivateJobs(w http.ResponseWriter, r *http.Request, jobType string) {
	var request ActivateJobsRequestObject

	request.JobType = jobType

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ActivateJobs(ctx, request.(ActivateJobsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ActivateJobs")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ActivateJobsResponseObject); ok {
		if err := validResponse.VisitActivateJobsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PublishMessage operation middleware
func (sh *strictHandler) PublishMessage(w http.ResponseWriter, r *http.Request) {
	var request PublishMessageRequestObject

	var body PublishMessageJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PublishMessage(ctx, request.(PublishMessageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PublishMessage")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PublishMessageResponseObject); ok {
		if err := validResponse.VisitPublishMessageResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProcessDefinitions operation middleware
func (sh *strictHandler) GetProcessDefinitions(w http.ResponseWriter, r *http.Request) {
	var request GetProcessDefinitionsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProcessDefinitions(ctx, request.(GetProcessDefinitionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProcessDefinitions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProcessDefinitionsResponseObject); ok {
		if err := validResponse.VisitGetProcessDefinitionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateProcessDefinition operation middleware
func (sh *strictHandler) CreateProcessDefinition(w http.ResponseWriter, r *http.Request) {
	var request CreateProcessDefinitionRequestObject

	request.Body = r.Body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProcessDefinition(ctx, request.(CreateProcessDefinitionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProcessDefinition")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateProcessDefinitionResponseObject); ok {
		if err := validResponse.VisitCreateProcessDefinitionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProcessDefinition operation middleware
func (sh *strictHandler) GetProcessDefinition(w http.ResponseWriter, r *http.Request, processDefinitionKey string) {
	var request GetProcessDefinitionRequestObject

	request.ProcessDefinitionKey = processDefinitionKey

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProcessDefinition(ctx, request.(GetProcessDefinitionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProcessDefinition")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProcessDefinitionResponseObject); ok {
		if err := validResponse.VisitGetProcessDefinitionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProcessInstances operation middleware
func (sh *strictHandler) GetProcessInstances(w http.ResponseWriter, r *http.Request, params GetProcessInstancesParams) {
	var request GetProcessInstancesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProcessInstances(ctx, request.(GetProcessInstancesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProcessInstances")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProcessInstancesResponseObject); ok {
		if err := validResponse.VisitGetProcessInstancesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateProcessInstance operation middleware
func (sh *strictHandler) CreateProcessInstance(w http.ResponseWriter, r *http.Request) {
	var request CreateProcessInstanceRequestObject

	var body CreateProcessInstanceJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProcessInstance(ctx, request.(CreateProcessInstanceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProcessInstance")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateProcessInstanceResponseObject); ok {
		if err := validResponse.VisitCreateProcessInstanceResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProcessInstance operation middleware
func (sh *strictHandler) GetProcessInstance(w http.ResponseWriter, r *http.Request, processInstanceKey string) {
	var request GetProcessInstanceRequestObject

	request.ProcessInstanceKey = processInstanceKey

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProcessInstance(ctx, request.(GetProcessInstanceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProcessInstance")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProcessInstanceResponseObject); ok {
		if err := validResponse.VisitGetProcessInstanceResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetActivities operation middleware
func (sh *strictHandler) GetActivities(w http.ResponseWriter, r *http.Request, processInstanceKey string) {
	var request GetActivitiesRequestObject

	request.ProcessInstanceKey = processInstanceKey

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetActivities(ctx, request.(GetActivitiesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetActivities")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetActivitiesResponseObject); ok {
		if err := validResponse.VisitGetActivitiesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetHistory operation middleware
func (sh *strictHandler) GetHistory(w http.ResponseWriter, r *http.Request, processInstanceKey string) {
	var request GetHistoryRequestObject

	request.ProcessInstanceKey = processInstanceKey

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetHistory(ctx, request.(GetHistoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHistory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetHistoryResponseObject); ok {
		if err := validResponse.VisitGetHistoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetIncidents operation middleware
func (sh *strictHandler) GetIncidents(w http.ResponseWriter, r *http.Request, processInstanceKey string) {
	var request GetIncidentsRequestObject

	request.ProcessInstanceKey = processInstanceKey

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetIncidents(ctx, request.(GetIncidentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetIncidents")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetIncidentsResponseObject); ok {
		if err := validResponse.VisitGetIncidentsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetJobs operation middleware
func (sh *strictHandler) GetJobs(w http.ResponseWriter, r *http.Request, processInstanceKey string) {
	var request GetJobsRequestObject

	request.ProcessInstanceKey = processInstanceKey

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetJobs(ctx, request.(GetJobsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetJobs")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetJobsResponseObject); ok {
		if err := validResponse.VisitGetJobsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xaW3PTOBv+Kxp932Vap7A7w+SubAtbWKADvWN6odhvUgVbMpISyHby33d08Fl2bJKG",
	"sJurdmxZeg/P856iRxzyJOUMmJJ48ohl+AAJMf9ehoquqFrr/1PBUxCKgnkzTRN2HUMCTN2tU9CPlPmL",
	"pRKUzfFmhEMBREF0qfTbGRcJUXiCI6LgTNEE8Kj5CdgtbyLvhl9g7X2eCh6ClFcwo4wqytnb7oU3TCrC",
	"QmhbJhVRPpU2ucR8uoBQ6bWZiW7J3HxC4vjDDE8+1w1GFSTVf/4vYIYn+H9BYf7A2T7IDV8cSYQga68M",
	"3Vtpwd6BIhFRBG/uPSpcC8FF08Uhj/x+TUBKp23TQAK+LqmACE8+2x2K9b6zX8X8m8PRn1QqLjxYOzSO",
	"uuGx6aXFfuHgsdIhgHHDQhoBUwdwSfZ2CzPhO4RLzfA7/gXYIOe2o7Z3XBAgebwaonaNEFo2r65l83jF",
	"KeQvx9WGQbq8uF9I5tjwAbGss93tfv/ofMOnxx4r2lNJJofnxYoISqax1aemdSeeoky7FgRZWar4KQ5r",
	"MfF+UaN99tMAU1nhSXdLG+ncd5QpmIPQH/LZTELLO0n/Bt+bmlJuC7d+5E7zSymUKWJuqz6UTZGH2b62",
	"X9MPI5xmZ/fQqFg7andZoQ1EPc0fgQwFTa0UmC2TKQjEZ8icgQSopWAQFUQu+SKtxvfhXkptgN3uo3rB",
	"eQWK0LjKkx6+KDb4RJM0BgPyZqF95Sy2tRLpJas7ylvSZxgZFgtXIGQ/0NiAla0f1c7sJb7cb0Rq98TP",
	"ilI1mu4jxe3cOOVpDNgy0eoT3aBYkmhzKctIEAllWriSYXZIbF7xqvkry2ndeaxm020IykPbABi1Ru1t",
	"QCod9gNo8kdXD7D0sZTNeDPEfrz+dIcub2/QjAsU0+mZJuUZsDllBkxU6WiBX96+e4+uzVP0IQV2eXtT",
	"ovIEj88vzscmW6bASErxBD8/H5+PtR+JejAWDKirGoPH7L+3sN4ErrA2tufSAFv7g2gJdSzCH+2CvOg0",
	"qYokoEBI40CqRdDn4BFmJLExKD8Bl02uxBJGbsrhi6r3ptBPOZMWDc/GF02jZZKgrCfQmv82HttUxpTr",
	"mkiaxjQ0egQLaUNkcXKXa21TbtxWPfkliZBWBqSB9u/jZ09/5itCY4iQ4khARAWEKhPBPjPWotMYENMt",
	"v95ALpOE6G4+8x0iDNHCf4rMpYmj7pHE9/qzYMGnsh0Hf7hoo+tI61OQ6iWP1oNsUGX7gk/bwt6AiOV2",
	"8ROvCr5NH4C94VNUxNYTuFrAlQECEbQwmMhwZXBUQCp4XPDp3TqFTWBSl0tnfpRduhVv9B59Qo3be8cw",
	"M8y/O/RbDRdoRVFml6hm4swaaGHN4bGwm010EPd2OY2pfHiXDzH2w1138Hvjhh/v0gfwvGs2Y8TYWwRw",
	"tkLSTVlOAcAXABywEEHFgCxDaA5Li1LnurOo6CW0zHPw4PU1qGbngXek7KA+xPY5HnP9RaXSDbFTB5XV",
	"qdrmNSgUd6wuLOUzzb3mjz8LmwK8IXFvVn9P4qph8i5Gv2kOUXvwZ7xDEOnZBfkDQfUrP/mr/rtteAJF",
	"kMZ8bfP88VPuykiLCGLwzYOrrbBq4WLw6DPpZhBFe2XrlrbycKl7UBxwo6VeQPp5aeIAZ94wBYKRGEkQ",
	"KxAI3MJ6xNsRkbQ8b90CvKLL9+Pu6xLEeo/AG7Xs68aW+XcRzMgyVnhyMSpiK2Xq+TPP3LRtVzcF9e06",
	"7rPtAVhSGeh0pEqxZIyyeQ4NWp7O/NcIc/AUE/I41hkmIoqgmeBJI8F0FS7tvmuyunjXs3jJp6z7akh6",
	"T1SHtxx9Ko39lkmDfk1qz0+ZV5Ab3J5Id6SzFOOeWl1HC4Z0sc2bQfOKrtQtbwak1SHVXLUhP6parosj",
	"n5Q2OZ8h0rT4iSbHkJs8qUm2Ow1J0PtBhKZrVIOmvaCxFxLZISbNsk4bny6LVb84lSrXLDsqvZJdTvQ5",
	"UvrEDV+Znx7J0+Wc4KG4W9rGlexi5S9OlJarqCfK/Csos6KS6uQyi/k35O79PT17it9oO/hzky/6xRlU",
	"uS/bwZvCKqepW4HQ3CpPjsrspkAbIHv/envEWMwu4HbA0JjhFLiPPHBrL/0gI/SeRnML4KWI8QQ/KJVO",
	"giDmIYkfuFSTF+MX42B1Ya9+2e0eawCvDL03o8br0lT0fvNPAAAA//8WeTteFjYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
