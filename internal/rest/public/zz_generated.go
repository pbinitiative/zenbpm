// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// Defines values for JobState.
const (
	JobStateActive     JobState = "active"
	JobStateCompleted  JobState = "completed"
	JobStateFailed     JobState = "failed"
	JobStateTerminated JobState = "terminated"
)

// Defines values for ProcessInstanceState.
const (
	ProcessInstanceStateActive     ProcessInstanceState = "active"
	ProcessInstanceStateCompleted  ProcessInstanceState = "completed"
	ProcessInstanceStateTerminated ProcessInstanceState = "terminated"
)

// Defines values for EvaluateDecisionJSONBodyBindingType.
const (
	Deployment EvaluateDecisionJSONBodyBindingType = "deployment"
	Latest     EvaluateDecisionJSONBodyBindingType = "latest"
	VersionTag EvaluateDecisionJSONBodyBindingType = "versionTag"
)

// Activity defines model for Activity.
type Activity struct {
	BpmnElementType      string    `json:"bpmnElementType"`
	CreatedAt            time.Time `json:"createdAt"`
	ElementId            string    `json:"elementId"`
	Key                  string    `json:"key"`
	ProcessDefinitionKey string    `json:"processDefinitionKey"`
	ProcessInstanceKey   string    `json:"processInstanceKey"`
	State                string    `json:"state"`
}

// ActivityPage defines model for ActivityPage.
type ActivityPage struct {
	// Embedded fields due to inline allOf schema
	Items *[]Activity `json:"items,omitempty"`
	// Embedded struct due to allOf(#/components/schemas/PageMetadata)
	PageMetadata `yaml:",inline"`
}

// DecisionDefinitionDetail defines model for DecisionDefinitionDetail.
type DecisionDefinitionDetail struct {
	// Embedded struct due to allOf(#/components/schemas/DecisionDefinitionSimple)
	DecisionDefinitionSimple `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	DmnData *string `json:"dmnData,omitempty"`
}

// DecisionDefinitionSimple defines model for DecisionDefinitionSimple.
type DecisionDefinitionSimple struct {
	DecisionDefinitionId string `json:"decisionDefinitionId"`
	Key                  string `json:"key"`
	Version              int    `json:"version"`
}

// DecisionDefinitionsPage defines model for DecisionDefinitionsPage.
type DecisionDefinitionsPage struct {
	// Embedded fields due to inline allOf schema
	Items []DecisionDefinitionSimple `json:"items"`
	// Embedded struct due to allOf(#/components/schemas/PageMetadata)
	PageMetadata `yaml:",inline"`
}

// Error defines model for Error.
type Error struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

// EvaluatedDRDResult defines model for EvaluatedDRDResult.
type EvaluatedDRDResult struct {
	DecisionOutput     map[string]interface{}    `json:"decisionOutput"`
	EvaluatedDecisions []EvaluatedDecisionResult `json:"evaluatedDecisions"`
}

// EvaluatedDecisionInput defines model for EvaluatedDecisionInput.
type EvaluatedDecisionInput struct {
	InputExpression string                 `json:"inputExpression"`
	InputId         string                 `json:"inputId"`
	InputName       string                 `json:"inputName"`
	InputValue      map[string]interface{} `json:"inputValue"`
}

// EvaluatedDecisionOutput defines model for EvaluatedDecisionOutput.
type EvaluatedDecisionOutput struct {
	OutputId    string                 `json:"outputId"`
	OutputName  string                 `json:"outputName"`
	OutputValue map[string]interface{} `json:"outputValue"`
}

// EvaluatedDecisionResult defines model for EvaluatedDecisionResult.
type EvaluatedDecisionResult struct {
	DecisionDefinitionId      string                   `json:"decisionDefinitionId"`
	DecisionDefinitionKey     string                   `json:"decisionDefinitionKey"`
	DecisionDefinitionVersion int                      `json:"decisionDefinitionVersion"`
	DecisionId                string                   `json:"decisionId"`
	DecisionName              string                   `json:"decisionName"`
	DecisionOutput            map[string]interface{}   `json:"decisionOutput"`
	DecisionType              string                   `json:"decisionType"`
	EvaluatedInputs           []EvaluatedDecisionInput `json:"evaluatedInputs"`
	MatchedRules              []EvaluatedDecisionRule  `json:"matchedRules"`
}

// EvaluatedDecisionRule defines model for EvaluatedDecisionRule.
type EvaluatedDecisionRule struct {
	EvaluatedOutputs []EvaluatedDecisionOutput `json:"evaluatedOutputs"`
	RuleId           string                    `json:"ruleId"`
	RuleIndex        int                       `json:"ruleIndex"`
}

// FlowElementHistory defines model for FlowElementHistory.
type FlowElementHistory struct {
	CreatedAt          time.Time `json:"createdAt"`
	ElementId          string    `json:"elementId"`
	Key                string    `json:"key"`
	ProcessInstanceKey string    `json:"processInstanceKey"`
}

// FlowElementHistoryPage defines model for FlowElementHistoryPage.
type FlowElementHistoryPage struct {
	// Embedded fields due to inline allOf schema
	Items *[]FlowElementHistory `json:"items,omitempty"`
	// Embedded struct due to allOf(#/components/schemas/PageMetadata)
	PageMetadata `yaml:",inline"`
}

// Incident defines model for Incident.
type Incident struct {
	CreatedAt          time.Time  `json:"createdAt"`
	ElementId          string     `json:"elementId"`
	ElementInstanceKey string     `json:"elementInstanceKey"`
	ExecutionToken     string     `json:"executionToken"`
	Key                string     `json:"key"`
	Message            string     `json:"message"`
	ProcessInstanceKey string     `json:"processInstanceKey"`
	ResolvedAt         *time.Time `json:"resolvedAt,omitempty"`
}

// IncidentPage defines model for IncidentPage.
type IncidentPage struct {
	// Embedded fields due to inline allOf schema
	Items []Incident `json:"items"`
	// Embedded struct due to allOf(#/components/schemas/PageMetadata)
	PageMetadata `yaml:",inline"`
}

// Job defines model for Job.
type Job struct {
	CreatedAt          time.Time              `json:"createdAt"`
	ElementId          string                 `json:"elementId"`
	Key                string                 `json:"key"`
	ProcessInstanceKey string                 `json:"processInstanceKey"`
	State              JobState               `json:"state"`
	Type               string                 `json:"type"`
	Variables          map[string]interface{} `json:"variables"`
}

// JobPage defines model for JobPage.
type JobPage struct {
	// Embedded fields due to inline allOf schema
	Items []Job `json:"items"`
	// Embedded struct due to allOf(#/components/schemas/PageMetadata)
	PageMetadata `yaml:",inline"`
}

// JobPartitionPage defines model for JobPartitionPage.
type JobPartitionPage struct {
	// Embedded fields due to inline allOf schema
	Partitions []PartitionJobs `json:"partitions"`
	// Embedded struct due to allOf(#/components/schemas/PartitionedPageMetadata)
	PartitionedPageMetadata `yaml:",inline"`
}

// JobState defines model for JobState.
type JobState string

// PageMetadata defines model for PageMetadata.
type PageMetadata struct {
	// Count Number of items returned in the current page
	Count int `json:"count"`

	// Page Current page number (1-based indexing)
	Page int `json:"page"`

	// Size Number of items per page
	Size int `json:"size"`

	// TotalCount Total number of items available
	TotalCount int `json:"totalCount"`
}

// PartitionJobs defines model for PartitionJobs.
type PartitionJobs struct {
	Items     []Job `json:"items"`
	Partition int   `json:"partition"`
}

// PartitionProcessInstances defines model for PartitionProcessInstances.
type PartitionProcessInstances struct {
	Items     []ProcessInstance `json:"items"`
	Partition int               `json:"partition"`
}

// PartitionedPageMetadata defines model for PartitionedPageMetadata.
type PartitionedPageMetadata struct {
	// Count Number of items returned in the current page
	Count int `json:"count"`

	// Page Current page number (1-based indexing)
	Page int `json:"page"`

	// Size Number of items per page
	Size int `json:"size"`

	// TotalCount Total number of items available
	TotalCount int `json:"totalCount"`
}

// ProcessDefinitionDetail defines model for ProcessDefinitionDetail.
type ProcessDefinitionDetail struct {
	// Embedded struct due to allOf(#/components/schemas/ProcessDefinitionSimple)
	ProcessDefinitionSimple `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	BpmnData *string `json:"bpmnData,omitempty"`
}

// ProcessDefinitionSimple defines model for ProcessDefinitionSimple.
type ProcessDefinitionSimple struct {
	BpmnProcessId string `json:"bpmnProcessId"`
	Key           string `json:"key"`
	Version       int    `json:"version"`
}

// ProcessDefinitionsPage defines model for ProcessDefinitionsPage.
type ProcessDefinitionsPage struct {
	// Embedded fields due to inline allOf schema
	Items []ProcessDefinitionSimple `json:"items"`
	// Embedded struct due to allOf(#/components/schemas/PageMetadata)
	PageMetadata `yaml:",inline"`
}

// ProcessInstance defines model for ProcessInstance.
type ProcessInstance struct {
	CreatedAt            time.Time              `json:"createdAt"`
	Key                  string                 `json:"key"`
	ProcessDefinitionKey string                 `json:"processDefinitionKey"`
	State                ProcessInstanceState   `json:"state"`
	Variables            map[string]interface{} `json:"variables"`
}

// ProcessInstanceState defines model for ProcessInstance.State.
type ProcessInstanceState string

// ProcessInstancePage defines model for ProcessInstancePage.
type ProcessInstancePage struct {
	// Embedded fields due to inline allOf schema
	Partitions []PartitionProcessInstances `json:"partitions"`
	// Embedded struct due to allOf(#/components/schemas/PartitionedPageMetadata)
	PartitionedPageMetadata `yaml:",inline"`
}

// GetDecisionDefinitionsParams defines parameters for GetDecisionDefinitions.
type GetDecisionDefinitionsParams struct {
	// Page Page number (1-based indexing)
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// Size Number of items per page (max 100)
	Size *int32 `form:"size,omitempty" json:"size,omitempty"`
}

// EvaluateDecisionJSONBody defines parameters for EvaluateDecision.
type EvaluateDecisionJSONBody struct {
	BindingType EvaluateDecisionJSONBodyBindingType `json:"bindingType"`

	// DecisionDefinitionId Can be used in combination with bindingType latest
	DecisionDefinitionId *string                 `json:"decisionDefinitionId,omitempty"`
	Variables            *map[string]interface{} `json:"variables,omitempty"`

	// VersionTag Is used in combination with bindingType versionTag
	VersionTag *string `json:"versionTag,omitempty"`
}

// EvaluateDecisionJSONBodyBindingType defines parameters for EvaluateDecision.
type EvaluateDecisionJSONBodyBindingType string

// GetJobsParams defines parameters for GetJobs.
type GetJobsParams struct {
	JobType *string   `form:"jobType,omitempty" json:"jobType,omitempty"`
	State   *JobState `form:"state,omitempty" json:"state,omitempty"`
	Page    *int32    `form:"page,omitempty" json:"page,omitempty"`
	Size    *int32    `form:"size,omitempty" json:"size,omitempty"`
}

// CompleteJobJSONBody defines parameters for CompleteJob.
type CompleteJobJSONBody struct {
	JobKey    string                  `json:"jobKey"`
	Variables *map[string]interface{} `json:"variables,omitempty"`
}

// PublishMessageJSONBody defines parameters for PublishMessage.
type PublishMessageJSONBody struct {
	CorrelationKey string                  `json:"correlationKey"`
	MessageName    string                  `json:"messageName"`
	Variables      *map[string]interface{} `json:"variables,omitempty"`
}

// GetProcessDefinitionsParams defines parameters for GetProcessDefinitions.
type GetProcessDefinitionsParams struct {
	// Page Page number (1-based indexing)
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// Size Number of items per page (max 100)
	Size *int32 `form:"size,omitempty" json:"size,omitempty"`
}

// GetProcessInstancesParams defines parameters for GetProcessInstances.
type GetProcessInstancesParams struct {
	// ProcessDefinitionKey Key of the process definition
	ProcessDefinitionKey string `form:"processDefinitionKey" json:"processDefinitionKey"`

	// Page Page number (1-based indexing)
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// Size Number of items per page
	Size *int32 `form:"size,omitempty" json:"size,omitempty"`
}

// CreateProcessInstanceJSONBody defines parameters for CreateProcessInstance.
type CreateProcessInstanceJSONBody struct {
	ProcessDefinitionKey string                  `json:"processDefinitionKey"`
	Variables            *map[string]interface{} `json:"variables,omitempty"`
}

// CreateProcessInstanceAtCustomStartPointJSONBody defines parameters for CreateProcessInstanceAtCustomStartPoint.
type CreateProcessInstanceAtCustomStartPointJSONBody struct {
	ProcessDefinitionKey string `json:"processDefinitionKey"`

	// StartingFlowNodeId Allows for a start at chosen flow node
	StartingFlowNodeId string                  `json:"startingFlowNodeId"`
	Variables          *map[string]interface{} `json:"variables,omitempty"`
}

// GetActivitiesParams defines parameters for GetActivities.
type GetActivitiesParams struct {
	// Page Page number (1-based indexing)
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// Size Number of items per page (max 100)
	Size *int32 `form:"size,omitempty" json:"size,omitempty"`
}

// GetHistoryParams defines parameters for GetHistory.
type GetHistoryParams struct {
	// Page Page number (1-based indexing)
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// Size Number of items per page (max 100)
	Size *int32 `form:"size,omitempty" json:"size,omitempty"`
}

// GetIncidentsParams defines parameters for GetIncidents.
type GetIncidentsParams struct {
	// Page Page number (1-based indexing)
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// Size Number of items per page (max 100)
	Size *int32 `form:"size,omitempty" json:"size,omitempty"`
}

// GetProcessInstanceJobsParams defines parameters for GetProcessInstanceJobs.
type GetProcessInstanceJobsParams struct {
	// Page Page number (1-based indexing)
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// Size Number of items per page (max 100)
	Size *int32 `form:"size,omitempty" json:"size,omitempty"`
}

// EvaluateDecisionJSONRequestBody defines body for EvaluateDecision for application/json ContentType.
type EvaluateDecisionJSONRequestBody EvaluateDecisionJSONBody

// CompleteJobJSONRequestBody defines body for CompleteJob for application/json ContentType.
type CompleteJobJSONRequestBody CompleteJobJSONBody

// PublishMessageJSONRequestBody defines body for PublishMessage for application/json ContentType.
type PublishMessageJSONRequestBody PublishMessageJSONBody

// CreateProcessInstanceJSONRequestBody defines body for CreateProcessInstance for application/json ContentType.
type CreateProcessInstanceJSONRequestBody CreateProcessInstanceJSONBody

// CreateProcessInstanceAtCustomStartPointJSONRequestBody defines body for CreateProcessInstanceAtCustomStartPoint for application/json ContentType.
type CreateProcessInstanceAtCustomStartPointJSONRequestBody CreateProcessInstanceAtCustomStartPointJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get list of decision definitions
	// (GET /decision-definitions)
	GetDecisionDefinitions(w http.ResponseWriter, r *http.Request, params GetDecisionDefinitionsParams)
	// Deploy a new decision definition
	// (POST /decision-definitions)
	CreateDecisionDefinition(w http.ResponseWriter, r *http.Request)
	// Get decision definition
	// (GET /decision-definitions/{decisionDefinitionKey})
	GetDecisionDefinition(w http.ResponseWriter, r *http.Request, decisionDefinitionKey string)
	// Evaluate latest version of decision directly in engine
	// (POST /decisions/{decisionId}/evaluate)
	EvaluateDecision(w http.ResponseWriter, r *http.Request, decisionId string)
	// Resolve an incident
	// (POST /incidents/{incidentKey}/resolve)
	ResolveIncident(w http.ResponseWriter, r *http.Request, incidentKey string)
	// Get list of jobs on partitions
	// (GET /jobs)
	GetJobs(w http.ResponseWriter, r *http.Request, params GetJobsParams)
	// Complete a job
	// (POST /jobs)
	CompleteJob(w http.ResponseWriter, r *http.Request)
	// Publish a message
	// (POST /messages)
	PublishMessage(w http.ResponseWriter, r *http.Request)
	// Get list of process definitions
	// (GET /process-definitions)
	GetProcessDefinitions(w http.ResponseWriter, r *http.Request, params GetProcessDefinitionsParams)
	// Deploy a new process definition
	// (POST /process-definitions)
	CreateProcessDefinition(w http.ResponseWriter, r *http.Request)
	// Get process definition
	// (GET /process-definitions/{processDefinitionKey})
	GetProcessDefinition(w http.ResponseWriter, r *http.Request, processDefinitionKey string)
	// Get list of running process instances
	// (GET /process-instances)
	GetProcessInstances(w http.ResponseWriter, r *http.Request, params GetProcessInstancesParams)
	// Create a new process instance
	// (POST /process-instances)
	CreateProcessInstance(w http.ResponseWriter, r *http.Request)
	// Create a new process instance starting at chosen flow node
	// (POST /process-instances/custom-start-point)
	CreateProcessInstanceAtCustomStartPoint(w http.ResponseWriter, r *http.Request)
	// Get state of a process instance selected by processInstanceKey
	// (GET /process-instances/{processInstanceKey})
	GetProcessInstance(w http.ResponseWriter, r *http.Request, processInstanceKey string)
	// Get list of activities for a process instance
	// (GET /process-instances/{processInstanceKey}/activities)
	GetActivities(w http.ResponseWriter, r *http.Request, processInstanceKey string, params GetActivitiesParams)
	// Get list of visited flow elements for a process instance
	// (GET /process-instances/{processInstanceKey}/history)
	GetHistory(w http.ResponseWriter, r *http.Request, processInstanceKey string, params GetHistoryParams)
	// Get list of incidents for a process instance
	// (GET /process-instances/{processInstanceKey}/incidents)
	GetIncidents(w http.ResponseWriter, r *http.Request, processInstanceKey string, params GetIncidentsParams)
	// Get list of jobs for a process instance
	// (GET /process-instances/{processInstanceKey}/jobs)
	GetProcessInstanceJobs(w http.ResponseWriter, r *http.Request, processInstanceKey string, params GetProcessInstanceJobsParams)
	// start a cpu profiler
	// (POST /tests/{nodeId}/start-cpu-profile)
	TestStartCpuProfile(w http.ResponseWriter, r *http.Request, nodeId string)
	// stop a cpu profiler
	// (POST /tests/{nodeId}/stop-cpu-profile)
	TestStopCpuProfile(w http.ResponseWriter, r *http.Request, nodeId string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get list of decision definitions
// (GET /decision-definitions)
func (_ Unimplemented) GetDecisionDefinitions(w http.ResponseWriter, r *http.Request, params GetDecisionDefinitionsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Deploy a new decision definition
// (POST /decision-definitions)
func (_ Unimplemented) CreateDecisionDefinition(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get decision definition
// (GET /decision-definitions/{decisionDefinitionKey})
func (_ Unimplemented) GetDecisionDefinition(w http.ResponseWriter, r *http.Request, decisionDefinitionKey string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Evaluate latest version of decision directly in engine
// (POST /decisions/{decisionId}/evaluate)
func (_ Unimplemented) EvaluateDecision(w http.ResponseWriter, r *http.Request, decisionId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Resolve an incident
// (POST /incidents/{incidentKey}/resolve)
func (_ Unimplemented) ResolveIncident(w http.ResponseWriter, r *http.Request, incidentKey string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get list of jobs on partitions
// (GET /jobs)
func (_ Unimplemented) GetJobs(w http.ResponseWriter, r *http.Request, params GetJobsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Complete a job
// (POST /jobs)
func (_ Unimplemented) CompleteJob(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Publish a message
// (POST /messages)
func (_ Unimplemented) PublishMessage(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get list of process definitions
// (GET /process-definitions)
func (_ Unimplemented) GetProcessDefinitions(w http.ResponseWriter, r *http.Request, params GetProcessDefinitionsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Deploy a new process definition
// (POST /process-definitions)
func (_ Unimplemented) CreateProcessDefinition(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get process definition
// (GET /process-definitions/{processDefinitionKey})
func (_ Unimplemented) GetProcessDefinition(w http.ResponseWriter, r *http.Request, processDefinitionKey string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get list of running process instances
// (GET /process-instances)
func (_ Unimplemented) GetProcessInstances(w http.ResponseWriter, r *http.Request, params GetProcessInstancesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new process instance
// (POST /process-instances)
func (_ Unimplemented) CreateProcessInstance(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new process instance starting at chosen flow node
// (POST /process-instances/custom-start-point)
func (_ Unimplemented) CreateProcessInstanceAtCustomStartPoint(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get state of a process instance selected by processInstanceKey
// (GET /process-instances/{processInstanceKey})
func (_ Unimplemented) GetProcessInstance(w http.ResponseWriter, r *http.Request, processInstanceKey string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get list of activities for a process instance
// (GET /process-instances/{processInstanceKey}/activities)
func (_ Unimplemented) GetActivities(w http.ResponseWriter, r *http.Request, processInstanceKey string, params GetActivitiesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get list of visited flow elements for a process instance
// (GET /process-instances/{processInstanceKey}/history)
func (_ Unimplemented) GetHistory(w http.ResponseWriter, r *http.Request, processInstanceKey string, params GetHistoryParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get list of incidents for a process instance
// (GET /process-instances/{processInstanceKey}/incidents)
func (_ Unimplemented) GetIncidents(w http.ResponseWriter, r *http.Request, processInstanceKey string, params GetIncidentsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get list of jobs for a process instance
// (GET /process-instances/{processInstanceKey}/jobs)
func (_ Unimplemented) GetProcessInstanceJobs(w http.ResponseWriter, r *http.Request, processInstanceKey string, params GetProcessInstanceJobsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// start a cpu profiler
// (POST /tests/{nodeId}/start-cpu-profile)
func (_ Unimplemented) TestStartCpuProfile(w http.ResponseWriter, r *http.Request, nodeId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// stop a cpu profiler
// (POST /tests/{nodeId}/stop-cpu-profile)
func (_ Unimplemented) TestStopCpuProfile(w http.ResponseWriter, r *http.Request, nodeId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetDecisionDefinitions operation middleware
func (siw *ServerInterfaceWrapper) GetDecisionDefinitions(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDecisionDefinitionsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", r.URL.Query(), &params.Size)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "size", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDecisionDefinitions(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateDecisionDefinition operation middleware
func (siw *ServerInterfaceWrapper) CreateDecisionDefinition(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateDecisionDefinition(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDecisionDefinition operation middleware
func (siw *ServerInterfaceWrapper) GetDecisionDefinition(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "decisionDefinitionKey" -------------
	var decisionDefinitionKey string

	err = runtime.BindStyledParameterWithOptions("simple", "decisionDefinitionKey", chi.URLParam(r, "decisionDefinitionKey"), &decisionDefinitionKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "decisionDefinitionKey", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDecisionDefinition(w, r, decisionDefinitionKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// EvaluateDecision operation middleware
func (siw *ServerInterfaceWrapper) EvaluateDecision(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "decisionId" -------------
	var decisionId string

	err = runtime.BindStyledParameterWithOptions("simple", "decisionId", chi.URLParam(r, "decisionId"), &decisionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "decisionId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.EvaluateDecision(w, r, decisionId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ResolveIncident operation middleware
func (siw *ServerInterfaceWrapper) ResolveIncident(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "incidentKey" -------------
	var incidentKey string

	err = runtime.BindStyledParameterWithOptions("simple", "incidentKey", chi.URLParam(r, "incidentKey"), &incidentKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "incidentKey", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ResolveIncident(w, r, incidentKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetJobs operation middleware
func (siw *ServerInterfaceWrapper) GetJobs(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetJobsParams

	// ------------- Optional query parameter "jobType" -------------

	err = runtime.BindQueryParameter("form", true, false, "jobType", r.URL.Query(), &params.JobType)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "jobType", Err: err})
		return
	}

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", r.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "state", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", r.URL.Query(), &params.Size)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "size", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetJobs(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CompleteJob operation middleware
func (siw *ServerInterfaceWrapper) CompleteJob(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CompleteJob(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// PublishMessage operation middleware
func (siw *ServerInterfaceWrapper) PublishMessage(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PublishMessage(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProcessDefinitions operation middleware
func (siw *ServerInterfaceWrapper) GetProcessDefinitions(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProcessDefinitionsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", r.URL.Query(), &params.Size)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "size", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProcessDefinitions(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateProcessDefinition operation middleware
func (siw *ServerInterfaceWrapper) CreateProcessDefinition(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProcessDefinition(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProcessDefinition operation middleware
func (siw *ServerInterfaceWrapper) GetProcessDefinition(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "processDefinitionKey" -------------
	var processDefinitionKey string

	err = runtime.BindStyledParameterWithOptions("simple", "processDefinitionKey", chi.URLParam(r, "processDefinitionKey"), &processDefinitionKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "processDefinitionKey", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProcessDefinition(w, r, processDefinitionKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProcessInstances operation middleware
func (siw *ServerInterfaceWrapper) GetProcessInstances(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProcessInstancesParams

	// ------------- Required query parameter "processDefinitionKey" -------------

	if paramValue := r.URL.Query().Get("processDefinitionKey"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "processDefinitionKey"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "processDefinitionKey", r.URL.Query(), &params.ProcessDefinitionKey)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "processDefinitionKey", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", r.URL.Query(), &params.Size)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "size", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProcessInstances(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateProcessInstance operation middleware
func (siw *ServerInterfaceWrapper) CreateProcessInstance(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProcessInstance(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateProcessInstanceAtCustomStartPoint operation middleware
func (siw *ServerInterfaceWrapper) CreateProcessInstanceAtCustomStartPoint(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProcessInstanceAtCustomStartPoint(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProcessInstance operation middleware
func (siw *ServerInterfaceWrapper) GetProcessInstance(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "processInstanceKey" -------------
	var processInstanceKey string

	err = runtime.BindStyledParameterWithOptions("simple", "processInstanceKey", chi.URLParam(r, "processInstanceKey"), &processInstanceKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "processInstanceKey", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProcessInstance(w, r, processInstanceKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetActivities operation middleware
func (siw *ServerInterfaceWrapper) GetActivities(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "processInstanceKey" -------------
	var processInstanceKey string

	err = runtime.BindStyledParameterWithOptions("simple", "processInstanceKey", chi.URLParam(r, "processInstanceKey"), &processInstanceKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "processInstanceKey", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetActivitiesParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", r.URL.Query(), &params.Size)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "size", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetActivities(w, r, processInstanceKey, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetHistory operation middleware
func (siw *ServerInterfaceWrapper) GetHistory(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "processInstanceKey" -------------
	var processInstanceKey string

	err = runtime.BindStyledParameterWithOptions("simple", "processInstanceKey", chi.URLParam(r, "processInstanceKey"), &processInstanceKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "processInstanceKey", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetHistoryParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", r.URL.Query(), &params.Size)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "size", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHistory(w, r, processInstanceKey, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetIncidents operation middleware
func (siw *ServerInterfaceWrapper) GetIncidents(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "processInstanceKey" -------------
	var processInstanceKey string

	err = runtime.BindStyledParameterWithOptions("simple", "processInstanceKey", chi.URLParam(r, "processInstanceKey"), &processInstanceKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "processInstanceKey", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIncidentsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", r.URL.Query(), &params.Size)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "size", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetIncidents(w, r, processInstanceKey, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProcessInstanceJobs operation middleware
func (siw *ServerInterfaceWrapper) GetProcessInstanceJobs(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "processInstanceKey" -------------
	var processInstanceKey string

	err = runtime.BindStyledParameterWithOptions("simple", "processInstanceKey", chi.URLParam(r, "processInstanceKey"), &processInstanceKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "processInstanceKey", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProcessInstanceJobsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", r.URL.Query(), &params.Size)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "size", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProcessInstanceJobs(w, r, processInstanceKey, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// TestStartCpuProfile operation middleware
func (siw *ServerInterfaceWrapper) TestStartCpuProfile(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "nodeId" -------------
	var nodeId string

	err = runtime.BindStyledParameterWithOptions("simple", "nodeId", chi.URLParam(r, "nodeId"), &nodeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nodeId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TestStartCpuProfile(w, r, nodeId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// TestStopCpuProfile operation middleware
func (siw *ServerInterfaceWrapper) TestStopCpuProfile(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "nodeId" -------------
	var nodeId string

	err = runtime.BindStyledParameterWithOptions("simple", "nodeId", chi.URLParam(r, "nodeId"), &nodeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nodeId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TestStopCpuProfile(w, r, nodeId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/decision-definitions", wrapper.GetDecisionDefinitions)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/decision-definitions", wrapper.CreateDecisionDefinition)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/decision-definitions/{decisionDefinitionKey}", wrapper.GetDecisionDefinition)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/decisions/{decisionId}/evaluate", wrapper.EvaluateDecision)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/incidents/{incidentKey}/resolve", wrapper.ResolveIncident)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/jobs", wrapper.GetJobs)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/jobs", wrapper.CompleteJob)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/messages", wrapper.PublishMessage)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/process-definitions", wrapper.GetProcessDefinitions)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/process-definitions", wrapper.CreateProcessDefinition)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/process-definitions/{processDefinitionKey}", wrapper.GetProcessDefinition)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/process-instances", wrapper.GetProcessInstances)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/process-instances", wrapper.CreateProcessInstance)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/process-instances/custom-start-point", wrapper.CreateProcessInstanceAtCustomStartPoint)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/process-instances/{processInstanceKey}", wrapper.GetProcessInstance)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/process-instances/{processInstanceKey}/activities", wrapper.GetActivities)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/process-instances/{processInstanceKey}/history", wrapper.GetHistory)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/process-instances/{processInstanceKey}/incidents", wrapper.GetIncidents)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/process-instances/{processInstanceKey}/jobs", wrapper.GetProcessInstanceJobs)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/tests/{nodeId}/start-cpu-profile", wrapper.TestStartCpuProfile)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/tests/{nodeId}/stop-cpu-profile", wrapper.TestStopCpuProfile)
	})

	return r
}

type GetDecisionDefinitionsRequestObject struct {
	Params GetDecisionDefinitionsParams
}

type GetDecisionDefinitionsResponseObject interface {
	VisitGetDecisionDefinitionsResponse(w http.ResponseWriter) error
}

type GetDecisionDefinitions200JSONResponse DecisionDefinitionsPage

func (response GetDecisionDefinitions200JSONResponse) VisitGetDecisionDefinitionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDecisionDefinitions502JSONResponse Error

func (response GetDecisionDefinitions502JSONResponse) VisitGetDecisionDefinitionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(502)

	return json.NewEncoder(w).Encode(response)
}

type CreateDecisionDefinitionRequestObject struct {
	Body io.Reader
}

type CreateDecisionDefinitionResponseObject interface {
	VisitCreateDecisionDefinitionResponse(w http.ResponseWriter) error
}

type CreateDecisionDefinition201JSONResponse struct {
	DecisionDefinitionKey string `json:"decisionDefinitionKey"`
}

func (response CreateDecisionDefinition201JSONResponse) VisitCreateDecisionDefinitionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateDecisionDefinition400JSONResponse Error

func (response CreateDecisionDefinition400JSONResponse) VisitCreateDecisionDefinitionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateDecisionDefinition409JSONResponse Error

func (response CreateDecisionDefinition409JSONResponse) VisitCreateDecisionDefinitionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateDecisionDefinition502JSONResponse Error

func (response CreateDecisionDefinition502JSONResponse) VisitCreateDecisionDefinitionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(502)

	return json.NewEncoder(w).Encode(response)
}

type GetDecisionDefinitionRequestObject struct {
	DecisionDefinitionKey string `json:"decisionDefinitionKey"`
}

type GetDecisionDefinitionResponseObject interface {
	VisitGetDecisionDefinitionResponse(w http.ResponseWriter) error
}

type GetDecisionDefinition200JSONResponse DecisionDefinitionDetail

func (response GetDecisionDefinition200JSONResponse) VisitGetDecisionDefinitionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDecisionDefinition400JSONResponse Error

func (response GetDecisionDefinition400JSONResponse) VisitGetDecisionDefinitionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetDecisionDefinition502JSONResponse Error

func (response GetDecisionDefinition502JSONResponse) VisitGetDecisionDefinitionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(502)

	return json.NewEncoder(w).Encode(response)
}

type EvaluateDecisionRequestObject struct {
	DecisionId string `json:"decisionId"`
	Body       *EvaluateDecisionJSONRequestBody
}

type EvaluateDecisionResponseObject interface {
	VisitEvaluateDecisionResponse(w http.ResponseWriter) error
}

type EvaluateDecision200JSONResponse EvaluatedDRDResult

func (response EvaluateDecision200JSONResponse) VisitEvaluateDecisionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type EvaluateDecision500JSONResponse Error

func (response EvaluateDecision500JSONResponse) VisitEvaluateDecisionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ResolveIncidentRequestObject struct {
	IncidentKey string `json:"incidentKey"`
}

type ResolveIncidentResponseObject interface {
	VisitResolveIncidentResponse(w http.ResponseWriter) error
}

type ResolveIncident201Response struct {
}

func (response ResolveIncident201Response) VisitResolveIncidentResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type ResolveIncident400JSONResponse Error

func (response ResolveIncident400JSONResponse) VisitResolveIncidentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ResolveIncident502JSONResponse Error

func (response ResolveIncident502JSONResponse) VisitResolveIncidentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(502)

	return json.NewEncoder(w).Encode(response)
}

type GetJobsRequestObject struct {
	Params GetJobsParams
}

type GetJobsResponseObject interface {
	VisitGetJobsResponse(w http.ResponseWriter) error
}

type GetJobs200JSONResponse JobPartitionPage

func (response GetJobs200JSONResponse) VisitGetJobsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetJobs500JSONResponse Error

func (response GetJobs500JSONResponse) VisitGetJobsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetJobs502JSONResponse Error

func (response GetJobs502JSONResponse) VisitGetJobsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(502)

	return json.NewEncoder(w).Encode(response)
}

type CompleteJobRequestObject struct {
	Body *CompleteJobJSONRequestBody
}

type CompleteJobResponseObject interface {
	VisitCompleteJobResponse(w http.ResponseWriter) error
}

type CompleteJob201Response struct {
}

func (response CompleteJob201Response) VisitCompleteJobResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type CompleteJob400JSONResponse Error

func (response CompleteJob400JSONResponse) VisitCompleteJobResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CompleteJob502JSONResponse Error

func (response CompleteJob502JSONResponse) VisitCompleteJobResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(502)

	return json.NewEncoder(w).Encode(response)
}

type PublishMessageRequestObject struct {
	Body *PublishMessageJSONRequestBody
}

type PublishMessageResponseObject interface {
	VisitPublishMessageResponse(w http.ResponseWriter) error
}

type PublishMessage201Response struct {
}

func (response PublishMessage201Response) VisitPublishMessageResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type PublishMessage400JSONResponse Error

func (response PublishMessage400JSONResponse) VisitPublishMessageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PublishMessage502JSONResponse Error

func (response PublishMessage502JSONResponse) VisitPublishMessageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(502)

	return json.NewEncoder(w).Encode(response)
}

type GetProcessDefinitionsRequestObject struct {
	Params GetProcessDefinitionsParams
}

type GetProcessDefinitionsResponseObject interface {
	VisitGetProcessDefinitionsResponse(w http.ResponseWriter) error
}

type GetProcessDefinitions200JSONResponse ProcessDefinitionsPage

func (response GetProcessDefinitions200JSONResponse) VisitGetProcessDefinitionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProcessDefinitions500JSONResponse Error

func (response GetProcessDefinitions500JSONResponse) VisitGetProcessDefinitionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateProcessDefinitionRequestObject struct {
	Body io.Reader
}

type CreateProcessDefinitionResponseObject interface {
	VisitCreateProcessDefinitionResponse(w http.ResponseWriter) error
}

type CreateProcessDefinition201JSONResponse struct {
	ProcessDefinitionKey string `json:"processDefinitionKey"`
}

func (response CreateProcessDefinition201JSONResponse) VisitCreateProcessDefinitionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateProcessDefinition400JSONResponse Error

func (response CreateProcessDefinition400JSONResponse) VisitCreateProcessDefinitionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateProcessDefinition409JSONResponse Error

func (response CreateProcessDefinition409JSONResponse) VisitCreateProcessDefinitionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateProcessDefinition502JSONResponse Error

func (response CreateProcessDefinition502JSONResponse) VisitCreateProcessDefinitionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(502)

	return json.NewEncoder(w).Encode(response)
}

type GetProcessDefinitionRequestObject struct {
	ProcessDefinitionKey string `json:"processDefinitionKey"`
}

type GetProcessDefinitionResponseObject interface {
	VisitGetProcessDefinitionResponse(w http.ResponseWriter) error
}

type GetProcessDefinition200JSONResponse ProcessDefinitionDetail

func (response GetProcessDefinition200JSONResponse) VisitGetProcessDefinitionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProcessDefinition400JSONResponse Error

func (response GetProcessDefinition400JSONResponse) VisitGetProcessDefinitionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetProcessDefinition500JSONResponse Error

func (response GetProcessDefinition500JSONResponse) VisitGetProcessDefinitionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetProcessInstancesRequestObject struct {
	Params GetProcessInstancesParams
}

type GetProcessInstancesResponseObject interface {
	VisitGetProcessInstancesResponse(w http.ResponseWriter) error
}

type GetProcessInstances200JSONResponse ProcessInstancePage

func (response GetProcessInstances200JSONResponse) VisitGetProcessInstancesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProcessInstances400JSONResponse Error

func (response GetProcessInstances400JSONResponse) VisitGetProcessInstancesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetProcessInstances500JSONResponse Error

func (response GetProcessInstances500JSONResponse) VisitGetProcessInstancesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetProcessInstances502JSONResponse Error

func (response GetProcessInstances502JSONResponse) VisitGetProcessInstancesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(502)

	return json.NewEncoder(w).Encode(response)
}

type CreateProcessInstanceRequestObject struct {
	Body *CreateProcessInstanceJSONRequestBody
}

type CreateProcessInstanceResponseObject interface {
	VisitCreateProcessInstanceResponse(w http.ResponseWriter) error
}

type CreateProcessInstance201JSONResponse ProcessInstance

func (response CreateProcessInstance201JSONResponse) VisitCreateProcessInstanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateProcessInstance400JSONResponse Error

func (response CreateProcessInstance400JSONResponse) VisitCreateProcessInstanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateProcessInstance500JSONResponse Error

func (response CreateProcessInstance500JSONResponse) VisitCreateProcessInstanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateProcessInstance502JSONResponse Error

func (response CreateProcessInstance502JSONResponse) VisitCreateProcessInstanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(502)

	return json.NewEncoder(w).Encode(response)
}

type CreateProcessInstanceAtCustomStartPointRequestObject struct {
	Body *CreateProcessInstanceAtCustomStartPointJSONRequestBody
}

type CreateProcessInstanceAtCustomStartPointResponseObject interface {
	VisitCreateProcessInstanceAtCustomStartPointResponse(w http.ResponseWriter) error
}

type CreateProcessInstanceAtCustomStartPoint201JSONResponse ProcessInstance

func (response CreateProcessInstanceAtCustomStartPoint201JSONResponse) VisitCreateProcessInstanceAtCustomStartPointResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateProcessInstanceAtCustomStartPoint400JSONResponse Error

func (response CreateProcessInstanceAtCustomStartPoint400JSONResponse) VisitCreateProcessInstanceAtCustomStartPointResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateProcessInstanceAtCustomStartPoint500JSONResponse Error

func (response CreateProcessInstanceAtCustomStartPoint500JSONResponse) VisitCreateProcessInstanceAtCustomStartPointResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateProcessInstanceAtCustomStartPoint502JSONResponse Error

func (response CreateProcessInstanceAtCustomStartPoint502JSONResponse) VisitCreateProcessInstanceAtCustomStartPointResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(502)

	return json.NewEncoder(w).Encode(response)
}

type GetProcessInstanceRequestObject struct {
	ProcessInstanceKey string `json:"processInstanceKey"`
}

type GetProcessInstanceResponseObject interface {
	VisitGetProcessInstanceResponse(w http.ResponseWriter) error
}

type GetProcessInstance200JSONResponse ProcessInstance

func (response GetProcessInstance200JSONResponse) VisitGetProcessInstanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProcessInstance400JSONResponse Error

func (response GetProcessInstance400JSONResponse) VisitGetProcessInstanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetProcessInstance500JSONResponse Error

func (response GetProcessInstance500JSONResponse) VisitGetProcessInstanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetProcessInstance502JSONResponse Error

func (response GetProcessInstance502JSONResponse) VisitGetProcessInstanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(502)

	return json.NewEncoder(w).Encode(response)
}

type GetActivitiesRequestObject struct {
	ProcessInstanceKey string `json:"processInstanceKey"`
	Params             GetActivitiesParams
}

type GetActivitiesResponseObject interface {
	VisitGetActivitiesResponse(w http.ResponseWriter) error
}

type GetActivities200JSONResponse ActivityPage

func (response GetActivities200JSONResponse) VisitGetActivitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetHistoryRequestObject struct {
	ProcessInstanceKey string `json:"processInstanceKey"`
	Params             GetHistoryParams
}

type GetHistoryResponseObject interface {
	VisitGetHistoryResponse(w http.ResponseWriter) error
}

type GetHistory200JSONResponse FlowElementHistoryPage

func (response GetHistory200JSONResponse) VisitGetHistoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetHistory400JSONResponse Error

func (response GetHistory400JSONResponse) VisitGetHistoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetHistory502JSONResponse Error

func (response GetHistory502JSONResponse) VisitGetHistoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(502)

	return json.NewEncoder(w).Encode(response)
}

type GetIncidentsRequestObject struct {
	ProcessInstanceKey string `json:"processInstanceKey"`
	Params             GetIncidentsParams
}

type GetIncidentsResponseObject interface {
	VisitGetIncidentsResponse(w http.ResponseWriter) error
}

type GetIncidents200JSONResponse IncidentPage

func (response GetIncidents200JSONResponse) VisitGetIncidentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetIncidents400JSONResponse Error

func (response GetIncidents400JSONResponse) VisitGetIncidentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetIncidents502JSONResponse Error

func (response GetIncidents502JSONResponse) VisitGetIncidentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(502)

	return json.NewEncoder(w).Encode(response)
}

type GetProcessInstanceJobsRequestObject struct {
	ProcessInstanceKey string `json:"processInstanceKey"`
	Params             GetProcessInstanceJobsParams
}

type GetProcessInstanceJobsResponseObject interface {
	VisitGetProcessInstanceJobsResponse(w http.ResponseWriter) error
}

type GetProcessInstanceJobs200JSONResponse JobPage

func (response GetProcessInstanceJobs200JSONResponse) VisitGetProcessInstanceJobsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProcessInstanceJobs400JSONResponse Error

func (response GetProcessInstanceJobs400JSONResponse) VisitGetProcessInstanceJobsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetProcessInstanceJobs500JSONResponse Error

func (response GetProcessInstanceJobs500JSONResponse) VisitGetProcessInstanceJobsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetProcessInstanceJobs502JSONResponse Error

func (response GetProcessInstanceJobs502JSONResponse) VisitGetProcessInstanceJobsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(502)

	return json.NewEncoder(w).Encode(response)
}

type TestStartCpuProfileRequestObject struct {
	NodeId string `json:"nodeId"`
}

type TestStartCpuProfileResponseObject interface {
	VisitTestStartCpuProfileResponse(w http.ResponseWriter) error
}

type TestStartCpuProfile200Response struct {
}

func (response TestStartCpuProfile200Response) VisitTestStartCpuProfileResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type TestStartCpuProfile500JSONResponse Error

func (response TestStartCpuProfile500JSONResponse) VisitTestStartCpuProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type TestStopCpuProfileRequestObject struct {
	NodeId string `json:"nodeId"`
}

type TestStopCpuProfileResponseObject interface {
	VisitTestStopCpuProfileResponse(w http.ResponseWriter) error
}

type TestStopCpuProfile200JSONResponse struct {
	Pprof *[]byte `json:"pprof,omitempty"`
}

func (response TestStopCpuProfile200JSONResponse) VisitTestStopCpuProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TestStopCpuProfile500JSONResponse Error

func (response TestStopCpuProfile500JSONResponse) VisitTestStopCpuProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get list of decision definitions
	// (GET /decision-definitions)
	GetDecisionDefinitions(ctx context.Context, request GetDecisionDefinitionsRequestObject) (GetDecisionDefinitionsResponseObject, error)
	// Deploy a new decision definition
	// (POST /decision-definitions)
	CreateDecisionDefinition(ctx context.Context, request CreateDecisionDefinitionRequestObject) (CreateDecisionDefinitionResponseObject, error)
	// Get decision definition
	// (GET /decision-definitions/{decisionDefinitionKey})
	GetDecisionDefinition(ctx context.Context, request GetDecisionDefinitionRequestObject) (GetDecisionDefinitionResponseObject, error)
	// Evaluate latest version of decision directly in engine
	// (POST /decisions/{decisionId}/evaluate)
	EvaluateDecision(ctx context.Context, request EvaluateDecisionRequestObject) (EvaluateDecisionResponseObject, error)
	// Resolve an incident
	// (POST /incidents/{incidentKey}/resolve)
	ResolveIncident(ctx context.Context, request ResolveIncidentRequestObject) (ResolveIncidentResponseObject, error)
	// Get list of jobs on partitions
	// (GET /jobs)
	GetJobs(ctx context.Context, request GetJobsRequestObject) (GetJobsResponseObject, error)
	// Complete a job
	// (POST /jobs)
	CompleteJob(ctx context.Context, request CompleteJobRequestObject) (CompleteJobResponseObject, error)
	// Publish a message
	// (POST /messages)
	PublishMessage(ctx context.Context, request PublishMessageRequestObject) (PublishMessageResponseObject, error)
	// Get list of process definitions
	// (GET /process-definitions)
	GetProcessDefinitions(ctx context.Context, request GetProcessDefinitionsRequestObject) (GetProcessDefinitionsResponseObject, error)
	// Deploy a new process definition
	// (POST /process-definitions)
	CreateProcessDefinition(ctx context.Context, request CreateProcessDefinitionRequestObject) (CreateProcessDefinitionResponseObject, error)
	// Get process definition
	// (GET /process-definitions/{processDefinitionKey})
	GetProcessDefinition(ctx context.Context, request GetProcessDefinitionRequestObject) (GetProcessDefinitionResponseObject, error)
	// Get list of running process instances
	// (GET /process-instances)
	GetProcessInstances(ctx context.Context, request GetProcessInstancesRequestObject) (GetProcessInstancesResponseObject, error)
	// Create a new process instance
	// (POST /process-instances)
	CreateProcessInstance(ctx context.Context, request CreateProcessInstanceRequestObject) (CreateProcessInstanceResponseObject, error)
	// Create a new process instance starting at chosen flow node
	// (POST /process-instances/custom-start-point)
	CreateProcessInstanceAtCustomStartPoint(ctx context.Context, request CreateProcessInstanceAtCustomStartPointRequestObject) (CreateProcessInstanceAtCustomStartPointResponseObject, error)
	// Get state of a process instance selected by processInstanceKey
	// (GET /process-instances/{processInstanceKey})
	GetProcessInstance(ctx context.Context, request GetProcessInstanceRequestObject) (GetProcessInstanceResponseObject, error)
	// Get list of activities for a process instance
	// (GET /process-instances/{processInstanceKey}/activities)
	GetActivities(ctx context.Context, request GetActivitiesRequestObject) (GetActivitiesResponseObject, error)
	// Get list of visited flow elements for a process instance
	// (GET /process-instances/{processInstanceKey}/history)
	GetHistory(ctx context.Context, request GetHistoryRequestObject) (GetHistoryResponseObject, error)
	// Get list of incidents for a process instance
	// (GET /process-instances/{processInstanceKey}/incidents)
	GetIncidents(ctx context.Context, request GetIncidentsRequestObject) (GetIncidentsResponseObject, error)
	// Get list of jobs for a process instance
	// (GET /process-instances/{processInstanceKey}/jobs)
	GetProcessInstanceJobs(ctx context.Context, request GetProcessInstanceJobsRequestObject) (GetProcessInstanceJobsResponseObject, error)
	// start a cpu profiler
	// (POST /tests/{nodeId}/start-cpu-profile)
	TestStartCpuProfile(ctx context.Context, request TestStartCpuProfileRequestObject) (TestStartCpuProfileResponseObject, error)
	// stop a cpu profiler
	// (POST /tests/{nodeId}/stop-cpu-profile)
	TestStopCpuProfile(ctx context.Context, request TestStopCpuProfileRequestObject) (TestStopCpuProfileResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetDecisionDefinitions operation middleware
func (sh *strictHandler) GetDecisionDefinitions(w http.ResponseWriter, r *http.Request, params GetDecisionDefinitionsParams) {
	var request GetDecisionDefinitionsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDecisionDefinitions(ctx, request.(GetDecisionDefinitionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDecisionDefinitions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDecisionDefinitionsResponseObject); ok {
		if err := validResponse.VisitGetDecisionDefinitionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateDecisionDefinition operation middleware
func (sh *strictHandler) CreateDecisionDefinition(w http.ResponseWriter, r *http.Request) {
	var request CreateDecisionDefinitionRequestObject

	request.Body = r.Body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateDecisionDefinition(ctx, request.(CreateDecisionDefinitionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateDecisionDefinition")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateDecisionDefinitionResponseObject); ok {
		if err := validResponse.VisitCreateDecisionDefinitionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDecisionDefinition operation middleware
func (sh *strictHandler) GetDecisionDefinition(w http.ResponseWriter, r *http.Request, decisionDefinitionKey string) {
	var request GetDecisionDefinitionRequestObject

	request.DecisionDefinitionKey = decisionDefinitionKey

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDecisionDefinition(ctx, request.(GetDecisionDefinitionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDecisionDefinition")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDecisionDefinitionResponseObject); ok {
		if err := validResponse.VisitGetDecisionDefinitionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// EvaluateDecision operation middleware
func (sh *strictHandler) EvaluateDecision(w http.ResponseWriter, r *http.Request, decisionId string) {
	var request EvaluateDecisionRequestObject

	request.DecisionId = decisionId

	var body EvaluateDecisionJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.EvaluateDecision(ctx, request.(EvaluateDecisionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "EvaluateDecision")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(EvaluateDecisionResponseObject); ok {
		if err := validResponse.VisitEvaluateDecisionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ResolveIncident operation middleware
func (sh *strictHandler) ResolveIncident(w http.ResponseWriter, r *http.Request, incidentKey string) {
	var request ResolveIncidentRequestObject

	request.IncidentKey = incidentKey

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ResolveIncident(ctx, request.(ResolveIncidentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ResolveIncident")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ResolveIncidentResponseObject); ok {
		if err := validResponse.VisitResolveIncidentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetJobs operation middleware
func (sh *strictHandler) GetJobs(w http.ResponseWriter, r *http.Request, params GetJobsParams) {
	var request GetJobsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetJobs(ctx, request.(GetJobsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetJobs")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetJobsResponseObject); ok {
		if err := validResponse.VisitGetJobsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CompleteJob operation middleware
func (sh *strictHandler) CompleteJob(w http.ResponseWriter, r *http.Request) {
	var request CompleteJobRequestObject

	var body CompleteJobJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CompleteJob(ctx, request.(CompleteJobRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CompleteJob")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CompleteJobResponseObject); ok {
		if err := validResponse.VisitCompleteJobResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PublishMessage operation middleware
func (sh *strictHandler) PublishMessage(w http.ResponseWriter, r *http.Request) {
	var request PublishMessageRequestObject

	var body PublishMessageJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PublishMessage(ctx, request.(PublishMessageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PublishMessage")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PublishMessageResponseObject); ok {
		if err := validResponse.VisitPublishMessageResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProcessDefinitions operation middleware
func (sh *strictHandler) GetProcessDefinitions(w http.ResponseWriter, r *http.Request, params GetProcessDefinitionsParams) {
	var request GetProcessDefinitionsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProcessDefinitions(ctx, request.(GetProcessDefinitionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProcessDefinitions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProcessDefinitionsResponseObject); ok {
		if err := validResponse.VisitGetProcessDefinitionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateProcessDefinition operation middleware
func (sh *strictHandler) CreateProcessDefinition(w http.ResponseWriter, r *http.Request) {
	var request CreateProcessDefinitionRequestObject

	request.Body = r.Body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProcessDefinition(ctx, request.(CreateProcessDefinitionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProcessDefinition")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateProcessDefinitionResponseObject); ok {
		if err := validResponse.VisitCreateProcessDefinitionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProcessDefinition operation middleware
func (sh *strictHandler) GetProcessDefinition(w http.ResponseWriter, r *http.Request, processDefinitionKey string) {
	var request GetProcessDefinitionRequestObject

	request.ProcessDefinitionKey = processDefinitionKey

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProcessDefinition(ctx, request.(GetProcessDefinitionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProcessDefinition")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProcessDefinitionResponseObject); ok {
		if err := validResponse.VisitGetProcessDefinitionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProcessInstances operation middleware
func (sh *strictHandler) GetProcessInstances(w http.ResponseWriter, r *http.Request, params GetProcessInstancesParams) {
	var request GetProcessInstancesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProcessInstances(ctx, request.(GetProcessInstancesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProcessInstances")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProcessInstancesResponseObject); ok {
		if err := validResponse.VisitGetProcessInstancesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateProcessInstance operation middleware
func (sh *strictHandler) CreateProcessInstance(w http.ResponseWriter, r *http.Request) {
	var request CreateProcessInstanceRequestObject

	var body CreateProcessInstanceJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProcessInstance(ctx, request.(CreateProcessInstanceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProcessInstance")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateProcessInstanceResponseObject); ok {
		if err := validResponse.VisitCreateProcessInstanceResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateProcessInstanceAtCustomStartPoint operation middleware
func (sh *strictHandler) CreateProcessInstanceAtCustomStartPoint(w http.ResponseWriter, r *http.Request) {
	var request CreateProcessInstanceAtCustomStartPointRequestObject

	var body CreateProcessInstanceAtCustomStartPointJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProcessInstanceAtCustomStartPoint(ctx, request.(CreateProcessInstanceAtCustomStartPointRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProcessInstanceAtCustomStartPoint")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateProcessInstanceAtCustomStartPointResponseObject); ok {
		if err := validResponse.VisitCreateProcessInstanceAtCustomStartPointResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProcessInstance operation middleware
func (sh *strictHandler) GetProcessInstance(w http.ResponseWriter, r *http.Request, processInstanceKey string) {
	var request GetProcessInstanceRequestObject

	request.ProcessInstanceKey = processInstanceKey

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProcessInstance(ctx, request.(GetProcessInstanceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProcessInstance")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProcessInstanceResponseObject); ok {
		if err := validResponse.VisitGetProcessInstanceResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetActivities operation middleware
func (sh *strictHandler) GetActivities(w http.ResponseWriter, r *http.Request, processInstanceKey string, params GetActivitiesParams) {
	var request GetActivitiesRequestObject

	request.ProcessInstanceKey = processInstanceKey
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetActivities(ctx, request.(GetActivitiesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetActivities")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetActivitiesResponseObject); ok {
		if err := validResponse.VisitGetActivitiesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetHistory operation middleware
func (sh *strictHandler) GetHistory(w http.ResponseWriter, r *http.Request, processInstanceKey string, params GetHistoryParams) {
	var request GetHistoryRequestObject

	request.ProcessInstanceKey = processInstanceKey
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetHistory(ctx, request.(GetHistoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHistory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetHistoryResponseObject); ok {
		if err := validResponse.VisitGetHistoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetIncidents operation middleware
func (sh *strictHandler) GetIncidents(w http.ResponseWriter, r *http.Request, processInstanceKey string, params GetIncidentsParams) {
	var request GetIncidentsRequestObject

	request.ProcessInstanceKey = processInstanceKey
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetIncidents(ctx, request.(GetIncidentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetIncidents")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetIncidentsResponseObject); ok {
		if err := validResponse.VisitGetIncidentsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProcessInstanceJobs operation middleware
func (sh *strictHandler) GetProcessInstanceJobs(w http.ResponseWriter, r *http.Request, processInstanceKey string, params GetProcessInstanceJobsParams) {
	var request GetProcessInstanceJobsRequestObject

	request.ProcessInstanceKey = processInstanceKey
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProcessInstanceJobs(ctx, request.(GetProcessInstanceJobsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProcessInstanceJobs")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProcessInstanceJobsResponseObject); ok {
		if err := validResponse.VisitGetProcessInstanceJobsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// TestStartCpuProfile operation middleware
func (sh *strictHandler) TestStartCpuProfile(w http.ResponseWriter, r *http.Request, nodeId string) {
	var request TestStartCpuProfileRequestObject

	request.NodeId = nodeId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.TestStartCpuProfile(ctx, request.(TestStartCpuProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestStartCpuProfile")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(TestStartCpuProfileResponseObject); ok {
		if err := validResponse.VisitTestStartCpuProfileResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// TestStopCpuProfile operation middleware
func (sh *strictHandler) TestStopCpuProfile(w http.ResponseWriter, r *http.Request, nodeId string) {
	var request TestStopCpuProfileRequestObject

	request.NodeId = nodeId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.TestStopCpuProfile(ctx, request.(TestStopCpuProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestStopCpuProfile")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(TestStopCpuProfileResponseObject); ok {
		if err := validResponse.VisitTestStopCpuProfileResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/w8AAP//1gFvO6iSAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
