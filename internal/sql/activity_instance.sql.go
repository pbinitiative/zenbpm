// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: activity_instance.sql

package sql

import (
	"context"
)

const findActivityInstances = `-- name: FindActivityInstances :many
SELECT
    "key", process_instance_key, process_definition_key, created_at, state, element_id, bpmn_element_type
FROM
    activity_instance
WHERE
    process_instance_key = ?1
ORDER BY
    key ASC
`

func (q *Queries) FindActivityInstances(ctx context.Context, processInstanceKey int64) ([]ActivityInstance, error) {
	rows, err := q.db.QueryContext(ctx, findActivityInstances, processInstanceKey)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ActivityInstance{}
	for rows.Next() {
		var i ActivityInstance
		if err := rows.Scan(
			&i.Key,
			&i.ProcessInstanceKey,
			&i.ProcessDefinitionKey,
			&i.CreatedAt,
			&i.State,
			&i.ElementID,
			&i.BpmnElementType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveActivityInstance = `-- name: SaveActivityInstance :exec
INSERT INTO activity_instance(key, process_instance_key, process_definition_key, created_at, state, element_id, bpmn_element_type)
    VALUES (?, ?, ?, ?, ?, ?, ?)
`

type SaveActivityInstanceParams struct {
	Key                  int64  `json:"key"`
	ProcessInstanceKey   int64  `json:"process_instance_key"`
	ProcessDefinitionKey int64  `json:"process_definition_key"`
	CreatedAt            int64  `json:"created_at"`
	State                string `json:"state"`
	ElementID            string `json:"element_id"`
	BpmnElementType      string `json:"bpmn_element_type"`
}

func (q *Queries) SaveActivityInstance(ctx context.Context, arg SaveActivityInstanceParams) error {
	_, err := q.db.ExecContext(ctx, saveActivityInstance,
		arg.Key,
		arg.ProcessInstanceKey,
		arg.ProcessDefinitionKey,
		arg.CreatedAt,
		arg.State,
		arg.ElementID,
		arg.BpmnElementType,
	)
	return err
}
