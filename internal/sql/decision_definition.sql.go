// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: decision_definition.sql

package sql

import (
	"context"
)

const findDecisionDefinitionByKey = `-- name: FindDecisionDefinitionByKey :one
SELECT
    "key", version, dmn_id, dmn_data, dmn_checksum, dmn_resource_name
FROM
    decision_definition
WHERE
    key = ?1
`

func (q *Queries) FindDecisionDefinitionByKey(ctx context.Context, key int64) (DecisionDefinition, error) {
	row := q.db.QueryRowContext(ctx, findDecisionDefinitionByKey, key)
	var i DecisionDefinition
	err := row.Scan(
		&i.Key,
		&i.Version,
		&i.DmnID,
		&i.DmnData,
		&i.DmnChecksum,
		&i.DmnResourceName,
	)
	return i, err
}

const findDecisionDefinitionsById = `-- name: FindDecisionDefinitionsById :many
SELECT
    "key", version, dmn_id, dmn_data, dmn_checksum, dmn_resource_name
FROM
    decision_definition
WHERE
    dmn_id = ?1
ORDER BY
    version asc
`

func (q *Queries) FindDecisionDefinitionsById(ctx context.Context, dmnID string) ([]DecisionDefinition, error) {
	rows, err := q.db.QueryContext(ctx, findDecisionDefinitionsById, dmnID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DecisionDefinition{}
	for rows.Next() {
		var i DecisionDefinition
		if err := rows.Scan(
			&i.Key,
			&i.Version,
			&i.DmnID,
			&i.DmnData,
			&i.DmnChecksum,
			&i.DmnResourceName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findLatestDecisionDefinitionById = `-- name: FindLatestDecisionDefinitionById :one
SELECT
    "key", version, dmn_id, dmn_data, dmn_checksum, dmn_resource_name
FROM
    decision_definition
WHERE
    dmn_id = ?1
ORDER BY
    version DESC
LIMIT 1
`

func (q *Queries) FindLatestDecisionDefinitionById(ctx context.Context, dmnID string) (DecisionDefinition, error) {
	row := q.db.QueryRowContext(ctx, findLatestDecisionDefinitionById, dmnID)
	var i DecisionDefinition
	err := row.Scan(
		&i.Key,
		&i.Version,
		&i.DmnID,
		&i.DmnData,
		&i.DmnChecksum,
		&i.DmnResourceName,
	)
	return i, err
}

const getAllDecisionDefinitions = `-- name: GetAllDecisionDefinitions :many
SELECT
    "key", version, dmn_id, dmn_data, dmn_checksum, dmn_resource_name
FROM
    decision_definition
ORDER BY
    key desc
`

func (q *Queries) GetAllDecisionDefinitions(ctx context.Context) ([]DecisionDefinition, error) {
	rows, err := q.db.QueryContext(ctx, getAllDecisionDefinitions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DecisionDefinition{}
	for rows.Next() {
		var i DecisionDefinition
		if err := rows.Scan(
			&i.Key,
			&i.Version,
			&i.DmnID,
			&i.DmnData,
			&i.DmnChecksum,
			&i.DmnResourceName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDecisionDefinitionKeyByChecksum = `-- name: GetDecisionDefinitionKeyByChecksum :one
SELECT
    key
FROM
    decision_definition
WHERE
    dmn_checksum = ?1
LIMIT 1
`

func (q *Queries) GetDecisionDefinitionKeyByChecksum(ctx context.Context, dmnChecksum []byte) (int64, error) {
	row := q.db.QueryRowContext(ctx, getDecisionDefinitionKeyByChecksum, dmnChecksum)
	var key int64
	err := row.Scan(&key)
	return key, err
}

const saveDecisionDefinition = `-- name: SaveDecisionDefinition :exec
INSERT INTO decision_definition(key, version, dmn_id, dmn_data, dmn_checksum, dmn_resource_name)
    VALUES (?, ?, ?, ?, ?, ?)
`

type SaveDecisionDefinitionParams struct {
	Key             int64  `json:"key"`
	Version         int64  `json:"version"`
	DmnID           string `json:"dmn_id"`
	DmnData         string `json:"dmn_data"`
	DmnChecksum     []byte `json:"dmn_checksum"`
	DmnResourceName string `json:"dmn_resource_name"`
}

func (q *Queries) SaveDecisionDefinition(ctx context.Context, arg SaveDecisionDefinitionParams) error {
	_, err := q.db.ExecContext(ctx, saveDecisionDefinition,
		arg.Key,
		arg.Version,
		arg.DmnID,
		arg.DmnData,
		arg.DmnChecksum,
		arg.DmnResourceName,
	)
	return err
}
