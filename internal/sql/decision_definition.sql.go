// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: decision_definition.sql

package sql

import (
	"context"
)

const findDecisionDefinitionsByIds = `-- name: FindDecisionDefinitionsByIds :many
SELECT
    "key", version, dmn_id, dmn_data, dmn_checksum, dmn_resource_name
FROM
    decision_definition
WHERE
    dmn_id IN (?1)
ORDER BY
    version asc
LIMIT 1
`

func (q *Queries) FindDecisionDefinitionsByIds(ctx context.Context, dmnDecisionIds string) ([]DecisionDefinition, error) {
	rows, err := q.db.QueryContext(ctx, findDecisionDefinitionsByIds, dmnDecisionIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DecisionDefinition{}
	for rows.Next() {
		var i DecisionDefinition
		if err := rows.Scan(
			&i.Key,
			&i.Version,
			&i.DmnID,
			&i.DmnData,
			&i.DmnChecksum,
			&i.DmnResourceName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveDecisionDefinition = `-- name: SaveDecisionDefinition :exec
INSERT INTO decision_definition(key, version, dmn_id, dmn_data, dmn_checksum, dmn_resource_name)
    VALUES (?, ?, ?, ?, ?, ?)
`

type SaveDecisionDefinitionParams struct {
	Key             int64  `json:"key"`
	Version         int64  `json:"version"`
	DmnID           string `json:"dmn_id"`
	DmnData         []byte `json:"dmn_data"`
	DmnChecksum     []byte `json:"dmn_checksum"`
	DmnResourceName string `json:"dmn_resource_name"`
}

func (q *Queries) SaveDecisionDefinition(ctx context.Context, arg SaveDecisionDefinitionParams) error {
	_, err := q.db.ExecContext(ctx, saveDecisionDefinition,
		arg.Key,
		arg.Version,
		arg.DmnID,
		arg.DmnData,
		arg.DmnChecksum,
		arg.DmnResourceName,
	)
	return err
}
