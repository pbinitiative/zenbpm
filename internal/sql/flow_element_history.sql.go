// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: flow_element_history.sql

package sql

import (
	"context"
)

const getFlowElementHistory = `-- name: GetFlowElementHistory :many
SELECT
    "key", element_id, process_instance_key, created_at
FROM
    flow_element_history
WHERE
    process_instance_key = ?1
`

func (q *Queries) GetFlowElementHistory(ctx context.Context, processInstanceKey int64) ([]FlowElementHistory, error) {
	rows, err := q.db.QueryContext(ctx, getFlowElementHistory, processInstanceKey)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FlowElementHistory{}
	for rows.Next() {
		var i FlowElementHistory
		if err := rows.Scan(
			&i.Key,
			&i.ElementID,
			&i.ProcessInstanceKey,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveFlowElementHistory = `-- name: SaveFlowElementHistory :exec
INSERT INTO flow_element_history(key, element_id, process_instance_key, created_at)
    VALUES (?, ? ,? ,?)
ON CONFLICT
    DO UPDATE SET
       process_instance_key = excluded.process_instance_key,
       element_id = excluded.element_id
`

type SaveFlowElementHistoryParams struct {
	Key                int64  `json:"key"`
	ElementID          string `json:"element_id"`
	ProcessInstanceKey int64  `json:"process_instance_key"`
	CreatedAt          int64  `json:"created_at"`
}

func (q *Queries) SaveFlowElementHistory(ctx context.Context, arg SaveFlowElementHistoryParams) error {
	_, err := q.db.ExecContext(ctx, saveFlowElementHistory,
		arg.Key,
		arg.ElementID,
		arg.ProcessInstanceKey,
		arg.CreatedAt,
	)
	return err
}
