// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: job.sql

package sql

import (
	"context"
	"database/sql"
	"strings"
)

const countWaitingJobs = `-- name: CountWaitingJobs :one

SELECT
    count(*)
FROM
    job
WHERE
    state = 1
`

// https://github.com/sqlc-dev/sqlc/issues/2452
func (q *Queries) CountWaitingJobs(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countWaitingJobs)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const findActiveJobsByType = `-- name: FindActiveJobsByType :many
SELECT
    "key", element_instance_key, element_id, process_instance_key, type, state, created_at, variables, execution_token
FROM
    job
WHERE
    type = ?1
    AND state = 1
`

func (q *Queries) FindActiveJobsByType(ctx context.Context, type_ string) ([]Job, error) {
	rows, err := q.db.QueryContext(ctx, findActiveJobsByType, type_)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Job{}
	for rows.Next() {
		var i Job
		if err := rows.Scan(
			&i.Key,
			&i.ElementInstanceKey,
			&i.ElementID,
			&i.ProcessInstanceKey,
			&i.Type,
			&i.State,
			&i.CreatedAt,
			&i.Variables,
			&i.ExecutionToken,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAllJobs = `-- name: FindAllJobs :many
SELECT
    "key", element_instance_key, element_id, process_instance_key, type, state, created_at, variables, execution_token
FROM
    job
LIMIT ?2 offset ?1
`

type FindAllJobsParams struct {
	Offset int64 `json:"offset"`
	Size   int64 `json:"size"`
}

func (q *Queries) FindAllJobs(ctx context.Context, arg FindAllJobsParams) ([]Job, error) {
	rows, err := q.db.QueryContext(ctx, findAllJobs, arg.Offset, arg.Size)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Job{}
	for rows.Next() {
		var i Job
		if err := rows.Scan(
			&i.Key,
			&i.ElementInstanceKey,
			&i.ElementID,
			&i.ProcessInstanceKey,
			&i.Type,
			&i.State,
			&i.CreatedAt,
			&i.Variables,
			&i.ExecutionToken,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findJobByElementId = `-- name: FindJobByElementId :one
SELECT
    "key", element_instance_key, element_id, process_instance_key, type, state, created_at, variables, execution_token
FROM
    job
WHERE
    element_id = ?1
    AND process_instance_key = ?2
`

type FindJobByElementIdParams struct {
	ElementID          string `json:"element_id"`
	ProcessInstanceKey int64  `json:"process_instance_key"`
}

func (q *Queries) FindJobByElementId(ctx context.Context, arg FindJobByElementIdParams) (Job, error) {
	row := q.db.QueryRowContext(ctx, findJobByElementId, arg.ElementID, arg.ProcessInstanceKey)
	var i Job
	err := row.Scan(
		&i.Key,
		&i.ElementInstanceKey,
		&i.ElementID,
		&i.ProcessInstanceKey,
		&i.Type,
		&i.State,
		&i.CreatedAt,
		&i.Variables,
		&i.ExecutionToken,
	)
	return i, err
}

const findJobByJobKey = `-- name: FindJobByJobKey :one
SELECT
    "key", element_instance_key, element_id, process_instance_key, type, state, created_at, variables, execution_token
FROM
    job
WHERE
    key = ?1
`

func (q *Queries) FindJobByJobKey(ctx context.Context, key int64) (Job, error) {
	row := q.db.QueryRowContext(ctx, findJobByJobKey, key)
	var i Job
	err := row.Scan(
		&i.Key,
		&i.ElementInstanceKey,
		&i.ElementID,
		&i.ProcessInstanceKey,
		&i.Type,
		&i.State,
		&i.CreatedAt,
		&i.Variables,
		&i.ExecutionToken,
	)
	return i, err
}

const findJobByKey = `-- name: FindJobByKey :one
SELECT
    "key", element_instance_key, element_id, process_instance_key, type, state, created_at, variables, execution_token
FROM
    job
WHERE
    key = ?1
`

func (q *Queries) FindJobByKey(ctx context.Context, key int64) (Job, error) {
	row := q.db.QueryRowContext(ctx, findJobByKey, key)
	var i Job
	err := row.Scan(
		&i.Key,
		&i.ElementInstanceKey,
		&i.ElementID,
		&i.ProcessInstanceKey,
		&i.Type,
		&i.State,
		&i.CreatedAt,
		&i.Variables,
		&i.ExecutionToken,
	)
	return i, err
}

const findJobsFilter = `-- name: FindJobsFilter :many
SELECT
    "key", element_instance_key, element_id, process_instance_key, type, state, created_at, variables, execution_token
FROM
    job
WHERE
    COALESCE(?1, type) = type
    AND COALESCE(?2, state) = state
LIMIT ?4 offset ?3
`

type FindJobsFilterParams struct {
	Type   sql.NullString `json:"type"`
	State  sql.NullInt64  `json:"state"`
	Offset int64          `json:"offset"`
	Size   int64          `json:"size"`
}

func (q *Queries) FindJobsFilter(ctx context.Context, arg FindJobsFilterParams) ([]Job, error) {
	rows, err := q.db.QueryContext(ctx, findJobsFilter,
		arg.Type,
		arg.State,
		arg.Offset,
		arg.Size,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Job{}
	for rows.Next() {
		var i Job
		if err := rows.Scan(
			&i.Key,
			&i.ElementInstanceKey,
			&i.ElementID,
			&i.ProcessInstanceKey,
			&i.Type,
			&i.State,
			&i.CreatedAt,
			&i.Variables,
			&i.ExecutionToken,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findProcessInstanceJobs = `-- name: FindProcessInstanceJobs :many
SELECT
    "key", element_instance_key, element_id, process_instance_key, type, state, created_at, variables, execution_token
FROM
    job
WHERE
    process_instance_key = ?1
`

func (q *Queries) FindProcessInstanceJobs(ctx context.Context, processInstanceKey int64) ([]Job, error) {
	rows, err := q.db.QueryContext(ctx, findProcessInstanceJobs, processInstanceKey)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Job{}
	for rows.Next() {
		var i Job
		if err := rows.Scan(
			&i.Key,
			&i.ElementInstanceKey,
			&i.ElementID,
			&i.ProcessInstanceKey,
			&i.Type,
			&i.State,
			&i.CreatedAt,
			&i.Variables,
			&i.ExecutionToken,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findProcessInstanceJobsInState = `-- name: FindProcessInstanceJobsInState :many
SELECT
    "key", element_instance_key, element_id, process_instance_key, type, state, created_at, variables, execution_token
FROM
    job
WHERE
    process_instance_key = ?1
    AND state IN (/*SLICE:states*/?)
`

type FindProcessInstanceJobsInStateParams struct {
	ProcessInstanceKey int64   `json:"process_instance_key"`
	States             []int64 `json:"states"`
}

func (q *Queries) FindProcessInstanceJobsInState(ctx context.Context, arg FindProcessInstanceJobsInStateParams) ([]Job, error) {
	query := findProcessInstanceJobsInState
	var queryParams []interface{}
	queryParams = append(queryParams, arg.ProcessInstanceKey)
	if len(arg.States) > 0 {
		for _, v := range arg.States {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:states*/?", strings.Repeat(",?", len(arg.States))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:states*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Job{}
	for rows.Next() {
		var i Job
		if err := rows.Scan(
			&i.Key,
			&i.ElementInstanceKey,
			&i.ElementID,
			&i.ProcessInstanceKey,
			&i.Type,
			&i.State,
			&i.CreatedAt,
			&i.Variables,
			&i.ExecutionToken,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findWaitingJobs = `-- name: FindWaitingJobs :many
SELECT
    "key", element_instance_key, element_id, process_instance_key, type, state, created_at, variables, execution_token
FROM
    job
WHERE
    state = 1
    AND key NOT IN (/*SLICE:key_skip*/?)
    AND type IN (/*SLICE:type*/?)
ORDER BY
    created_at ASC
LIMIT ?
`

type FindWaitingJobsParams struct {
	KeySkip []int64  `json:"key_skip"`
	Type    []string `json:"type"`
	Limit   int64    `json:"limit"`
}

func (q *Queries) FindWaitingJobs(ctx context.Context, arg FindWaitingJobsParams) ([]Job, error) {
	query := findWaitingJobs
	var queryParams []interface{}
	if len(arg.KeySkip) > 0 {
		for _, v := range arg.KeySkip {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:key_skip*/?", strings.Repeat(",?", len(arg.KeySkip))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:key_skip*/?", "NULL", 1)
	}
	if len(arg.Type) > 0 {
		for _, v := range arg.Type {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:type*/?", strings.Repeat(",?", len(arg.Type))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:type*/?", "NULL", 1)
	}
	queryParams = append(queryParams, arg.Limit)
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Job{}
	for rows.Next() {
		var i Job
		if err := rows.Scan(
			&i.Key,
			&i.ElementInstanceKey,
			&i.ElementID,
			&i.ProcessInstanceKey,
			&i.Type,
			&i.State,
			&i.CreatedAt,
			&i.Variables,
			&i.ExecutionToken,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveJob = `-- name: SaveJob :exec

INSERT INTO job(key, element_id, element_instance_key, process_instance_key, type, state, created_at, variables, execution_token)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
ON CONFLICT
    DO UPDATE SET
        state = excluded.state,
        variables = excluded.variables
`

type SaveJobParams struct {
	Key                int64  `json:"key"`
	ElementID          string `json:"element_id"`
	ElementInstanceKey int64  `json:"element_instance_key"`
	ProcessInstanceKey int64  `json:"process_instance_key"`
	Type               string `json:"type"`
	State              int64  `json:"state"`
	CreatedAt          int64  `json:"created_at"`
	Variables          string `json:"variables"`
	ExecutionToken     int64  `json:"execution_token"`
}

// Copyright 2021-present ZenBPM Contributors
// (based on git commit history).
//
// ZenBPM project is available under two licenses:
//   - SPDX-License-Identifier: AGPL-3.0-or-later (See LICENSE-AGPL.md)
//   - Enterprise License (See LICENSE-ENTERPRISE.md)
func (q *Queries) SaveJob(ctx context.Context, arg SaveJobParams) error {
	_, err := q.db.ExecContext(ctx, saveJob,
		arg.Key,
		arg.ElementID,
		arg.ElementInstanceKey,
		arg.ProcessInstanceKey,
		arg.Type,
		arg.State,
		arg.CreatedAt,
		arg.Variables,
		arg.ExecutionToken,
	)
	return err
}
