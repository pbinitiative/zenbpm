// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: message_subscription.sql

package sql

import (
	"context"
	"database/sql"
)

const findMessageSubscriptionByNameAndCorrelationKeyAndState = `-- name: FindMessageSubscriptionByNameAndCorrelationKeyAndState :one
SELECT
    "key", element_id, process_definition_key, process_instance_key, name, state, created_at, correlation_key, execution_token
FROM
    message_subscription
WHERE
    correlation_key = ?1
    AND name = ?2
    AND state = ?3
`

type FindMessageSubscriptionByNameAndCorrelationKeyAndStateParams struct {
	CorrelationKey string `json:"correlation_key"`
	Name           string `json:"name"`
	State          int64  `json:"state"`
}

func (q *Queries) FindMessageSubscriptionByNameAndCorrelationKeyAndState(ctx context.Context, arg FindMessageSubscriptionByNameAndCorrelationKeyAndStateParams) (MessageSubscription, error) {
	row := q.db.QueryRowContext(ctx, findMessageSubscriptionByNameAndCorrelationKeyAndState, arg.CorrelationKey, arg.Name, arg.State)
	var i MessageSubscription
	err := row.Scan(
		&i.Key,
		&i.ElementID,
		&i.ProcessDefinitionKey,
		&i.ProcessInstanceKey,
		&i.Name,
		&i.State,
		&i.CreatedAt,
		&i.CorrelationKey,
		&i.ExecutionToken,
	)
	return i, err
}

const findMessageSubscriptions = `-- name: FindMessageSubscriptions :many
SELECT
    "key", element_id, process_definition_key, process_instance_key, name, state, created_at, correlation_key, execution_token
FROM
    message_subscription
WHERE
    COALESCE(?1, "execution_token") = "execution_token"
    AND COALESCE(?2, process_instance_key) = process_instance_key
    AND COALESCE(?3, element_id) = element_id
    AND (?4 IS NULL
        OR "state" IN (
            SELECT
                value
            FROM
                json_each(?4)))
`

type FindMessageSubscriptionsParams struct {
	ExecutionToken     sql.NullInt64  `json:"execution_token"`
	ProcessInstanceKey sql.NullInt64  `json:"process_instance_key"`
	ElementID          sql.NullString `json:"element_id"`
	States             interface{}    `json:"states"`
}

func (q *Queries) FindMessageSubscriptions(ctx context.Context, arg FindMessageSubscriptionsParams) ([]MessageSubscription, error) {
	rows, err := q.db.QueryContext(ctx, findMessageSubscriptions,
		arg.ExecutionToken,
		arg.ProcessInstanceKey,
		arg.ElementID,
		arg.States,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MessageSubscription{}
	for rows.Next() {
		var i MessageSubscription
		if err := rows.Scan(
			&i.Key,
			&i.ElementID,
			&i.ProcessDefinitionKey,
			&i.ProcessInstanceKey,
			&i.Name,
			&i.State,
			&i.CreatedAt,
			&i.CorrelationKey,
			&i.ExecutionToken,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findProcessInstanceMessageSubscriptions = `-- name: FindProcessInstanceMessageSubscriptions :many
SELECT
    "key", element_id, process_definition_key, process_instance_key, name, state, created_at, correlation_key, execution_token
FROM
    message_subscription
WHERE
    process_instance_key = ?1
    AND state = ?2
`

type FindProcessInstanceMessageSubscriptionsParams struct {
	ProcessInstanceKey int64 `json:"process_instance_key"`
	State              int64 `json:"state"`
}

func (q *Queries) FindProcessInstanceMessageSubscriptions(ctx context.Context, arg FindProcessInstanceMessageSubscriptionsParams) ([]MessageSubscription, error) {
	rows, err := q.db.QueryContext(ctx, findProcessInstanceMessageSubscriptions, arg.ProcessInstanceKey, arg.State)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MessageSubscription{}
	for rows.Next() {
		var i MessageSubscription
		if err := rows.Scan(
			&i.Key,
			&i.ElementID,
			&i.ProcessDefinitionKey,
			&i.ProcessInstanceKey,
			&i.Name,
			&i.State,
			&i.CreatedAt,
			&i.CorrelationKey,
			&i.ExecutionToken,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findTokenMessageSubscriptions = `-- name: FindTokenMessageSubscriptions :many
SELECT
    "key", element_id, process_definition_key, process_instance_key, name, state, created_at, correlation_key, execution_token
FROM
    message_subscription
WHERE
    execution_token = ?1
    AND state = ?2
`

type FindTokenMessageSubscriptionsParams struct {
	ExecutionToken int64 `json:"execution_token"`
	State          int64 `json:"state"`
}

func (q *Queries) FindTokenMessageSubscriptions(ctx context.Context, arg FindTokenMessageSubscriptionsParams) ([]MessageSubscription, error) {
	rows, err := q.db.QueryContext(ctx, findTokenMessageSubscriptions, arg.ExecutionToken, arg.State)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MessageSubscription{}
	for rows.Next() {
		var i MessageSubscription
		if err := rows.Scan(
			&i.Key,
			&i.ElementID,
			&i.ProcessDefinitionKey,
			&i.ProcessInstanceKey,
			&i.Name,
			&i.State,
			&i.CreatedAt,
			&i.CorrelationKey,
			&i.ExecutionToken,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessageSubscriptionById = `-- name: GetMessageSubscriptionById :one
SELECT
    "key", element_id, process_definition_key, process_instance_key, name, state, created_at, correlation_key, execution_token
FROM
    message_subscription
WHERE
    key = ?1
    AND state = ?2
`

type GetMessageSubscriptionByIdParams struct {
	Key   int64 `json:"key"`
	State int64 `json:"state"`
}

func (q *Queries) GetMessageSubscriptionById(ctx context.Context, arg GetMessageSubscriptionByIdParams) (MessageSubscription, error) {
	row := q.db.QueryRowContext(ctx, getMessageSubscriptionById, arg.Key, arg.State)
	var i MessageSubscription
	err := row.Scan(
		&i.Key,
		&i.ElementID,
		&i.ProcessDefinitionKey,
		&i.ProcessInstanceKey,
		&i.Name,
		&i.State,
		&i.CreatedAt,
		&i.CorrelationKey,
		&i.ExecutionToken,
	)
	return i, err
}

const saveMessageSubscription = `-- name: SaveMessageSubscription :exec
INSERT INTO message_subscription(key, element_id, process_definition_key, process_instance_key, name, state,
    created_at, correlation_key, execution_token)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
ON CONFLICT
    DO UPDATE SET
        state = excluded.state
`

type SaveMessageSubscriptionParams struct {
	Key                  int64  `json:"key"`
	ElementID            string `json:"element_id"`
	ProcessDefinitionKey int64  `json:"process_definition_key"`
	ProcessInstanceKey   int64  `json:"process_instance_key"`
	Name                 string `json:"name"`
	State                int64  `json:"state"`
	CreatedAt            int64  `json:"created_at"`
	CorrelationKey       string `json:"correlation_key"`
	ExecutionToken       int64  `json:"execution_token"`
}

func (q *Queries) SaveMessageSubscription(ctx context.Context, arg SaveMessageSubscriptionParams) error {
	_, err := q.db.ExecContext(ctx, saveMessageSubscription,
		arg.Key,
		arg.ElementID,
		arg.ProcessDefinitionKey,
		arg.ProcessInstanceKey,
		arg.Name,
		arg.State,
		arg.CreatedAt,
		arg.CorrelationKey,
		arg.ExecutionToken,
	)
	return err
}
