// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: message_subscription_pointer.sql

package sql

import (
	"context"
)

const findMessageSubscriptionPointer = `-- name: FindMessageSubscriptionPointer :one
SELECT
    name, correlation_key, state, created_at, message_subscription_key, execution_token_key
FROM
    message_subscription_pointer
WHERE
    correlation_key = ?1
    AND name = ?2
    AND state = ?3
`

type FindMessageSubscriptionPointerParams struct {
	CorrelationKey string `json:"correlation_key"`
	Name           string `json:"name"`
	FilterState    int64  `json:"filter_state"`
}

func (q *Queries) FindMessageSubscriptionPointer(ctx context.Context, arg FindMessageSubscriptionPointerParams) (MessageSubscriptionPointer, error) {
	row := q.db.QueryRowContext(ctx, findMessageSubscriptionPointer, arg.CorrelationKey, arg.Name, arg.FilterState)
	var i MessageSubscriptionPointer
	err := row.Scan(
		&i.Name,
		&i.CorrelationKey,
		&i.State,
		&i.CreatedAt,
		&i.MessageSubscriptionKey,
		&i.ExecutionTokenKey,
	)
	return i, err
}

const saveMessageSubscriptionPointer = `-- name: SaveMessageSubscriptionPointer :exec

INSERT INTO message_subscription_pointer(state, created_at, name, correlation_key, message_subscription_key, execution_token_key)
    VALUES (?, ?, ?, ?, ?, ?)
    ON CONFLICT(name,correlation_key)
        DO UPDATE SET
            state = excluded.state,
						created_at = excluded.created_at,
						message_subscription_key = excluded.message_subscription_key,
						execution_token_key = excluded.execution_token_key
`

type SaveMessageSubscriptionPointerParams struct {
	State                  int64  `json:"state"`
	CreatedAt              int64  `json:"created_at"`
	Name                   string `json:"name"`
	CorrelationKey         string `json:"correlation_key"`
	MessageSubscriptionKey int64  `json:"message_subscription_key"`
	ExecutionTokenKey      int64  `json:"execution_token_key"`
}

// Copyright 2021-present ZenBPM Contributors
// (based on git commit history).
//
// ZenBPM project is available under two licenses:
//   - SPDX-License-Identifier: AGPL-3.0-or-later (See LICENSE-AGPL.md)
//   - Enterprise License (See LICENSE-ENTERPRISE.md)
func (q *Queries) SaveMessageSubscriptionPointer(ctx context.Context, arg SaveMessageSubscriptionPointerParams) error {
	_, err := q.db.ExecContext(ctx, saveMessageSubscriptionPointer,
		arg.State,
		arg.CreatedAt,
		arg.Name,
		arg.CorrelationKey,
		arg.MessageSubscriptionKey,
		arg.ExecutionTokenKey,
	)
	return err
}
