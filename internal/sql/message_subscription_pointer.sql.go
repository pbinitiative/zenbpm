// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: message_subscription_pointer.sql

package sql

import (
	"context"
)

const findMessageSubscriptionPointer = `-- name: FindMessageSubscriptionPointer :one
SELECT
    "key", state, created_at, name, correlation_key, message_subscription_key, execution_token_key
FROM
    message_subscription_pointer
WHERE
    correlation_key = ?1
    AND name = ?2
    AND state = ?3
`

type FindMessageSubscriptionPointerParams struct {
	CorrelationKey string `json:"correlation_key"`
	Name           string `json:"name"`
	FilterState    int64  `json:"filter_state"`
}

func (q *Queries) FindMessageSubscriptionPointer(ctx context.Context, arg FindMessageSubscriptionPointerParams) (MessageSubscriptionPointer, error) {
	row := q.db.QueryRowContext(ctx, findMessageSubscriptionPointer, arg.CorrelationKey, arg.Name, arg.FilterState)
	var i MessageSubscriptionPointer
	err := row.Scan(
		&i.Key,
		&i.State,
		&i.CreatedAt,
		&i.Name,
		&i.CorrelationKey,
		&i.MessageSubscriptionKey,
		&i.ExecutionTokenKey,
	)
	return i, err
}

const saveMessageSubscriptionPointer = `-- name: SaveMessageSubscriptionPointer :exec
INSERT INTO message_subscription_pointer(key, state, created_at, name, correlation_key, message_subscription_key, execution_token_key)
    VALUES (?, ?, ?, ?, ?, ?, ?)
    ON CONFLICT(key)
        DO UPDATE SET
            state = excluded.state
`

type SaveMessageSubscriptionPointerParams struct {
	Key                    int64  `json:"key"`
	State                  int64  `json:"state"`
	CreatedAt              int64  `json:"created_at"`
	Name                   string `json:"name"`
	CorrelationKey         string `json:"correlation_key"`
	MessageSubscriptionKey int64  `json:"message_subscription_key"`
	ExecutionTokenKey      int64  `json:"execution_token_key"`
}

func (q *Queries) SaveMessageSubscriptionPointer(ctx context.Context, arg SaveMessageSubscriptionPointerParams) error {
	_, err := q.db.ExecContext(ctx, saveMessageSubscriptionPointer,
		arg.Key,
		arg.State,
		arg.CreatedAt,
		arg.Name,
		arg.CorrelationKey,
		arg.MessageSubscriptionKey,
		arg.ExecutionTokenKey,
	)
	return err
}

const setStateForMessageSubscriptionPointers = `-- name: SetStateForMessageSubscriptionPointers :exec
UPDATE message_subscription_pointer
SET state = ?1
WHERE execution_token_key = ?2
`

type SetStateForMessageSubscriptionPointersParams struct {
	State             int64 `json:"state"`
	ExecutionTokenKey int64 `json:"execution_token_key"`
}

func (q *Queries) SetStateForMessageSubscriptionPointers(ctx context.Context, arg SetStateForMessageSubscriptionPointersParams) error {
	_, err := q.db.ExecContext(ctx, setStateForMessageSubscriptionPointers, arg.State, arg.ExecutionTokenKey)
	return err
}
