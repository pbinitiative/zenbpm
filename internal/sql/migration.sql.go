// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: migration.sql

package sql

import (
	"context"
)

const getMigrations = `-- name: GetMigrations :many
SELECT
    name, ran_at
FROM
    migration
`

func (q *Queries) GetMigrations(ctx context.Context) ([]Migration, error) {
	rows, err := q.db.QueryContext(ctx, getMigrations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Migration{}
	for rows.Next() {
		var i Migration
		if err := rows.Scan(&i.Name, &i.RanAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveMigration = `-- name: SaveMigration :exec
INSERT INTO migration(name, ran_at)
    VALUES (?1, ?2)
`

type SaveMigrationParams struct {
	Name  string `json:"name"`
	RanAt int64  `json:"ran_at"`
}

func (q *Queries) SaveMigration(ctx context.Context, arg SaveMigrationParams) error {
	_, err := q.db.ExecContext(ctx, saveMigration, arg.Name, arg.RanAt)
	return err
}
