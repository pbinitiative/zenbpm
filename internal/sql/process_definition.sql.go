// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: process_definition.sql

package sql

import (
	"context"
	"database/sql"
	"strings"
)

const findAllProcessDefinitions = `-- name: FindAllProcessDefinitions :many
SELECT
    "key", version, bpmn_process_id, bpmn_data, bpmn_checksum, bpmn_resource_name
FROM
    process_definition
ORDER BY
    version DESC
`

func (q *Queries) FindAllProcessDefinitions(ctx context.Context) ([]ProcessDefinition, error) {
	rows, err := q.db.QueryContext(ctx, findAllProcessDefinitions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProcessDefinition{}
	for rows.Next() {
		var i ProcessDefinition
		if err := rows.Scan(
			&i.Key,
			&i.Version,
			&i.BpmnProcessID,
			&i.BpmnData,
			&i.BpmnChecksum,
			&i.BpmnResourceName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findLatestProcessDefinitionById = `-- name: FindLatestProcessDefinitionById :one
SELECT
    "key", version, bpmn_process_id, bpmn_data, bpmn_checksum, bpmn_resource_name
FROM
    process_definition
WHERE
    bpmn_process_id = ?1
ORDER BY
    version DESC
LIMIT 1
`

func (q *Queries) FindLatestProcessDefinitionById(ctx context.Context, bpmnProcessID string) (ProcessDefinition, error) {
	row := q.db.QueryRowContext(ctx, findLatestProcessDefinitionById, bpmnProcessID)
	var i ProcessDefinition
	err := row.Scan(
		&i.Key,
		&i.Version,
		&i.BpmnProcessID,
		&i.BpmnData,
		&i.BpmnChecksum,
		&i.BpmnResourceName,
	)
	return i, err
}

const findProcessDefinitionByKey = `-- name: FindProcessDefinitionByKey :one
SELECT
    "key", version, bpmn_process_id, bpmn_data, bpmn_checksum, bpmn_resource_name
FROM
    process_definition
WHERE
    key = ?1
`

func (q *Queries) FindProcessDefinitionByKey(ctx context.Context, key int64) (ProcessDefinition, error) {
	row := q.db.QueryRowContext(ctx, findProcessDefinitionByKey, key)
	var i ProcessDefinition
	err := row.Scan(
		&i.Key,
		&i.Version,
		&i.BpmnProcessID,
		&i.BpmnData,
		&i.BpmnChecksum,
		&i.BpmnResourceName,
	)
	return i, err
}

const findProcessDefinitions = `-- name: FindProcessDefinitions :many
SELECT
    "key", version, bpmn_process_id, bpmn_data, bpmn_checksum, bpmn_resource_name
FROM
    process_definition
WHERE
    COALESCE(?1, "key") = "key"
    AND COALESCE(?2, bpmn_process_id) = bpmn_process_id
ORDER BY
    version DESC
`

type FindProcessDefinitionsParams struct {
	Key           sql.NullInt64  `json:"key"`
	BpmnProcessID sql.NullString `json:"bpmn_process_id"`
}

func (q *Queries) FindProcessDefinitions(ctx context.Context, arg FindProcessDefinitionsParams) ([]ProcessDefinition, error) {
	rows, err := q.db.QueryContext(ctx, findProcessDefinitions, arg.Key, arg.BpmnProcessID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProcessDefinition{}
	for rows.Next() {
		var i ProcessDefinition
		if err := rows.Scan(
			&i.Key,
			&i.Version,
			&i.BpmnProcessID,
			&i.BpmnData,
			&i.BpmnChecksum,
			&i.BpmnResourceName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findProcessDefinitionsById = `-- name: FindProcessDefinitionsById :many
SELECT
    "key", version, bpmn_process_id, bpmn_data, bpmn_checksum, bpmn_resource_name
FROM
    process_definition
WHERE
    bpmn_process_id = ?1
ORDER BY
    version asc
`

func (q *Queries) FindProcessDefinitionsById(ctx context.Context, bpmnProcessIds string) ([]ProcessDefinition, error) {
	rows, err := q.db.QueryContext(ctx, findProcessDefinitionsById, bpmnProcessIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProcessDefinition{}
	for rows.Next() {
		var i ProcessDefinition
		if err := rows.Scan(
			&i.Key,
			&i.Version,
			&i.BpmnProcessID,
			&i.BpmnData,
			&i.BpmnChecksum,
			&i.BpmnResourceName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findProcessDefinitionsByKeys = `-- name: FindProcessDefinitionsByKeys :many
SELECT
    "key", version, bpmn_process_id, bpmn_data, bpmn_checksum, bpmn_resource_name
FROM
    process_definition
WHERE
    key IN (/*SLICE:keys*/?)
`

func (q *Queries) FindProcessDefinitionsByKeys(ctx context.Context, keys []int64) ([]ProcessDefinition, error) {
	query := findProcessDefinitionsByKeys
	var queryParams []interface{}
	if len(keys) > 0 {
		for _, v := range keys {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:keys*/?", strings.Repeat(",?", len(keys))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:keys*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProcessDefinition{}
	for rows.Next() {
		var i ProcessDefinition
		if err := rows.Scan(
			&i.Key,
			&i.Version,
			&i.BpmnProcessID,
			&i.BpmnData,
			&i.BpmnChecksum,
			&i.BpmnResourceName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDefinitionKeyByChecksum = `-- name: GetDefinitionKeyByChecksum :one
SELECT
    key
FROM
    process_definition
WHERE
    bpmn_checksum = ?1
LIMIT 1
`

func (q *Queries) GetDefinitionKeyByChecksum(ctx context.Context, bpmnChecksum []byte) (int64, error) {
	row := q.db.QueryRowContext(ctx, getDefinitionKeyByChecksum, bpmnChecksum)
	var key int64
	err := row.Scan(&key)
	return key, err
}

const saveProcessDefinition = `-- name: SaveProcessDefinition :exec
INSERT INTO process_definition(key, version, bpmn_process_id, bpmn_data, bpmn_checksum, bpmn_resource_name)
    VALUES (?, ?, ?, ?, ?, ?)
`

type SaveProcessDefinitionParams struct {
	Key              int64  `json:"key"`
	Version          int64  `json:"version"`
	BpmnProcessID    string `json:"bpmn_process_id"`
	BpmnData         string `json:"bpmn_data"`
	BpmnChecksum     []byte `json:"bpmn_checksum"`
	BpmnResourceName string `json:"bpmn_resource_name"`
}

func (q *Queries) SaveProcessDefinition(ctx context.Context, arg SaveProcessDefinitionParams) error {
	_, err := q.db.ExecContext(ctx, saveProcessDefinition,
		arg.Key,
		arg.Version,
		arg.BpmnProcessID,
		arg.BpmnData,
		arg.BpmnChecksum,
		arg.BpmnResourceName,
	)
	return err
}
