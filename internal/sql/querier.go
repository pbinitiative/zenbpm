// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package sql

import (
	"context"
)

type Querier interface {
	FindActiveJobsByType(ctx context.Context, type_ string) ([]Job, error)
	FindAllDecisionDefinitions(ctx context.Context) ([]DecisionDefinition, error)
	FindAllJobs(ctx context.Context, arg FindAllJobsParams) ([]Job, error)
	FindAllProcessDefinitions(ctx context.Context) ([]ProcessDefinition, error)
	FindDecisionByIdAndDecisionDefinitionKey(ctx context.Context, arg FindDecisionByIdAndDecisionDefinitionKeyParams) (Decision, error)
	FindDecisionDefinitionByKey(ctx context.Context, key int64) (DecisionDefinition, error)
	FindDecisionDefinitionsById(ctx context.Context, dmnID string) ([]DecisionDefinition, error)
	FindDecisionsById(ctx context.Context, decisionID string) ([]Decision, error)
	FindElementTimers(ctx context.Context, arg FindElementTimersParams) ([]Timer, error)
	FindIncidentByKey(ctx context.Context, key int64) (Incident, error)
	FindIncidents(ctx context.Context, arg FindIncidentsParams) ([]Incident, error)
	FindIncidentsByProcessInstanceKey(ctx context.Context, processInstanceKey int64) ([]Incident, error)
	FindJobByElementId(ctx context.Context, arg FindJobByElementIdParams) (Job, error)
	FindJobByJobKey(ctx context.Context, key int64) (Job, error)
	FindJobByKey(ctx context.Context, key int64) (Job, error)
	FindJobsFilter(ctx context.Context, arg FindJobsFilterParams) ([]Job, error)
	FindLatestDecisionById(ctx context.Context, decisionID string) (Decision, error)
	FindLatestDecisionByIdAndDecisionDefinitionId(ctx context.Context, arg FindLatestDecisionByIdAndDecisionDefinitionIdParams) (Decision, error)
	FindLatestDecisionByIdAndVersionTag(ctx context.Context, arg FindLatestDecisionByIdAndVersionTagParams) (Decision, error)
	FindLatestDecisionDefinitionById(ctx context.Context, dmnID string) (DecisionDefinition, error)
	FindLatestProcessDefinitionById(ctx context.Context, bpmnProcessID string) (ProcessDefinition, error)
	FindMessageSubscriptionPointer(ctx context.Context, arg FindMessageSubscriptionPointerParams) (MessageSubscriptionPointer, error)
	FindMessageSubscriptions(ctx context.Context, arg FindMessageSubscriptionsParams) ([]MessageSubscription, error)
	FindProcessDefinitionByKey(ctx context.Context, key int64) (ProcessDefinition, error)
	FindProcessDefinitions(ctx context.Context, arg FindProcessDefinitionsParams) ([]ProcessDefinition, error)
	FindProcessDefinitionsById(ctx context.Context, bpmnProcessIds string) ([]ProcessDefinition, error)
	FindProcessDefinitionsByKeys(ctx context.Context, keys []int64) ([]ProcessDefinition, error)
	FindProcessInstanceJobs(ctx context.Context, processInstanceKey int64) ([]Job, error)
	FindProcessInstanceJobsInState(ctx context.Context, arg FindProcessInstanceJobsInStateParams) ([]Job, error)
	FindProcessInstanceMessageSubscriptions(ctx context.Context, arg FindProcessInstanceMessageSubscriptionsParams) ([]MessageSubscription, error)
	FindProcessInstances(ctx context.Context, arg FindProcessInstancesParams) ([]ProcessInstance, error)
	FindProcessInstancesPage(ctx context.Context, arg FindProcessInstancesPageParams) ([]ProcessInstance, error)
	FindTimers(ctx context.Context, arg FindTimersParams) ([]Timer, error)
	FindTimersInStateTillDueAt(ctx context.Context, arg FindTimersInStateTillDueAtParams) ([]Timer, error)
	FindTokenMessageSubscriptions(ctx context.Context, arg FindTokenMessageSubscriptionsParams) ([]MessageSubscription, error)
	FindTokenTimers(ctx context.Context, arg FindTokenTimersParams) ([]Timer, error)
	FindWaitingJobs(ctx context.Context, arg FindWaitingJobsParams) ([]Job, error)
	GetDecisionDefinitionKeyByChecksum(ctx context.Context, dmnChecksum []byte) (int64, error)
	GetDefinitionKeyByChecksum(ctx context.Context, bpmnChecksum []byte) (int64, error)
	GetFlowElementHistory(ctx context.Context, processInstanceKey int64) ([]FlowElementHistory, error)
	GetMessageSubscriptionById(ctx context.Context, arg GetMessageSubscriptionByIdParams) (MessageSubscription, error)
	GetMigrations(ctx context.Context) ([]Migration, error)
	GetProcessInstance(ctx context.Context, key int64) (ProcessInstance, error)
	GetTokens(ctx context.Context, keys []int64) ([]ExecutionToken, error)
	GetTokensForProcessInstance(ctx context.Context, arg GetTokensForProcessInstanceParams) ([]ExecutionToken, error)
	GetTokensInStateForPartition(ctx context.Context, arg GetTokensInStateForPartitionParams) ([]ExecutionToken, error)
	// Copyright 2021-present ZenBPM Contributors
	// (based on git commit history).
	//
	// ZenBPM project is available under two licenses:
	//  - SPDX-License-Identifier: AGPL-3.0-or-later (See LICENSE-AGPL.md)
	//  - Enterprise License (See LICENSE-ENTERPRISE.md)
	SaveDecision(ctx context.Context, arg SaveDecisionParams) error
	// Copyright 2021-present ZenBPM Contributors
	// (based on git commit history).
	//
	// ZenBPM project is available under two licenses:
	//  - SPDX-License-Identifier: AGPL-3.0-or-later (See LICENSE-AGPL.md)
	//  - Enterprise License (See LICENSE-ENTERPRISE.md)
	SaveDecisionDefinition(ctx context.Context, arg SaveDecisionDefinitionParams) error
	// Copyright 2021-present ZenBPM Contributors
	// (based on git commit history).
	//
	// ZenBPM project is available under two licenses:
	//  - SPDX-License-Identifier: AGPL-3.0-or-later (See LICENSE-AGPL.md)
	//  - Enterprise License (See LICENSE-ENTERPRISE.md)
	SaveFlowElementHistory(ctx context.Context, arg SaveFlowElementHistoryParams) error
	// Copyright 2021-present ZenBPM Contributors
	// (based on git commit history).
	//
	// ZenBPM project is available under two licenses:
	//  - SPDX-License-Identifier: AGPL-3.0-or-later (See LICENSE-AGPL.md)
	//  - Enterprise License (See LICENSE-ENTERPRISE.md)
	SaveIncident(ctx context.Context, arg SaveIncidentParams) error
	// Copyright 2021-present ZenBPM Contributors
	// (based on git commit history).
	//
	// ZenBPM project is available under two licenses:
	//  - SPDX-License-Identifier: AGPL-3.0-or-later (See LICENSE-AGPL.md)
	//  - Enterprise License (See LICENSE-ENTERPRISE.md)
	SaveJob(ctx context.Context, arg SaveJobParams) error
	// Copyright 2021-present ZenBPM Contributors
	// (based on git commit history).
	//
	// ZenBPM project is available under two licenses:
	//  - SPDX-License-Identifier: AGPL-3.0-or-later (See LICENSE-AGPL.md)
	//  - Enterprise License (See LICENSE-ENTERPRISE.md)
	SaveMessageSubscription(ctx context.Context, arg SaveMessageSubscriptionParams) error
	SaveMessageSubscriptionPointer(ctx context.Context, arg SaveMessageSubscriptionPointerParams) error
	// Copyright 2021-present ZenBPM Contributors
	// (based on git commit history).
	//
	// ZenBPM project is available under two licenses:
	//  - SPDX-License-Identifier: AGPL-3.0-or-later (See LICENSE-AGPL.md)
	//  - Enterprise License (See LICENSE-ENTERPRISE.md)
	SaveMigration(ctx context.Context, arg SaveMigrationParams) error
	// Copyright 2021-present ZenBPM Contributors
	// (based on git commit history).
	//
	// ZenBPM project is available under two licenses:
	//  - SPDX-License-Identifier: AGPL-3.0-or-later (See LICENSE-AGPL.md)
	//  - Enterprise License (See LICENSE-ENTERPRISE.md)
	SaveProcessDefinition(ctx context.Context, arg SaveProcessDefinitionParams) error
	// /*
	//  * Copyright 2021-present ZenBPM Contributors
	//  * (based on git commit history).
	//  *
	//  * ZenBPM project is available under two licenses:
	//  * - SPDX-License-Identifier: AGPL-3.0-or-later (See LICENSE-AGPL.md)
	//  * - Enterprise License (See LICENSE-ENTERPRISE.md)
	//  */
	SaveProcessInstance(ctx context.Context, arg SaveProcessInstanceParams) error
	// Copyright 2021-present ZenBPM Contributors
	// (based on git commit history).
	//
	// ZenBPM project is available under two licenses:
	//  - SPDX-License-Identifier: AGPL-3.0-or-later (See LICENSE-AGPL.md)
	//  - Enterprise License (See LICENSE-ENTERPRISE.md)
	SaveTimer(ctx context.Context, arg SaveTimerParams) error
	// Copyright 2021-present ZenBPM Contributors
	// (based on git commit history).
	//
	// ZenBPM project is available under two licenses:
	//  - SPDX-License-Identifier: AGPL-3.0-or-later (See LICENSE-AGPL.md)
	//  - Enterprise License (See LICENSE-ENTERPRISE.md)
	SaveToken(ctx context.Context, arg SaveTokenParams) error
	SetStateForMessageSubscriptionPointers(ctx context.Context, arg SetStateForMessageSubscriptionPointersParams) error
}

var _ Querier = (*Queries)(nil)
