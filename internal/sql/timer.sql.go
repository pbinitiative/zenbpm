// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: timer.sql

package sql

import (
	"context"
	"database/sql"
)

const findElementTimers = `-- name: FindElementTimers :many
SELECT
    "key", element_instance_key, element_id, process_definition_key, process_instance_key, state, created_at, due_at, execution_token
FROM
    timer
WHERE
    element_instance_key = ?1
    AND state = ?2
`

type FindElementTimersParams struct {
	ElementInstanceKey int64 `json:"element_instance_key"`
	State              int64 `json:"state"`
}

func (q *Queries) FindElementTimers(ctx context.Context, arg FindElementTimersParams) ([]Timer, error) {
	rows, err := q.db.QueryContext(ctx, findElementTimers, arg.ElementInstanceKey, arg.State)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Timer{}
	for rows.Next() {
		var i Timer
		if err := rows.Scan(
			&i.Key,
			&i.ElementInstanceKey,
			&i.ElementID,
			&i.ProcessDefinitionKey,
			&i.ProcessInstanceKey,
			&i.State,
			&i.CreatedAt,
			&i.DueAt,
			&i.ExecutionToken,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findProcessInstanceTimersInState = `-- name: FindProcessInstanceTimersInState :many
SELECT
    "key", element_instance_key, element_id, process_definition_key, process_instance_key, state, created_at, due_at, execution_token
FROM
    timer
WHERE
    process_instance_key = ?1
    AND state = ?2
`

type FindProcessInstanceTimersInStateParams struct {
	ProcessInstanceKey int64 `json:"process_instance_key"`
	State              int64 `json:"state"`
}

func (q *Queries) FindProcessInstanceTimersInState(ctx context.Context, arg FindProcessInstanceTimersInStateParams) ([]Timer, error) {
	rows, err := q.db.QueryContext(ctx, findProcessInstanceTimersInState, arg.ProcessInstanceKey, arg.State)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Timer{}
	for rows.Next() {
		var i Timer
		if err := rows.Scan(
			&i.Key,
			&i.ElementInstanceKey,
			&i.ElementID,
			&i.ProcessDefinitionKey,
			&i.ProcessInstanceKey,
			&i.State,
			&i.CreatedAt,
			&i.DueAt,
			&i.ExecutionToken,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findTimers = `-- name: FindTimers :many
SELECT
    "key", element_instance_key, element_id, process_definition_key, process_instance_key, state, created_at, due_at, execution_token
FROM
    timer
WHERE
    COALESCE(?1, process_instance_key) = process_instance_key
    AND COALESCE(?2, "element_instance_key") = "element_instance_key"
    AND (?3 IS NULL
        OR "state" IN (
            SELECT
                value
            FROM
                json_each(?3)))
`

type FindTimersParams struct {
	ProcessInstanceKey sql.NullInt64 `json:"process_instance_key"`
	ElementInstanceKey sql.NullInt64 `json:"element_instance_key"`
	States             interface{}   `json:"states"`
}

func (q *Queries) FindTimers(ctx context.Context, arg FindTimersParams) ([]Timer, error) {
	rows, err := q.db.QueryContext(ctx, findTimers, arg.ProcessInstanceKey, arg.ElementInstanceKey, arg.States)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Timer{}
	for rows.Next() {
		var i Timer
		if err := rows.Scan(
			&i.Key,
			&i.ElementInstanceKey,
			&i.ElementID,
			&i.ProcessDefinitionKey,
			&i.ProcessInstanceKey,
			&i.State,
			&i.CreatedAt,
			&i.DueAt,
			&i.ExecutionToken,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findTimersInStateTillDueAt = `-- name: FindTimersInStateTillDueAt :many
SELECT
    "key", element_instance_key, element_id, process_definition_key, process_instance_key, state, created_at, due_at, execution_token
FROM
    timer
WHERE
    due_at < ?1
    AND state = ?2
`

type FindTimersInStateTillDueAtParams struct {
	DueAt int64 `json:"due_at"`
	State int64 `json:"state"`
}

func (q *Queries) FindTimersInStateTillDueAt(ctx context.Context, arg FindTimersInStateTillDueAtParams) ([]Timer, error) {
	rows, err := q.db.QueryContext(ctx, findTimersInStateTillDueAt, arg.DueAt, arg.State)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Timer{}
	for rows.Next() {
		var i Timer
		if err := rows.Scan(
			&i.Key,
			&i.ElementInstanceKey,
			&i.ElementID,
			&i.ProcessDefinitionKey,
			&i.ProcessInstanceKey,
			&i.State,
			&i.CreatedAt,
			&i.DueAt,
			&i.ExecutionToken,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findTokenTimers = `-- name: FindTokenTimers :many
SELECT
    "key", element_instance_key, element_id, process_definition_key, process_instance_key, state, created_at, due_at, execution_token
FROM
    timer
WHERE
    execution_token = ?1
    AND state = ?2
`

type FindTokenTimersParams struct {
	ExecutionToken int64 `json:"execution_token"`
	State          int64 `json:"state"`
}

func (q *Queries) FindTokenTimers(ctx context.Context, arg FindTokenTimersParams) ([]Timer, error) {
	rows, err := q.db.QueryContext(ctx, findTokenTimers, arg.ExecutionToken, arg.State)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Timer{}
	for rows.Next() {
		var i Timer
		if err := rows.Scan(
			&i.Key,
			&i.ElementInstanceKey,
			&i.ElementID,
			&i.ProcessDefinitionKey,
			&i.ProcessInstanceKey,
			&i.State,
			&i.CreatedAt,
			&i.DueAt,
			&i.ExecutionToken,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveTimer = `-- name: SaveTimer :exec

INSERT INTO timer(key, element_id, element_instance_key, process_definition_key, process_instance_key, state, created_at, due_at, execution_token)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
ON CONFLICT
    DO UPDATE SET
        state = excluded.state
`

type SaveTimerParams struct {
	Key                  int64  `json:"key"`
	ElementID            string `json:"element_id"`
	ElementInstanceKey   int64  `json:"element_instance_key"`
	ProcessDefinitionKey int64  `json:"process_definition_key"`
	ProcessInstanceKey   int64  `json:"process_instance_key"`
	State                int64  `json:"state"`
	CreatedAt            int64  `json:"created_at"`
	DueAt                int64  `json:"due_at"`
	ExecutionToken       int64  `json:"execution_token"`
}

// Copyright 2021-present ZenBPM Contributors
// (based on git commit history).
//
// ZenBPM project is available under two licenses:
//   - SPDX-License-Identifier: AGPL-3.0-or-later (See LICENSE-AGPL.md)
//   - Enterprise License (See LICENSE-ENTERPRISE.md)
func (q *Queries) SaveTimer(ctx context.Context, arg SaveTimerParams) error {
	_, err := q.db.ExecContext(ctx, saveTimer,
		arg.Key,
		arg.ElementID,
		arg.ElementInstanceKey,
		arg.ProcessDefinitionKey,
		arg.ProcessInstanceKey,
		arg.State,
		arg.CreatedAt,
		arg.DueAt,
		arg.ExecutionToken,
	)
	return err
}
