// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: message_subscription.sql

package sql

import (
	"context"
	"database/sql"
)

const findMessageSubscriptions = `-- name: FindMessageSubscriptions :many
SELECT element_instance_key,element_id,  process_key, process_instance_key, name, state, created_at,origin_activity_key, origin_activity_state, origin_activity_id 
FROM message_subscription
WHERE COALESCE(?1, "origin_activity_key") = "origin_activity_key" AND
COALESCE(?2, process_instance_key) = process_instance_key AND
COALESCE(?3, element_id) = element_id
`

type FindMessageSubscriptionsParams struct {
	OriginActivityKey  sql.NullInt64  `json:"origin_activity_key"`
	ProcessInstanceKey sql.NullInt64  `json:"process_instance_key"`
	ElementID          sql.NullString `json:"element_id"`
}

type FindMessageSubscriptionsRow struct {
	ElementInstanceKey  int64  `json:"element_instance_key"`
	ElementID           string `json:"element_id"`
	ProcessKey          int64  `json:"process_key"`
	ProcessInstanceKey  int64  `json:"process_instance_key"`
	Name                string `json:"name"`
	State               int    `json:"state"`
	CreatedAt           int64  `json:"created_at"`
	OriginActivityKey   int64  `json:"origin_activity_key"`
	OriginActivityState int    `json:"origin_activity_state"`
	OriginActivityID    string `json:"origin_activity_id"`
}

func (q *Queries) FindMessageSubscriptions(ctx context.Context, arg FindMessageSubscriptionsParams) ([]FindMessageSubscriptionsRow, error) {
	rows, err := q.db.QueryContext(ctx, findMessageSubscriptions, arg.OriginActivityKey, arg.ProcessInstanceKey, arg.ElementID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FindMessageSubscriptionsRow{}
	for rows.Next() {
		var i FindMessageSubscriptionsRow
		if err := rows.Scan(
			&i.ElementInstanceKey,
			&i.ElementID,
			&i.ProcessKey,
			&i.ProcessInstanceKey,
			&i.Name,
			&i.State,
			&i.CreatedAt,
			&i.OriginActivityKey,
			&i.OriginActivityState,
			&i.OriginActivityID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveMessageSubscription = `-- name: SaveMessageSubscription :exec
INSERT INTO message_subscription
(element_instance_key,element_id,  process_key, process_instance_key, name, state, created_at,origin_activity_key, origin_activity_state, origin_activity_id)
VALUES
(?,?,  ?, ?, ?, ?, ?, ?, ?, ?) ON CONFLICT DO UPDATE SET state = excluded.state
`

type SaveMessageSubscriptionParams struct {
	ElementInstanceKey  int64  `json:"element_instance_key"`
	ElementID           string `json:"element_id"`
	ProcessKey          int64  `json:"process_key"`
	ProcessInstanceKey  int64  `json:"process_instance_key"`
	Name                string `json:"name"`
	State               int    `json:"state"`
	CreatedAt           int64  `json:"created_at"`
	OriginActivityKey   int64  `json:"origin_activity_key"`
	OriginActivityState int    `json:"origin_activity_state"`
	OriginActivityID    string `json:"origin_activity_id"`
}

func (q *Queries) SaveMessageSubscription(ctx context.Context, arg SaveMessageSubscriptionParams) error {
	_, err := q.db.ExecContext(ctx, saveMessageSubscription,
		arg.ElementInstanceKey,
		arg.ElementID,
		arg.ProcessKey,
		arg.ProcessInstanceKey,
		arg.Name,
		arg.State,
		arg.CreatedAt,
		arg.OriginActivityKey,
		arg.OriginActivityState,
		arg.OriginActivityID,
	)
	return err
}
