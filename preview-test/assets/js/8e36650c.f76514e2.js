"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[929],{3473:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"tutorials/getting-started","title":"Getting Started with ZenBPM","description":"This tutorial will guide you through the basics of ZenBPM, helping you set up your first BPMN process and execute it.","source":"@site/docs/tutorials/getting-started.md","sourceDirName":"tutorials","slug":"/tutorials/getting-started","permalink":"/zenbpm/preview-test/tutorials/getting-started","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Tutorials","permalink":"/zenbpm/preview-test/category/tutorials"},"next":{"title":"How to","permalink":"/zenbpm/preview-test/category/how-to"}}');var i=s(4848),l=s(8453);const r={},o="Getting Started with ZenBPM",c={},a=[{value:"What You&#39;ll Learn",id:"what-youll-learn",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Step 1: Install and Run ZenBPM",id:"step-1-install-and-run-zenbpm",level:2},{value:"Step 2: Create a Simple BPMN Process",id:"step-2-create-a-simple-bpmn-process",level:2},{value:"Step 3: Deploy the Process to ZenBPM",id:"step-3-deploy-the-process-to-zenbpm",level:2},{value:"Step 4: Start a Process Instance",id:"step-4-start-a-process-instance",level:2},{value:"Step 5: Monitor the Process Execution",id:"step-5-monitor-the-process-execution",level:2},{value:"Step 6: View Process Activities",id:"step-6-view-process-activities",level:2},{value:"Conclusion",id:"conclusion",level:2},{value:"Next Steps",id:"next-steps",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"getting-started-with-zenbpm",children:"Getting Started with ZenBPM"})}),"\n",(0,i.jsx)(n.p,{children:"This tutorial will guide you through the basics of ZenBPM, helping you set up your first BPMN process and execute it."}),"\n",(0,i.jsx)(n.h2,{id:"what-youll-learn",children:"What You'll Learn"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"How to install and run ZenBPM"}),"\n",(0,i.jsx)(n.li,{children:"How to create a simple BPMN process"}),"\n",(0,i.jsx)(n.li,{children:"How to deploy the process to ZenBPM"}),"\n",(0,i.jsx)(n.li,{children:"How to start a process instance"}),"\n",(0,i.jsx)(n.li,{children:"How to monitor the process execution"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Basic understanding of what BPMN is"}),"\n",(0,i.jsx)(n.li,{children:"Docker installed on your machine"}),"\n",(0,i.jsx)(n.li,{children:"A text editor or IDE of your choice"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"step-1-install-and-run-zenbpm",children:"Step 1: Install and Run ZenBPM"}),"\n",(0,i.jsx)(n.p,{children:"The easiest way to get started with ZenBPM is to use Docker."}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Pull the ZenBPM Docker image:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker pull zenbpm/zenbpm:latest\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:"Run the ZenBPM container:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker run -d -p 8080:8080 -p 9000:9000 --name zenbpm zenbpm/zenbpm:latest\n"})}),"\n",(0,i.jsx)(n.p,{children:"This will start ZenBPM with:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["REST API available at ",(0,i.jsx)(n.a,{href:"http://localhost:8080",children:"http://localhost:8080"})]}),"\n",(0,i.jsx)(n.li,{children:"gRPC API available at localhost:9000"}),"\n"]}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsx)(n.li,{children:"Verify that ZenBPM is running:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"curl http://localhost:8080/v1/health\n"})}),"\n",(0,i.jsx)(n.p,{children:"You should see a response indicating that the service is healthy."}),"\n",(0,i.jsx)(n.h2,{id:"step-2-create-a-simple-bpmn-process",children:"Step 2: Create a Simple BPMN Process"}),"\n",(0,i.jsx)(n.p,{children:'For this tutorial, we\'ll create a simple "Hello World" process with a start event, a script task, and an end event.'}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Create a file named ",(0,i.jsx)(n.code,{children:"hello-world.bpmn"})," with the following content:"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<?xml version="1.0" encoding="UTF-8"?>\n<bpmn:definitions xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL"\n                  xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI"\n                  xmlns:dc="http://www.omg.org/spec/DD/20100524/DC"\n                  xmlns:di="http://www.omg.org/spec/DD/20100524/DI"\n                  id="Definitions_1"\n                  targetNamespace="http://bpmn.io/schema/bpmn">\n  <bpmn:process id="hello-world" name="Hello World Process" isExecutable="true">\n    <bpmn:startEvent id="StartEvent_1" name="Start">\n      <bpmn:outgoing>SequenceFlow_1</bpmn:outgoing>\n    </bpmn:startEvent>\n    <bpmn:sequenceFlow id="SequenceFlow_1" sourceRef="StartEvent_1" targetRef="ScriptTask_1" />\n    <bpmn:scriptTask id="ScriptTask_1" name="Say Hello">\n      <bpmn:incoming>SequenceFlow_1</bpmn:incoming>\n      <bpmn:outgoing>SequenceFlow_2</bpmn:outgoing>\n      <bpmn:script>console.log("Hello, World!");</bpmn:script>\n    </bpmn:scriptTask>\n    <bpmn:sequenceFlow id="SequenceFlow_2" sourceRef="ScriptTask_1" targetRef="EndEvent_1" />\n    <bpmn:endEvent id="EndEvent_1" name="End">\n      <bpmn:incoming>SequenceFlow_2</bpmn:incoming>\n    </bpmn:endEvent>\n  </bpmn:process>\n</bpmn:definitions>\n'})}),"\n",(0,i.jsx)(n.p,{children:"This BPMN file defines a simple process with:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"A start event"}),"\n",(0,i.jsx)(n.li,{children:'A script task that logs "Hello, World!"'}),"\n",(0,i.jsx)(n.li,{children:"An end event"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"step-3-deploy-the-process-to-zenbpm",children:"Step 3: Deploy the Process to ZenBPM"}),"\n",(0,i.jsx)(n.p,{children:"Now that we have our BPMN process, let's deploy it to ZenBPM:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'curl -X POST http://localhost:8080/v1/process-definitions \\\n  -H "Content-Type: application/xml" \\\n  --data-binary @hello-world.bpmn\n'})}),"\n",(0,i.jsxs)(n.p,{children:["You should receive a response with details about the deployed process definition, including a ",(0,i.jsx)(n.code,{children:"processDefinitionKey"})," that uniquely identifies it."]}),"\n",(0,i.jsx)(n.h2,{id:"step-4-start-a-process-instance",children:"Step 4: Start a Process Instance"}),"\n",(0,i.jsx)(n.p,{children:"With the process definition deployed, we can now start a process instance:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'curl -X POST http://localhost:8080/v1/process-instances \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "processDefinitionKey": "hello-world",\n    "variables": {\n      "greeting": "Hello from ZenBPM!"\n    }\n  }\'\n'})}),"\n",(0,i.jsxs)(n.p,{children:['This will start a new instance of our "Hello World" process. The response will include a ',(0,i.jsx)(n.code,{children:"processInstanceKey"})," that uniquely identifies this instance."]}),"\n",(0,i.jsx)(n.h2,{id:"step-5-monitor-the-process-execution",children:"Step 5: Monitor the Process Execution"}),"\n",(0,i.jsx)(n.p,{children:"Let's check the status of our process instance:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"curl -X GET http://localhost:8080/v1/process-instances/{processInstanceKey}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Replace ",(0,i.jsx)(n.code,{children:"{processInstanceKey}"})," with the actual key from the previous step."]}),"\n",(0,i.jsx)(n.p,{children:"You should see details about the process instance, including its current state. Since our process is very simple, it might have already completed by the time you check."}),"\n",(0,i.jsx)(n.h2,{id:"step-6-view-process-activities",children:"Step 6: View Process Activities"}),"\n",(0,i.jsx)(n.p,{children:"To see what activities were executed in our process:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"curl -X GET http://localhost:8080/v1/process-instances/{processInstanceKey}/activities\n"})}),"\n",(0,i.jsx)(n.p,{children:"This will show you all the activities that were executed as part of the process instance, including the script task."}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(n.p,{children:"Congratulations! You've successfully:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Set up ZenBPM"}),"\n",(0,i.jsx)(n.li,{children:"Created a simple BPMN process"}),"\n",(0,i.jsx)(n.li,{children:"Deployed the process to ZenBPM"}),"\n",(0,i.jsx)(n.li,{children:"Started a process instance"}),"\n",(0,i.jsx)(n.li,{children:"Monitored the process execution"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsx)(n.p,{children:"Now that you've completed this basic tutorial, you might want to:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Learn how to ",(0,i.jsx)(n.a,{href:"/zenbpm/preview-test/",children:"create more complex BPMN processes"})]}),"\n",(0,i.jsxs)(n.li,{children:["Explore ",(0,i.jsx)(n.a,{href:"/zenbpm/preview-test/",children:"user tasks and forms"})]}),"\n",(0,i.jsxs)(n.li,{children:["Understand ",(0,i.jsx)(n.a,{href:"/zenbpm/preview-test/",children:"message events and correlation"})]}),"\n",(0,i.jsxs)(n.li,{children:["Set up ",(0,i.jsx)(n.a,{href:"/zenbpm/preview-test/",children:"process monitoring and observability"})]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>o});var t=s(6540);const i={},l=t.createContext(i);function r(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);