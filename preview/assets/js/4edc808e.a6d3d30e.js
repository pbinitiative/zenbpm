"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[308],{96025:(e,n,s)=>{s.r(n),s.d(n,{DOUBLE_DOCS:()=>h,SmartLink:()=>u,assets:()=>l,contentTitle:()=>d,default:()=>g,frontMatter:()=>a,metadata:()=>i,toc:()=>x});const i=JSON.parse('{"id":"index","title":"Introduction","description":"if (DOUBLE_DOCS.test(href)) {","source":"@site/docs/index.mdx","sourceDirName":".","slug":"/","permalink":"/zenbpm/preview/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"slug":"/","title":"Introduction","hide_title":true},"sidebar":"docs","previous":{"title":"Architecture Overview","permalink":"/zenbpm/preview/explanation/architecture/architecture-overview"},"next":{"title":"Openapi","permalink":"/zenbpm/preview/openapi"}}');var r=s(74848),t=(s(96540),s(28453));function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"zenbpm---go-bpmn-engine",children:"ZenBPM - Go BPMN Engine"})}),"\n",(0,r.jsx)(n.p,{children:"ZenBPM is a next-generation Business Process Management (BPM) engine written in Go, designed to execute BPMN 2.0 process\ndefinitions."}),"\n",(0,r.jsx)(n.p,{children:"It provides a lightweight, cloud-ready platform for defining, deploying, and executing business processes with minimal\noverhead and maximum flexibility."}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["\u26a0\ufe0f ",(0,r.jsx)(n.strong,{children:"Warning"}),": This project is in early stages and is not suitable for production use yet."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"what-is-bpmn",children:"What is BPMN?"}),"\n",(0,r.jsx)(n.p,{children:"Business Process Model and Notation (BPMN) is a graphical representation for specifying business processes in a business process model. It provides businesses with a standard notation that is readily understandable by all business stakeholders."}),"\n",(0,r.jsx)(n.h2,{id:"key-features",children:"Key Features"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cloud-Native Architecture"}),": Designed for cloud environments with containerization and orchestration support"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Lightweight Design"}),": Minimal resource footprint with fast startup time and efficient execution"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"BPMN 2.0 Support"}),": Execute standard BPMN 2.0 process definitions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"REST API"}),": Comprehensive REST API for process management"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"gRPC Interface"}),": High-performance gRPC interface for system integration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Distributed Architecture"}),": Support for clustering and distributed execution"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Process Elements Support"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Start and End Events"}),"\n",(0,r.jsx)(n.li,{children:"Service Tasks"}),"\n",(0,r.jsx)(n.li,{children:"User Tasks - handled as Service Tasks"}),"\n",(0,r.jsx)(n.li,{children:"Exclusive Gateways"}),"\n",(0,r.jsx)(n.li,{children:"Inclusive Gateways"}),"\n",(0,r.jsx)(n.li,{children:"Parallel Gateways"}),"\n",(0,r.jsx)(n.li,{children:"Event-Based Gateways"}),"\n",(0,r.jsx)(n.li,{children:"Intermediate Catch and Throw Events"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Persistence"}),": Durable state storage using rqlite"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Observability"}),": Integrated with OpenTelemetry for tracing and metrics"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,r.jsx)(n.h3,{id:"installation",children:"Installation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Clone the repository\ngit clone git@github.com:pbinitiative/zenbpm.git\n\n# Start application\ncd zenbpm\nmake run\n\n# Run tests\nmake test\n"})}),"\n",(0,r.jsx)(n.h3,{id:"docker",children:"Docker"}),"\n",(0,r.jsx)(n.p,{children:"You can run ZenBPM in a Docker container:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"docker build -t zenbpm .\ndocker run -d -p 8080:8080 -p 9090:9090 --name zenbpm zenbpm\n"})}),"\n",(0,r.jsx)(n.h2,{id:"architecture",children:"Architecture"}),"\n",(0,r.jsx)(n.p,{children:"ZenBPM is built with a modular architecture:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"BPMN Engine"}),": Core component that executes process definitions, manages process instances, and handles task execution"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"DMN Engine"}),": Decision Model and Notation (DMN) engine that evaluates business rules and decision tables"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Storage Layer"}),": Manages persistence of process state"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"API Layer"}),": Provides REST and gRPC interfaces"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cluster Management"}),": Coordinates distributed execution"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,r.jsx)(n.p,{children:"ZenBPM provides both REST and gRPC APIs:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"REST API"}),": Documented in OpenAPI format: ",(0,r.jsx)(n.a,{href:"/docs/docs/openapi.mdx",children:"documentation"}),", ",(0,r.jsx)(n.a,{href:"/docs/docs/../openapi/redocusaurus/api.yaml",children:"specification"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"gRPC API"}),": Defined in Protocol Buffers format: ",(0,r.jsx)(n.a,{href:"/docs/docs/../proto/zenbpm.proto",children:"specification"})]}),"\n"]})]})}function o(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}const a={slug:"/",title:"Introduction",hide_title:!0},d=void 0,l={},h=/^\/?docs\/docs\//i;function u({href:e,...n}){let s=e;return h.test(e)&&(s=e.replace(h,"./").replace(/\.mdx?$/i,"")),(0,r.jsx)("a",{href:s,...n})}const p=function(){return(0,r.jsx)(o,{components:{a:u}})},x=[];function j(e){return(0,r.jsx)(r.Fragment,{})}function g(e={}){return(0,r.jsx)(p,{...e,children:(0,r.jsx)(j,{...e})})}}}]);